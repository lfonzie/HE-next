/**
 * Validador de Embed - Controla acesso aos m√≥dulos embed
 * Valida dom√≠nios autorizados e tokens de seguran√ßa
 */

export interface EmbedValidationResult {
  allowed: boolean;
  reason?: string;
  schoolDomain?: string;
}

/**
 * Valida se uma requisi√ß√£o pode acessar o embed
 */
export function validateEmbedAccess(headers: Headers): EmbedValidationResult {
  // Obter configura√ß√µes de ambiente
  const allowedDomains = process.env.EMBED_ALLOWED_DOMAINS?.split(',').map(d => d.trim()) || [];
  const embedToken = process.env.EMBED_ACCESS_TOKEN;
  const allowAllInDev = process.env.NODE_ENV === 'development';

  // Em desenvolvimento, permitir todos se configurado
  if (allowAllInDev && process.env.EMBED_ALLOW_ALL_DEV === 'true') {
    console.log('üîì [EMBED] Modo desenvolvimento - acesso permitido');
    return { allowed: true, reason: 'Development mode' };
  }

  // Obter origem da requisi√ß√£o
  const origin = headers.get('origin') || headers.get('referer') || '';
  const token = headers.get('x-embed-token');

  console.log('üîç [EMBED] Validando acesso:', { origin, hasToken: !!token });

  // Se houver token configurado, validar primeiro
  if (embedToken && token === embedToken) {
    console.log('‚úÖ [EMBED] Token v√°lido - acesso permitido');
    return { allowed: true, reason: 'Valid token' };
  }

  // Se n√£o houver dom√≠nios configurados e n√£o houver token, bloquear
  if (allowedDomains.length === 0 && !embedToken) {
    console.log('‚ö†Ô∏è [EMBED] Nenhum dom√≠nio ou token configurado - bloqueando acesso');
    return { 
      allowed: false, 
      reason: 'No allowed domains or token configured' 
    };
  }

  // Validar dom√≠nio de origem
  if (allowedDomains.length > 0 && origin) {
    try {
      const originUrl = new URL(origin);
      const originDomain = originUrl.hostname;

      for (const allowedDomain of allowedDomains) {
        // Verificar correspond√™ncia exata ou subdom√≠nio
        if (originDomain === allowedDomain || originDomain.endsWith(`.${allowedDomain}`)) {
          console.log(`‚úÖ [EMBED] Dom√≠nio autorizado: ${originDomain}`);
          return { 
            allowed: true, 
            reason: 'Allowed domain', 
            schoolDomain: originDomain 
          };
        }
      }
    } catch (error) {
      console.error('‚ùå [EMBED] Erro ao validar origem:', error);
    }
  }

  console.log(`‚ùå [EMBED] Acesso negado para: ${origin}`);
  return { 
    allowed: false, 
    reason: 'Domain not allowed' 
  };
}

/**
 * Valida√ß√£o client-side (apenas informativa, n√£o √© seguran√ßa real)
 */
export function validateEmbedClient(): boolean {
  // Verificar se est√° em iframe
  const isInIframe = window !== window.parent;
  
  if (!isInIframe) {
    console.warn('‚ö†Ô∏è [EMBED] P√°gina n√£o est√° em iframe');
  }

  return isInIframe;
}

/**
 * Obter dom√≠nio pai do iframe (client-side)
 */
export function getParentDomain(): string | null {
  try {
    if (window !== window.parent) {
      return document.referrer ? new URL(document.referrer).hostname : null;
    }
  } catch (error) {
    // Cross-origin restrictions
    console.log('‚ÑπÔ∏è [EMBED] N√£o foi poss√≠vel obter dom√≠nio pai (cross-origin)');
  }
  return null;
}

