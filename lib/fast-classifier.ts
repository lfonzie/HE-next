// Classificador r√°pido local - sem chamadas externas
export interface FastClassificationResult {
  module: string;
  confidence: number;
  rationale: string;
}

// Padr√µes otimizados para classifica√ß√£o r√°pida
const FAST_PATTERNS = {
  // Padr√µes de alta confian√ßa (0.9+)
  professor: [
    /\b(d√∫vida|explica√ß√£o|conceito|mat√©ria|disciplina|como resolver|f√≥rmula|teorema|demonstra√ß√£o|prova|an√°lise|s√≠ntese|comparar|explicar detalhadamente|processo complexo|estat√≠stica|probabilidade|vetores|matriz|logaritmo|exponencial|limite|continuidade)\b/i,
    /\b(geometria|√°lgebra|trigonometria|c√°lculo|derivada|integral|equa√ß√£o|fun√ß√£o)\b/i,
    /\b(f√≠sica|qu√≠mica|biologia|hist√≥ria|geografia|portugu√™s|literatura|reda√ß√£o|matem√°tica)\b/i,
    /\b(me ajude com.*d√∫vida|tirar uma d√∫vida|ajuda com.*exerc√≠cio)\b/i
  ],
  
  enem: [
    /\b(enem|simulado|tri|prova objetiva|reda√ß√£o|quest√µes de m√∫ltipla escolha|gabarito)\b/i,
    /\b(simulado r√°pido|quest√µes enem|prova r√°pida)\b/i
  ],
  
  aula_interativa: [
    /\b(aula interativa|slides|explica√ß√£o passo a passo|atividade|demonstra√ß√£o|aula din√¢mica|aula participativa)\b/i,
    /\b(aula completa|aula detalhada|aula expandida)\b/i
  ],
  
  ti: [
    /\b(projetor|internet|lenta|login|n√£o funciona|configurar|impressora|bug|sistema|computador|travou|build|deploy|render|porta|log|404|405|nextauth|rota|api)\b/i,
    /\b(problema t√©cnico|suporte t√©cnico|equipamento)\b/i
  ],
  
  financeiro: [
    /\b(pagamento|boleto|mensalidade|financeiro|valor|pre√ßo|custo|desconto|parcelamento|taxa de matr√≠cula)\b/i
  ],
  
  rh: [
    /\b(benef√≠cios|f√©rias|atestado|m√©dico|sal√°rio|treinamento|carreira|promo√ß√£o|recursos humanos|colaboradores|funcion√°rios)\b/i
  ],
  
  social_media: [
    /\b(post|rede social|instagram|facebook|tiktok|youtube|conte√∫do digital|marketing digital|postagem|compartilhar nas redes)\b/i
  ],
  
  bem_estar: [
    /\b(ansioso|ansiosa|conflito|colega|apoio|emocional|estresse|depress√£o|depressao|bullying|conflito|familiar|sa√∫de|saude|mental|psic√≥logo|psicologo|psic√≥loga|psicologa|terapia|apoio emocional)\b/i,
    /\b(me sinto|estou|sinto|preciso de ajuda|quero ajuda|preciso falar)\b[\s\S]*\b(triste|ansioso|ansiosa|deprimido|deprimida|angustiado|angustiada|sobrecarregado|sobrecarregada|com medo|em p√¢nico|em panico|sem esperan√ßa|desmotivado|desmotivada|cansado|cansada)\b/i,
    /\b(ansiedade|depress√£o|depressao|crise de p√¢nico|crise de panico|sa√∫de mental|saude mental)\b/i
  ],
  
  coordenacao: [
    /\b(calend√°rio|provas|coordenador|pedag√≥gico|gest√£o|acad√™mica|planejamento|pedag√≥gico|metodologia|ensino)\b/i
  ],
  
  secretaria: [
    /\b(matr√≠cula|documentos|hor√°rio|secretaria|whats|procedimentos|administrativos)\b/i
  ],
  
  conteudo_midia: [
    /\b(preciso de uma imagem|diagrama|gr√°fico|ilustra√ß√£o|infogr√°fico|conte√∫do visual|material visual)\b/i
  ]
};

// Cache local simples
const classificationCache = new Map<string, { result: FastClassificationResult; timestamp: number }>();

export function fastClassify(message: string, historyLength: number = 0): FastClassificationResult {
  const cacheKey = `${message.toLowerCase().trim()}_${historyLength}`;
  const cached = classificationCache.get(cacheKey);
  
  // Cache por 30 minutos (mais agressivo)
  if (cached && Date.now() - cached.timestamp < 1800000) {
    return cached.result;
  }
  
  const messageLower = message.toLowerCase();
  let bestMatch = { module: 'professor', confidence: 0.5, rationale: 'Default fallback' };
  
  // Verificar padr√µes de alta confian√ßa primeiro
  for (const [module, patterns] of Object.entries(FAST_PATTERNS)) {
    for (const pattern of patterns) {
      if (pattern.test(messageLower)) {
        const confidence = pattern.source.includes('d√∫vida|explica√ß√£o|conceito') ? 0.95 : 0.85;
        bestMatch = {
          module,
          confidence,
          rationale: `Fast pattern match: ${pattern.source.substring(0, 50)}...`
        };
        
        // Cache o resultado
        classificationCache.set(cacheKey, { result: bestMatch, timestamp: Date.now() });
        
        // Limitar cache
        if (classificationCache.size > 100) {
          const firstKey = classificationCache.keys().next().value;
          if (firstKey) classificationCache.delete(firstKey);
        }
        
        return bestMatch;
      }
    }
  }
  
  // Fallback baseado em palavras-chave simples
  if (messageLower.includes('aula') || messageLower.includes('slide')) {
    bestMatch = { module: 'aula_interativa', confidence: 0.7, rationale: 'Keyword: aula/slide' };
  } else if (messageLower.includes('simulado') || messageLower.includes('enem')) {
    bestMatch = { module: 'enem', confidence: 0.7, rationale: 'Keyword: simulado/enem' };
  } else if (messageLower.includes('problema') && messageLower.includes('t√©cnico')) {
    bestMatch = { module: 'ti', confidence: 0.7, rationale: 'Keyword: problema t√©cnico' };
  } else if (messageLower.includes('me sinto') || messageLower.includes('estou') || messageLower.includes('sinto')) {
    // Detectar mensagens de bem-estar mesmo sem palavras espec√≠ficas
    if (messageLower.includes('triste') || messageLower.includes('ansioso') || messageLower.includes('ansiosa') || 
        messageLower.includes('deprimido') || messageLower.includes('deprimida') || messageLower.includes('cansado') || 
        messageLower.includes('cansada') || messageLower.includes('mal') || messageLower.includes('n√£o') || 
        messageLower.includes('nao') || messageLower.includes('problema') || messageLower.includes('dificuldade')) {
      bestMatch = { module: 'bem_estar', confidence: 0.8, rationale: 'Keyword: estado emocional detectado' };
    }
  }
  
  // Cache o resultado
  classificationCache.set(cacheKey, { result: bestMatch, timestamp: Date.now() });
  
  return bestMatch;
}

// Fun√ß√£o para limpar cache (√∫til para debug)
export function clearFastClassificationCache() {
  classificationCache.clear();
  console.log('üßπ [FAST-CLASSIFIER] Cache limpo');
}

// Fun√ß√£o para testar classifica√ß√£o (√∫til para debug)
export function testFastClassification(message: string): FastClassificationResult {
  return fastClassify(message, 0);
}
