/**
 * Sistema Inteligente de Extra√ß√£o e Tradu√ß√£o de Temas
 * Extrai o tema principal da pergunta do usu√°rio e traduz para ingl√™s
 */

import { openai } from '@ai-sdk/openai';
import { generateText } from 'ai';

export interface ThemeExtractionResult {
  mainTheme: string;
  translatedTheme: string;
  confidence: number;
  context: string;
}

/**
 * Extrai o tema principal de uma pergunta em portugu√™s
 * Exemplo: "Como funciona a respira√ß√£o?" ‚Üí "respira√ß√£o"
 */
export async function extractMainTheme(userQuery: string): Promise<ThemeExtractionResult> {
  try {
    const prompt = `
Analise a pergunta do usu√°rio e extraia APENAS o tema principal, sem palavras de conex√£o.

Exemplos:
- "Como funciona a respira√ß√£o?" ‚Üí respira√ß√£o
- "O que √© fotoss√≠ntese?" ‚Üí fotoss√≠ntese  
- "Causas da Independ√™ncia do Brasil" ‚Üí independ√™ncia do brasil
- "Como funciona a intelig√™ncia artificial?" ‚Üí intelig√™ncia artificial
- "O que √© matem√°tica?" ‚Üí matem√°tica

Pergunta do usu√°rio: "${userQuery}"

Responda APENAS com o tema principal em portugu√™s, sem explica√ß√µes.
`;

    const result = await generateText({
      model: openai('gpt-4o-mini'),
      prompt,
      maxTokens: 50,
      temperature: 0.1
    });

    const mainTheme = result.text.trim().toLowerCase();
    
    return {
      mainTheme,
      translatedTheme: '', // Ser√° preenchido na pr√≥xima fun√ß√£o
      confidence: 0.9,
      context: userQuery
    };

  } catch (error) {
    console.error('Erro ao extrair tema principal:', error);
    
    // Fallback: extrair manualmente
    const fallbackTheme = extractThemeFallback(userQuery);
    
    return {
      mainTheme: fallbackTheme,
      translatedTheme: '',
      confidence: 0.5,
      context: userQuery
    };
  }
}

/**
 * Traduz o tema principal para ingl√™s usando AI
 */
export async function translateThemeToEnglish(mainTheme: string): Promise<string> {
  try {
    const prompt = `
Traduza o seguinte tema cient√≠fico/educacional do portugu√™s para ingl√™s.
Use termos t√©cnicos precisos e comuns em conte√∫do educacional.

Tema: "${mainTheme}"

Responda APENAS com a tradu√ß√£o em ingl√™s, sem explica√ß√µes.
`;

    const result = await generateText({
      model: openai('gpt-4o-mini'),
      prompt,
      maxTokens: 30,
      temperature: 0.1
    });

    return result.text.trim().toLowerCase();

  } catch (error) {
    console.error('Erro ao traduzir tema:', error);
    
    // Fallback: tradu√ß√£o manual
    return translateThemeFallback(mainTheme);
  }
}

/**
 * Fun√ß√£o principal: extrai tema e traduz para ingl√™s
 */
export async function extractAndTranslateTheme(userQuery: string): Promise<ThemeExtractionResult> {
  console.log(`üéØ Extraindo tema de: "${userQuery}"`);
  
  // 1. Extrair tema principal
  const extraction = await extractMainTheme(userQuery);
  console.log(`üìù Tema extra√≠do: "${extraction.mainTheme}"`);
  
  // 2. Traduzir para ingl√™s
  const translatedTheme = await translateThemeToEnglish(extraction.mainTheme);
  console.log(`üåç Tema traduzido: "${translatedTheme}"`);
  
  return {
    ...extraction,
    translatedTheme
  };
}

/**
 * Fallback para extra√ß√£o manual de tema
 */
function extractThemeFallback(query: string): string {
  // Remover palavras de conex√£o comuns
  const stopWords = [
    'como', 'funciona', 'o', 'que', '√©', 's√£o', 'da', 'do', 'das', 'dos',
    'para', 'com', 'em', 'sobre', 'acerca', 'relacionado', 'sobre',
    'causas', 'consequ√™ncias', 'efeitos', 'tipos', 'exemplos'
  ];
  
  const words = query
    .toLowerCase()
    .replace(/[?¬ø!¬°.,;:]/g, '')
    .split(' ')
    .filter(word => word.length > 2 && !stopWords.includes(word));
  
  // Retornar as 2-3 palavras mais relevantes
  return words.slice(0, 3).join(' ');
}

/**
 * Fallback para tradu√ß√£o manual
 */
function translateThemeFallback(theme: string): string {
  const translations: Record<string, string> = {
    'respira√ß√£o': 'respiration',
    'fotoss√≠ntese': 'photosynthesis',
    'independ√™ncia': 'independence',
    'brasil': 'brazil',
    'intelig√™ncia artificial': 'artificial intelligence',
    'matem√°tica': 'mathematics',
    'f√≠sica': 'physics',
    'qu√≠mica': 'chemistry',
    'biologia': 'biology',
    'hist√≥ria': 'history',
    'geografia': 'geography',
    'portugu√™s': 'portuguese',
    'literatura': 'literature',
    'arte': 'art',
    'm√∫sica': 'music',
    'sistema imunol√≥gico': 'immune system',
    'c√©lula': 'cell',
    'dna': 'dna',
    'gen√©tica': 'genetics',
    'evolu√ß√£o': 'evolution',
    'clima': 'climate',
    'relevo': 'relief',
    'paisagem': 'landscape',
    'continente': 'continent',
    'oceano': 'ocean',
    'floresta': 'forest',
    'deserto': 'desert',
    'montanha': 'mountain',
    'rio': 'river',
    'lago': 'lake'
  };
  
  const lowerTheme = theme.toLowerCase();
  
  // Buscar tradu√ß√£o exata
  if (translations[lowerTheme]) {
    return translations[lowerTheme];
  }
  
  // Buscar tradu√ß√£o parcial
  for (const [pt, en] of Object.entries(translations)) {
    if (lowerTheme.includes(pt)) {
      return lowerTheme.replace(pt, en);
    }
  }
  
  // Se n√£o encontrar, retornar o tema original (pode funcionar em alguns casos)
  return lowerTheme;
}

export default {
  extractMainTheme,
  translateThemeToEnglish,
  extractAndTranslateTheme
};

