import { OrchestratorResponse } from '@/types'
import { registerModule, DetectedIntent } from './orchestrator'

// aula_interativa module
registerModule({
  id: 'aula_interativa',
  name: 'Aula Interativa',
  version: '1.0.0',
  permissions: { requires_auth: false },
  cost_estimate: { tokens: 1000, latency_ms: 1500 },
  async detect({ text }): Promise<DetectedIntent> {
    // Sempre usar OpenAI para detec√ß√£o - maior certeza
    try {
      const response = await fetch('/api/classify', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ userMessage: text }),
      });

      if (response.ok) {
        const data = await response.json();
        if (data.success && data.classification?.module === 'AULA_EXPANDIDA') {
          return { 
            intent: 'lesson_request', 
            module: 'aula_interativa', 
            confidence: data.classification.confidence || 0.8, 
            slots: {} 
          };
        }
      }
    } catch (error) {
      console.error('Erro na detec√ß√£o OpenAI:', error);
    }

    // Fallback simples apenas em caso de erro
    return { intent: 'lesson_request', module: 'aula_interativa', confidence: 0.3, slots: {} }
  },
  async execute({ slots }): Promise<OrchestratorResponse> {
    const tema = slots.tema || 'assunto'
    const disciplina = slots.disciplina || 'geral'
    return {
      text: `üìö **Aula Interativa Ativada**\n\nPreparei uma aula interativa sobre ${tema} (${disciplina}). Podemos come√ßar pelos fundamentos e depois avan√ßar.\n\n**Estrutura da aula:**\n‚Ä¢ Slide 1: Introdu√ß√£o\n‚Ä¢ Slide 2: Conceitos fundamentais\n‚Ä¢ Slide 3: Desenvolvimento\n‚Ä¢ Slide 4: Pergunta interativa\n‚Ä¢ Slide 5: Aplica√ß√µes pr√°ticas\n‚Ä¢ Slide 6: Exemplos\n‚Ä¢ Slide 7: Pergunta interativa\n‚Ä¢ Slide 8: Resumo\n\nDigite "come√ßar aula" para iniciar!`,
      blocks: [
        { type: 'lesson_interactive', lesson_id: `lesson_${Date.now()}`, meta: { tema, disciplina, passos: 8 } }
      ],
      actions: [
        { type: 'cta', label: 'Come√ßar Aula', module: 'aula_interativa', args: { tema, disciplina } },
        { type: 'cta', label: 'Adicionar quiz de 5 quest√µes', module: 'enem', args: { quantidade_questoes: 5 } }
      ]
    }
  }
})

// aula-expandida module (alias for aula_interativa)
registerModule({
  id: 'aula-expandida',
  name: 'Aula Expandida',
  version: '1.0.0',
  permissions: { requires_auth: false },
  cost_estimate: { tokens: 1000, latency_ms: 1500 },
  async detect({ text }): Promise<DetectedIntent> {
    // Sempre usar OpenAI para detec√ß√£o - maior certeza
    try {
      const response = await fetch('/api/classify', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ userMessage: text }),
      });

      if (response.ok) {
        const data = await response.json();
        if (data.success && data.classification?.module === 'AULA_EXPANDIDA') {
          return { 
            intent: 'lesson_request', 
            module: 'aula-expandida', 
            confidence: data.classification.confidence || 0.9, 
            slots: {} 
          };
        }
      }
    } catch (error) {
      console.error('Erro na detec√ß√£o OpenAI:', error);
    }

    // Fallback simples apenas em caso de erro
    return { intent: 'lesson_request', module: 'aula-expandida', confidence: 0.3, slots: {} }
  },
  async execute({ slots, context }): Promise<OrchestratorResponse> {
    const message = context?.text || ''
    const tema = slots.tema || message || 'assunto'
    const disciplina = slots.disciplina || 'geral'
    
    return {
      text: `üéì **Aula Expandida Ativada**\n\nCriando uma aula completa e detalhada sobre ${tema}.\n\n**Esta aula incluir√°:**\n‚Ä¢ Explica√ß√µes detalhadas\n‚Ä¢ Exemplos pr√°ticos\n‚Ä¢ Exerc√≠cios interativos\n‚Ä¢ Resumo completo\n‚Ä¢ Material de apoio\n\nDigite "come√ßar aula expandida" para iniciar!`,
      blocks: [
        { type: 'lesson_interactive', lesson_id: `lesson_expanded_${Date.now()}`, meta: { tema, disciplina, passos: 8, mode: 'expanded' } }
      ],
      actions: [
        { type: 'cta', label: 'Come√ßar Aula Expandida', module: 'aula-expandida', args: { tema, disciplina } },
        { type: 'cta', label: 'Simulado Relacionado', module: 'enem', args: { quantidade_questoes: 5 } }
      ]
    }
  }
})

// enem module
registerModule({
  id: 'enem',
  name: 'ENEM Simulado',
  version: '1.0.0',
  permissions: { requires_auth: false },
  cost_estimate: { tokens: 800, latency_ms: 1200 },
  async detect({ text }): Promise<DetectedIntent> {
    // Sempre usar OpenAI para detec√ß√£o - maior certeza
    try {
      const response = await fetch('/api/classify', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ userMessage: text }),
      });

      if (response.ok) {
        const data = await response.json();
        if (data.success && (data.classification?.module === 'ENEM_INTERATIVO' || data.classification?.module === 'PROFESSOR')) {
          return { 
            intent: 'quiz_request', 
            module: 'enem', 
            confidence: data.classification.confidence || 0.85, 
            slots: {} 
          };
        }
      }
    } catch (error) {
      console.error('Erro na detec√ß√£o OpenAI:', error);
    }

    // Fallback simples apenas em caso de erro
    return { intent: 'quiz_request', module: 'enem', confidence: 0.25, slots: {} }
  },
  async execute({ slots, context }): Promise<OrchestratorResponse> {
    const message = context?.text || ''
    const area = slots.area || 'CN'
    const quantidade = Math.min(Math.max(Number(slots.quantidade_questoes || 5), 1), 50)
    
    return {
      text: `üéØ **Simulador ENEM Ativado**\n\nIniciando simulado com ${quantidade} quest√µes de ${area}.\n\n**√Åreas dispon√≠veis:**\n‚Ä¢ CN - Ci√™ncias da Natureza\n‚Ä¢ CH - Ci√™ncias Humanas\n‚Ä¢ LC - Linguagens e C√≥digos\n‚Ä¢ MT - Matem√°tica\n\nDigite "come√ßar simulado" para iniciar ou me diga qual √°rea voc√™ quer praticar!`,
      blocks: [
        { 
          type: 'quiz', 
          questions: [], 
          meta: { 
            area, 
            quantidade, 
            session_id: `enem_${Date.now()}`,
            mode: 'interactive',
            ready_to_start: false
          } 
        }
      ],
      actions: [
        { type: 'cta', label: 'Come√ßar Simulado CN', module: 'enem', args: { area: 'CN', quantidade_questoes: 5 } },
        { type: 'cta', label: 'Come√ßar Simulado CH', module: 'enem', args: { area: 'CH', quantidade_questoes: 5 } },
        { type: 'cta', label: 'Come√ßar Simulado LC', module: 'enem', args: { area: 'LC', quantidade_questoes: 5 } },
        { type: 'cta', label: 'Come√ßar Simulado MT', module: 'enem', args: { area: 'MT', quantidade_questoes: 5 } }
      ],
      trace: { module: 'enem', confidence: 0.85 }
    }
  }
})

// enem-interativo module (alias for enem with enhanced features)
registerModule({
  id: 'enem-interativo',
  name: 'ENEM Interativo',
  version: '1.0.0',
  permissions: { requires_auth: false },
  cost_estimate: { tokens: 1000, latency_ms: 1500 },
  async detect({ text }): Promise<DetectedIntent> {
    const t = text.toLowerCase()
    const hit = /(enem interativo|simulado interativo|quest√µes interativas|prova interativa|enem com explica√ß√µes)/.test(t)
    return { intent: 'quiz_request', module: 'enem-interativo', confidence: hit ? 0.9 : 0.3, slots: {} }
  },
  async execute({ slots, context }): Promise<OrchestratorResponse> {
    const message = context?.text || ''
    const area = slots.area || 'CN'
    const quantidade = Math.min(Math.max(Number(slots.quantidade_questoes || 5), 1), 50)
    
    return {
      text: `üéØ **ENEM Interativo Ativado**\n\nModo interativo com explica√ß√µes detalhadas e feedback em tempo real!\n\n**Recursos especiais:**\n‚Ä¢ Explica√ß√µes detalhadas de cada quest√£o\n‚Ä¢ Feedback imediato\n‚Ä¢ An√°lise de performance\n‚Ä¢ Sugest√µes de estudo\n‚Ä¢ Relat√≥rio personalizado\n\n**√Åreas dispon√≠veis:**\n‚Ä¢ CN - Ci√™ncias da Natureza\n‚Ä¢ CH - Ci√™ncias Humanas\n‚Ä¢ LC - Linguagens e C√≥digos\n‚Ä¢ MT - Matem√°tica\n\nDigite "come√ßar enem interativo" para iniciar!`,
      blocks: [
        { 
          type: 'quiz', 
          questions: [], 
          meta: { 
            area, 
            quantidade, 
            session_id: `enem_interactive_${Date.now()}`,
            mode: 'interactive',
            enhanced: true,
            ready_to_start: false
          } 
        }
      ],
      actions: [
        { type: 'cta', label: 'ENEM Interativo CN', module: 'enem-interativo', args: { area: 'CN', quantidade_questoes: 5 } },
        { type: 'cta', label: 'ENEM Interativo CH', module: 'enem-interativo', args: { area: 'CH', quantidade_questoes: 5 } },
        { type: 'cta', label: 'ENEM Interativo LC', module: 'enem-interativo', args: { area: 'LC', quantidade_questoes: 5 } },
        { type: 'cta', label: 'ENEM Interativo MT', module: 'enem-interativo', args: { area: 'MT', quantidade_questoes: 5 } }
      ],
      trace: { module: 'enem-interativo', confidence: 0.9 }
    }
  }
})

// ti_troubleshooting module
registerModule({
  id: 'ti_troubleshooting',
  name: 'TI Troubleshooting',
  version: '1.0.0',
  permissions: { requires_auth: false },
  cost_estimate: { tokens: 600, latency_ms: 800 },
  async detect({ text }): Promise<DetectedIntent> {
    const t = text.toLowerCase()
    const hit = /(wifi|internet|computador|impressora|problema t√©cnico|erro|bug|travou)/.test(t)
    return { intent: 'ti_support', module: 'ti_troubleshooting', confidence: hit ? 0.8 : 0.3, slots: {} }
  },
  async execute({ slots }): Promise<OrchestratorResponse> {
    return {
      text: 'Vou te ajudar com esse problema t√©cnico. Vamos resolver passo a passo.',
      blocks: [
        { 
          type: 'checklist', 
          items: [
            { text: 'Verificar conex√£o de rede', done: false },
            { text: 'Reiniciar o equipamento', done: false },
            { text: 'Verificar configura√ß√µes', done: false },
            { text: 'Contatar suporte t√©cnico se necess√°rio', done: false }
          ],
          meta: { category: 'troubleshooting' }
        }
      ],
      actions: [
        { type: 'cta', label: 'Continuar diagn√≥stico', module: 'ti_troubleshooting', args: { step: 'next' } },
        { type: 'link', label: 'Manual t√©cnico', href: '/docs/ti-troubleshooting' }
      ]
    }
  }
})

// faq_escola module
registerModule({
  id: 'faq_escola',
  name: 'FAQ Escola',
  version: '1.0.0',
  permissions: { requires_auth: false },
  cost_estimate: { tokens: 400, latency_ms: 500 },
  async detect({ text }): Promise<DetectedIntent> {
    const t = text.toLowerCase()
    const hit = /(matr(√≠|i)cula|documentos|hor(√°|a)rios|secretaria|boleto)/.test(t)
    return { intent: 'faq_request', module: 'faq_escola', confidence: hit ? 0.75 : 0.25, slots: {} }
  },
  async execute({ slots }): Promise<OrchestratorResponse> {
    return {
      text: 'Aqui est√£o as informa√ß√µes que voc√™ precisa sobre procedimentos escolares.',
      blocks: [
        { 
          type: 'notice', 
          title: 'Informa√ß√µes da Secretaria', 
          body: 'Hor√°rio de funcionamento: Segunda a Sexta, 8h √†s 17h. Telefone: (11) 1234-5678',
          meta: { department: 'secretaria' }
        }
      ],
      actions: [
        { type: 'cta', label: 'Falar com secretaria', module: 'faq_escola', args: { action: 'contact' } },
        { type: 'link', label: 'Portal do aluno', href: '/portal-aluno' }
      ]
    }
  }
})

// bem_estar module
registerModule({
  id: 'bem_estar',
  name: 'Bem-Estar',
  version: '1.0.0',
  permissions: { requires_auth: false },
  cost_estimate: { tokens: 700, latency_ms: 1000 },
  async detect({ text }): Promise<DetectedIntent> {
    const t = text.toLowerCase()
    const hit = /(ansiedade|estresse|bem-estar|sa√∫de mental|conflito|bullying)/.test(t)
    return { intent: 'wellbeing_support', module: 'bem_estar', confidence: hit ? 0.85 : 0.3, slots: {} }
  },
  async execute({ slots }): Promise<OrchestratorResponse> {
    return {
      text: 'Estou aqui para te apoiar. Vamos trabalhar juntos para melhorar seu bem-estar.',
      blocks: [
        { 
          type: 'notice', 
          title: 'Suporte Emocional Dispon√≠vel', 
          body: 'Nossa equipe de psicologia est√° dispon√≠vel para conversar. Voc√™ n√£o est√° sozinho(a).',
          meta: { support_type: 'emotional' }
        }
      ],
      actions: [
        { type: 'cta', label: 'Agendar conversa com psic√≥logo', module: 'bem_estar', args: { action: 'schedule' } },
        { type: 'link', label: 'Exerc√≠cios de relaxamento', href: '/wellness/exercises' }
      ]
    }
  }
})

// financeiro module
registerModule({
  id: 'financeiro',
  name: 'Financeiro',
  version: '1.0.0',
  permissions: { requires_auth: false },
  cost_estimate: { tokens: 500, latency_ms: 600 },
  async detect({ text }): Promise<DetectedIntent> {
    const t = text.toLowerCase()
    const hit = /(pagamento|mensalidade|boleto|financeiro|valor)/.test(t)
    return { intent: 'financial_support', module: 'financeiro', confidence: hit ? 0.8 : 0.25, slots: {} }
  },
  async execute({ slots }): Promise<OrchestratorResponse> {
    return {
      text: 'Vou te ajudar com quest√µes financeiras. Aqui est√£o as informa√ß√µes sobre pagamentos.',
      blocks: [
        { 
          type: 'notice', 
          title: 'Informa√ß√µes Financeiras', 
          body: 'Para quest√µes de pagamento, entre em contato com nossa equipe financeira.',
          meta: { department: 'financeiro' }
        }
      ],
      actions: [
        { type: 'cta', label: 'Falar com financeiro', module: 'financeiro', args: { action: 'contact' } },
        { type: 'link', label: 'Portal de pagamentos', href: '/payments' }
      ]
    }
  }
})

// rh module
registerModule({
  id: 'rh',
  name: 'Recursos Humanos',
  version: '1.0.0',
  permissions: { requires_auth: false },
  cost_estimate: { tokens: 600, latency_ms: 700 },
  async detect({ text }): Promise<DetectedIntent> {
    const t = text.toLowerCase()
    const hit = /(funcion√°rio|professor|rh|sal√°rio|benef√≠cio|f√©rias)/.test(t)
    return { intent: 'hr_support', module: 'rh', confidence: hit ? 0.75 : 0.25, slots: {} }
  },
  async execute({ slots }): Promise<OrchestratorResponse> {
    return {
      text: 'Vou te ajudar com quest√µes de recursos humanos e quest√µes trabalhistas.',
      blocks: [
        { 
          type: 'notice', 
          title: 'Recursos Humanos', 
          body: 'Nossa equipe de RH est√° dispon√≠vel para esclarecer d√∫vidas sobre benef√≠cios, f√©rias e quest√µes trabalhistas.',
          meta: { department: 'rh' }
        }
      ],
      actions: [
        { type: 'cta', label: 'Falar com RH', module: 'rh', args: { action: 'contact' } },
        { type: 'link', label: 'Portal do funcion√°rio', href: '/employee-portal' }
      ]
    }
  }
})

// coordenacao module
registerModule({
  id: 'coordenacao',
  name: 'Coordena√ß√£o Pedag√≥gica',
  version: '1.0.0',
  permissions: { requires_auth: false },
  cost_estimate: { tokens: 600, latency_ms: 800 },
  async detect({ text }): Promise<DetectedIntent> {
    const t = text.toLowerCase()
    const hit = /(coordena√ß√£o|pedag√≥gico|curr√≠culo|disciplina|avalia√ß√£o)/.test(t)
    return { intent: 'coordination_support', module: 'coordenacao', confidence: hit ? 0.75 : 0.25, slots: {} }
  },
  async execute({ slots }): Promise<OrchestratorResponse> {
    return {
      text: 'Vou te ajudar com quest√µes pedag√≥gicas e de coordena√ß√£o acad√™mica.',
      blocks: [
        { 
          type: 'notice', 
          title: 'Coordena√ß√£o Pedag√≥gica', 
          body: 'Nossa equipe pedag√≥gica est√° dispon√≠vel para esclarecer d√∫vidas sobre curr√≠culo, avalia√ß√µes e metodologias.',
          meta: { department: 'coordenacao' }
        }
      ],
      actions: [
        { type: 'cta', label: 'Falar com coordena√ß√£o', module: 'coordenacao', args: { action: 'contact' } },
        { type: 'link', label: 'Calend√°rio acad√™mico', href: '/academic-calendar' }
      ]
    }
  }
})

// social_media module
registerModule({
  id: 'social_media',
  name: 'Social Media',
  version: '1.0.0',
  permissions: { requires_auth: false },
  cost_estimate: { tokens: 500, latency_ms: 600 },
  async detect({ text }): Promise<DetectedIntent> {
    const t = text.toLowerCase()
    const hit = /(rede social|instagram|facebook|marketing|comunica√ß√£o)/.test(t)
    return { intent: 'social_media_support', module: 'social_media', confidence: hit ? 0.7 : 0.25, slots: {} }
  },
  async execute({ slots }): Promise<OrchestratorResponse> {
    return {
      text: 'Vou te ajudar com estrat√©gias de marketing digital e comunica√ß√£o nas redes sociais.',
      blocks: [
        { 
          type: 'notice', 
          title: 'Marketing Digital', 
          body: 'Nossa equipe de comunica√ß√£o est√° dispon√≠vel para ajudar com posts, eventos e divulga√ß√£o.',
          meta: { department: 'social_media' }
        }
      ],
      actions: [
        { type: 'cta', label: 'Falar com marketing', module: 'social_media', args: { action: 'contact' } },
        { type: 'link', label: 'Nossas redes sociais', href: '/social-media' }
      ]
    }
  }
})

// conteudo_midia module
registerModule({
  id: 'conteudo_midia',
  name: 'Conte√∫do & M√≠dia',
  version: '1.0.0',
  permissions: { requires_auth: false },
  cost_estimate: { tokens: 800, latency_ms: 1000 },
  async detect({ text }): Promise<DetectedIntent> {
    const t = text.toLowerCase()
    const hit = /(imagem|diagrama|figura|foto|gr(a|√°)fico|visual)/.test(t)
    return { intent: 'media_request', module: 'conteudo_midia', confidence: hit ? 0.7 : 0.25, slots: {} }
  },
  async execute({ slots }): Promise<OrchestratorResponse> {
    return {
      text: 'Vou buscar conte√∫do visual relevante para voc√™.',
      blocks: [
        { 
          type: 'media', 
          items: [
            { url: '/images/placeholder1.jpg', title: 'Imagem relacionada', caption: 'Conte√∫do visual encontrado' },
            { url: '/images/placeholder2.jpg', title: 'Diagrama explicativo', caption: 'Esquema visual' }
          ],
          meta: { source: 'curated' }
        }
      ],
      actions: [
        { type: 'cta', label: 'Buscar mais imagens', module: 'conteudo_midia', args: { action: 'search_more' } },
        { type: 'link', label: 'Galeria completa', href: '/media-gallery' }
      ]
    }
  }
})

// Fun√ß√£o para identificar o nome da mat√©ria
function getSubjectName(message: string): string {
  const lowerMessage = message.toLowerCase()
  
  if (lowerMessage.includes('geometria')) return 'geometria'
  if (lowerMessage.includes('matem√°tica') || lowerMessage.includes('matematica')) return 'matem√°tica'
  if (lowerMessage.includes('√°lgebra') || lowerMessage.includes('algebra')) return '√°lgebra'
  if (lowerMessage.includes('c√°lculo') || lowerMessage.includes('calculo')) return 'c√°lculo'
  if (lowerMessage.includes('trigonometria') || lowerMessage.includes('trigonomteria') || lowerMessage.includes('trigonom')) return 'trigonometria'
  if (lowerMessage.includes('f√≠sica') || lowerMessage.includes('fisica')) return 'f√≠sica'
  if (lowerMessage.includes('qu√≠mica') || lowerMessage.includes('quimica')) return 'qu√≠mica'
  if (lowerMessage.includes('fotoss√≠ntese') || lowerMessage.includes('fotossintese')) return 'fotoss√≠ntese'
  if (lowerMessage.includes('mitose')) return 'mitose'
  if (lowerMessage.includes('meiose')) return 'meiose'
  if (lowerMessage.includes('gen√©tica') || lowerMessage.includes('genetica')) return 'gen√©tica'
  if (lowerMessage.includes('evolu√ß√£o') || lowerMessage.includes('evolucao')) return 'evolu√ß√£o'
  if (lowerMessage.includes('ecossistema')) return 'ecossistema'
  if (lowerMessage.includes('biologia')) return 'biologia'
  if (lowerMessage.includes('hist√≥ria') || lowerMessage.includes('historia')) return 'hist√≥ria'
  if (lowerMessage.includes('portugu√™s') || lowerMessage.includes('portugues')) return 'portugu√™s'
  if (lowerMessage.includes('literatura')) return 'literatura'
  if (lowerMessage.includes('gram√°tica') || lowerMessage.includes('gramatica')) return 'gram√°tica'
  
  return 'essa mat√©ria'
}

// professor module
registerModule({
  id: 'professor',
  name: 'Professor IA',
  version: '1.0.0',
  permissions: { requires_auth: false },
  cost_estimate: { tokens: 800, latency_ms: 1000 },
  async detect({ text }): Promise<DetectedIntent> {
    // Sempre usar OpenAI para detec√ß√£o - maior certeza
    try {
      const response = await fetch('/api/classify', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ userMessage: text }),
      });

      if (response.ok) {
        const data = await response.json();
        if (data.success && data.classification?.module === 'PROFESSOR') {
          return { 
            intent: 'educational_support', 
            module: 'professor', 
            confidence: data.classification.confidence || 0.9, 
            slots: {} 
          };
        }
      }
    } catch (error) {
      console.error('Erro na detec√ß√£o OpenAI:', error);
    }

    // Fallback simples apenas em caso de erro
    return { intent: 'educational_support', module: 'professor', confidence: 0.3, slots: {} }
  },
  async execute({ slots, context }): Promise<OrchestratorResponse> {
    const message = context?.text || ''
    
    // Debug: Log para ver o que est√° acontecendo
    console.log('Professor module execute:', {
      message,
      context,
      slots,
      hasGeometria: message.includes('geometria'),
      hasMatematica: message.includes('matematica'),
      testResult: /(geometria|matem√°tica|matematica|√°lgebra|algebra|c√°lculo|calculo|trigonometria|f√≠sica|fisica|qu√≠mica|quimica|biologia|hist√≥ria|historia|portugu√™s|portugues|d√∫vida|duvida|quest√£o|questao|exerc√≠cio|exercicio)/i.test(message)
    })
    
    // Se for uma pergunta espec√≠fica sobre geometria ou outras mat√©rias, responder diretamente
    if (/(geometria|matem√°tica|matematica|√°lgebra|algebra|c√°lculo|calculo|trigonometria|trigonomteria|trigonom|f√≠sica|fisica|qu√≠mica|quimica|biologia|fotoss√≠ntese|fotossintese|mitose|meiose|gen√©tica|genetica|evolu√ß√£o|evolucao|ecossistema|hist√≥ria|historia|portugu√™s|portugues|literatura|gram√°tica|gramatica|d√∫vida|duvida|quest√£o|questao|exerc√≠cio|exercicio)/i.test(message)) {
      const subject = getSubjectName(message)
      
      // Respostas espec√≠ficas para cada mat√©ria
      let specificResponse = ''
      let specificActions = []
      
      switch (subject) {
        case 'trigonometria':
          specificResponse = `üìê **Trigonometria - Guia Completo**\n\nA trigonometria √© uma das √°reas mais importantes da matem√°tica, estudando as rela√ß√µes entre √¢ngulos e lados de tri√¢ngulos. √â essencial para entender fen√¥menos peri√≥dicos e resolver problemas geom√©tricos.\n\n## **Conceitos Fundamentais**\n\n**As tr√™s fun√ß√µes principais:**\n‚Ä¢ **Seno (sin)**: Rela√ß√£o entre o cateto oposto e a hipotenusa\n‚Ä¢ **Cosseno (cos)**: Rela√ß√£o entre o cateto adjacente e a hipotenusa\n‚Ä¢ **Tangente (tan)**: Rela√ß√£o entre o cateto oposto e o adjacente\n\n## **Aplica√ß√µes Pr√°ticas**\n\n‚Ä¢ **Engenharia**: C√°lculo de estruturas, pontes, edif√≠cios\n‚Ä¢ **F√≠sica**: Ondas, oscila√ß√µes, movimento harm√¥nico\n‚Ä¢ **Astronomia**: C√°lculo de dist√¢ncias entre corpos celestes\n‚Ä¢ **Navega√ß√£o**: GPS, sistemas de localiza√ß√£o\n‚Ä¢ **Arquitetura**: Projetos de constru√ß√£o\n\n## **Conceitos Avan√ßados**\n\n‚Ä¢ **C√≠rculo trigonom√©trico**: Visualiza√ß√£o das fun√ß√µes\n‚Ä¢ **Identidades trigonom√©tricas**: Rela√ß√µes matem√°ticas importantes\n‚Ä¢ **Lei dos senos e cossenos**: Resolu√ß√£o de tri√¢ngulos\n‚Ä¢ **Fun√ß√µes inversas**: Arco-seno, arco-cosseno, arco-tangente\n\n**üí° Dica**: A trigonometria √© muito visual! Sempre desenhe tri√¢ngulos e use o c√≠rculo trigonom√©trico para entender melhor os conceitos.\n\n**O que voc√™ gostaria de explorar primeiro?**`
          specificActions = [
            { type: 'cta' as const, label: 'Conceitos b√°sicos', module: 'professor', args: { topic: 'trigonometria_basica' } },
            { type: 'cta' as const, label: 'C√≠rculo trigonom√©trico', module: 'professor', args: { topic: 'circulo_trigonometrico' } },
            { type: 'cta' as const, label: 'Aula interativa completa', module: 'aula_interativa', args: { tema: 'trigonometria' } }
          ]
          break
          
        case 'geometria':
          specificResponse = `üìè **Geometria - A Arte das Formas**\n\nA geometria √© uma das √°reas mais antigas e fascinantes da matem√°tica, estudando as formas, tamanhos e propriedades do espa√ßo. √â a base para entender o mundo ao nosso redor!\n\n## **Principais √Åreas da Geometria**\n\n### **Geometria Plana**\n‚Ä¢ **Tri√¢ngulos**: Propriedades, classifica√ß√£o, teoremas importantes\n‚Ä¢ **Quadril√°teros**: Ret√¢ngulos, quadrados, paralelogramos\n‚Ä¢ **C√≠rculos**: Circunfer√™ncia, √°rea, propriedades especiais\n‚Ä¢ **Pol√≠gonos**: Regulares e irregulares\n\n### **Geometria Espacial**\n‚Ä¢ **S√≥lidos**: Cubos, esferas, cilindros, cones\n‚Ä¢ **Volumes**: C√°lculo de capacidade\n‚Ä¢ **√Åreas**: Superf√≠cie de s√≥lidos\n‚Ä¢ **Proje√ß√µes**: Visualiza√ß√£o 3D\n\n### **Geometria Anal√≠tica**\n‚Ä¢ **Coordenadas**: Sistema cartesiano\n‚Ä¢ **Equa√ß√µes**: Retas, c√≠rculos, par√°bolas\n‚Ä¢ **Dist√¢ncias**: Entre pontos e figuras\n‚Ä¢ **Transforma√ß√µes**: Transla√ß√£o, rota√ß√£o, reflex√£o\n\n## **Aplica√ß√µes no Dia a Dia**\n\n‚Ä¢ **Arquitetura**: Projetos de casas e edif√≠cios\n‚Ä¢ **Design**: Logotipos, layouts, interfaces\n‚Ä¢ **Engenharia**: Constru√ß√£o de pontes e estradas\n‚Ä¢ **Arte**: Perspectiva, composi√ß√£o visual\n‚Ä¢ **Tecnologia**: Gr√°ficos computacionais, GPS\n\n**üí° Dica**: A geometria √© muito visual! Use desenhos, modelos e exemplos pr√°ticos para entender melhor os conceitos.\n\n**Por onde voc√™ gostaria de come√ßar?**`
          specificActions = [
            { type: 'cta' as const, label: 'Geometria plana', module: 'professor', args: { topic: 'geometria_plana' } },
            { type: 'cta' as const, label: 'Tri√¢ngulos', module: 'professor', args: { topic: 'triangulos' } },
            { type: 'cta' as const, label: 'Aula completa', module: 'aula_interativa', args: { tema: 'geometria' } }
          ]
          break
          
        case 'matem√°tica':
          specificResponse = `üî¢ **Matem√°tica - A Linguagem Universal**\n\nA matem√°tica √© muito mais que n√∫meros! √â a linguagem que descreve o universo, desde as menores part√≠culas at√© as maiores gal√°xias. √â uma ferramenta poderosa para resolver problemas e entender o mundo ao nosso redor.\n\n## **Principais √Åreas da Matem√°tica**\n\n### **√Ålgebra**\n‚Ä¢ **Equa√ß√µes**: Resolu√ß√£o de problemas matem√°ticos\n‚Ä¢ **Fun√ß√µes**: Rela√ß√µes entre vari√°veis\n‚Ä¢ **Gr√°ficos**: Visualiza√ß√£o de dados\n‚Ä¢ **Polin√¥mios**: Express√µes alg√©bricas complexas\n\n### **Geometria**\n‚Ä¢ **Formas**: Tri√¢ngulos, c√≠rculos, pol√≠gonos\n‚Ä¢ **Espa√ßo**: Geometria 3D e s√≥lidos\n‚Ä¢ **Medidas**: √Årea, per√≠metro, volume\n‚Ä¢ **Transforma√ß√µes**: Movimentos geom√©tricos\n\n### **Trigonometria**\n‚Ä¢ **Fun√ß√µes**: Seno, cosseno, tangente\n‚Ä¢ **Tri√¢ngulos**: Resolu√ß√£o de problemas\n‚Ä¢ **Ondas**: Fen√¥menos peri√≥dicos\n‚Ä¢ **Aplica√ß√µes**: Engenharia, f√≠sica\n\n### **C√°lculo**\n‚Ä¢ **Limites**: Comportamento de fun√ß√µes\n‚Ä¢ **Derivadas**: Taxa de varia√ß√£o\n‚Ä¢ **Integrais**: √Årea sob curvas\n‚Ä¢ **Aplica√ß√µes**: Otimiza√ß√£o, modelagem\n\n### **Estat√≠stica**\n‚Ä¢ **An√°lise de dados**: Interpreta√ß√£o de informa√ß√µes\n‚Ä¢ **Probabilidade**: Chances e possibilidades\n‚Ä¢ **Gr√°ficos**: Visualiza√ß√£o estat√≠stica\n‚Ä¢ **Aplica√ß√µes**: Pesquisa, medicina, economia\n\n## **Por que a Matem√°tica √© Importante?**\n\n‚Ä¢ **Desenvolvimento do racioc√≠nio l√≥gico**\n‚Ä¢ **Resolu√ß√£o de problemas complexos**\n‚Ä¢ **Base para outras ci√™ncias**\n‚Ä¢ **Aplica√ß√µes pr√°ticas no dia a dia**\n‚Ä¢ **Desenvolvimento de habilidades anal√≠ticas**\n\n**üí° Dica**: A matem√°tica n√£o √© sobre decorar f√≥rmulas, mas sobre entender conceitos e desenvolver o pensamento l√≥gico!\n\n**Qual √°rea voc√™ gostaria de explorar?**`
          specificActions = [
            { type: 'cta' as const, label: '√Ålgebra', module: 'professor', args: { topic: 'algebra' } },
            { type: 'cta' as const, label: 'Geometria', module: 'professor', args: { topic: 'geometria' } },
            { type: 'cta' as const, label: 'Trigonometria', module: 'professor', args: { topic: 'trigonometria' } }
          ]
          break
          
        case 'f√≠sica':
          specificResponse = `‚ö° **F√≠sica - Desvendando os Mist√©rios do Universo**\n\nA f√≠sica √© a ci√™ncia que estuda a natureza e os fen√¥menos que ocorrem no universo. √â atrav√©s dela que entendemos desde o movimento de uma bola at√© os segredos das estrelas!\n\n## **Principais √Åreas da F√≠sica**\n\n### **Mec√¢nica**\n‚Ä¢ **Cinem√°tica**: Estudo do movimento\n‚Ä¢ **Din√¢mica**: For√ßas e suas causas\n‚Ä¢ **Energia**: Conserva√ß√£o e transforma√ß√£o\n‚Ä¢ **Gravita√ß√£o**: Atra√ß√£o entre corpos\n\n### **Termodin√¢mica**\n‚Ä¢ **Calor**: Transfer√™ncia de energia t√©rmica\n‚Ä¢ **Temperatura**: Medida da energia cin√©tica\n‚Ä¢ **Leis da termodin√¢mica**: Princ√≠pios fundamentais\n‚Ä¢ **M√°quinas t√©rmicas**: Motores e refrigeradores\n\n### **Eletromagnetismo**\n‚Ä¢ **Eletricidade**: Cargas e correntes\n‚Ä¢ **Magnetismo**: Campos magn√©ticos\n‚Ä¢ **Ondas eletromagn√©ticas**: Luz, r√°dio, raios X\n‚Ä¢ **Circuitos**: Componentes el√©tricos\n\n### **√ìptica**\n‚Ä¢ **Luz**: Natureza e comportamento\n‚Ä¢ **Reflex√£o**: Espelhos e superf√≠cies\n‚Ä¢ **Refra√ß√£o**: Lentes e prismas\n‚Ä¢ **Cores**: Espectro e percep√ß√£o\n\n### **F√≠sica Moderna**\n‚Ä¢ **Relatividade**: Espa√ßo e tempo\n‚Ä¢ **F√≠sica qu√¢ntica**: Mundo subat√¥mico\n‚Ä¢ **F√≠sica nuclear**: Energia at√¥mica\n‚Ä¢ **Astrof√≠sica**: Estrelas e gal√°xias\n\n## **Aplica√ß√µes Pr√°ticas**\n\n‚Ä¢ **Tecnologia**: Smartphones, computadores, GPS\n‚Ä¢ **Medicina**: Raios X, resson√¢ncia magn√©tica\n‚Ä¢ **Energia**: Usinas, pain√©is solares\n‚Ä¢ **Transporte**: Avi√µes, carros, foguetes\n‚Ä¢ **Comunica√ß√£o**: Internet, sat√©lites\n\n**üí° Dica**: A f√≠sica est√° em tudo! Observe o mundo ao seu redor e tente entender os fen√¥menos que acontecem diariamente.\n\n**Qual √°rea da f√≠sica te interessa mais?**`
          specificActions = [
            { type: 'cta' as const, label: 'Mec√¢nica', module: 'professor', args: { topic: 'mecanica' } },
            { type: 'cta' as const, label: 'Eletricidade', module: 'professor', args: { topic: 'eletricidade' } },
            { type: 'cta' as const, label: 'Aula completa', module: 'aula_interativa', args: { tema: 'fisica' } }
          ]
          break
          
        case 'qu√≠mica':
          specificResponse = `üß™ **Qu√≠mica - A Ci√™ncia das Transforma√ß√µes**\n\nA qu√≠mica √© a ci√™ncia que estuda a mat√©ria, suas propriedades, composi√ß√£o e as transforma√ß√µes que ela sofre. √â atrav√©s da qu√≠mica que entendemos como os materiais se comportam e como podemos criar novos produtos!\n\n## **Principais √Åreas da Qu√≠mica**\n\n### **Qu√≠mica Geral**\n‚Ä¢ **√Åtomos**: Estrutura e propriedades\n‚Ä¢ **Mol√©culas**: Liga√ß√µes qu√≠micas\n‚Ä¢ **Tabela peri√≥dica**: Organiza√ß√£o dos elementos\n‚Ä¢ **Rea√ß√µes**: Transforma√ß√µes qu√≠micas\n\n### **Qu√≠mica Org√¢nica**\n‚Ä¢ **Compostos de carbono**: Base da vida\n‚Ä¢ **Hidrocarbonetos**: Petr√≥leo e derivados\n‚Ä¢ **Fun√ß√µes org√¢nicas**: √Ålcool, √°cido, √©ter\n‚Ä¢ **Pol√≠meros**: Pl√°sticos e fibras\n\n### **Qu√≠mica Inorg√¢nica**\n‚Ä¢ **Elementos**: Metais e n√£o-metais\n‚Ä¢ **√Åcidos e bases**: pH e neutraliza√ß√£o\n‚Ä¢ **Sais**: Compostos i√¥nicos\n‚Ä¢ **Minerais**: Recursos naturais\n\n### **F√≠sico-Qu√≠mica**\n‚Ä¢ **Termodin√¢mica**: Energia nas rea√ß√µes\n‚Ä¢ **Cin√©tica**: Velocidade das rea√ß√µes\n‚Ä¢ **Equil√≠brio**: Estado de balan√ßo\n‚Ä¢ **Eletroqu√≠mica**: Rea√ß√µes com eletricidade\n\n## **Aplica√ß√µes no Dia a Dia**\n\n‚Ä¢ **Medicina**: Medicamentos e tratamentos\n‚Ä¢ **Alimenta√ß√£o**: Conservantes e aditivos\n‚Ä¢ **Cosm√©ticos**: Produtos de beleza\n‚Ä¢ **Limpeza**: Detergentes e sab√µes\n‚Ä¢ **Tecnologia**: Baterias e semicondutores\n‚Ä¢ **Agricultura**: Fertilizantes e pesticidas\n\n## **Import√¢ncia da Qu√≠mica**\n\n‚Ä¢ **Desenvolvimento de novos materiais**\n‚Ä¢ **Solu√ß√µes para problemas ambientais**\n‚Ä¢ **Melhoria da qualidade de vida**\n‚Ä¢ **Inova√ß√£o tecnol√≥gica**\n‚Ä¢ **Compreens√£o dos processos naturais**\n\n**üí° Dica**: A qu√≠mica est√° em tudo ao nosso redor! Desde o ar que respiramos at√© os alimentos que comemos.\n\n**Qual √°rea da qu√≠mica voc√™ gostaria de explorar?**`
          specificActions = [
            { type: 'cta' as const, label: 'Conceitos b√°sicos', module: 'professor', args: { topic: 'quimica_basica' } },
            { type: 'cta' as const, label: 'Qu√≠mica org√¢nica', module: 'professor', args: { topic: 'quimica_organica' } },
            { type: 'cta' as const, label: 'Aula completa', module: 'aula_interativa', args: { tema: 'quimica' } }
          ]
          break
          
        case 'biologia':
          specificResponse = `üß¨ **Biologia - A Ci√™ncia da Vida**\n\nA biologia √© a ci√™ncia que estuda a vida em todas suas formas e manifesta√ß√µes. √â atrav√©s dela que entendemos como os seres vivos funcionam, se relacionam e evoluem ao longo do tempo!\n\n## **Principais √Åreas da Biologia**\n\n### **Biologia Celular**\n‚Ä¢ **C√©lulas**: Unidade b√°sica da vida\n‚Ä¢ **Organelas**: Estruturas celulares\n‚Ä¢ **Metabolismo**: Processos qu√≠micos\n‚Ä¢ **Divis√£o celular**: Reprodu√ß√£o e crescimento\n\n### **Gen√©tica**\n‚Ä¢ **DNA**: C√≥digo gen√©tico\n‚Ä¢ **Genes**: Unidades heredit√°rias\n‚Ä¢ **Hereditariedade**: Transmiss√£o de caracter√≠sticas\n‚Ä¢ **Muta√ß√£o**: Varia√ß√µes gen√©ticas\n\n### **Ecologia**\n‚Ä¢ **Ecossistemas**: Rela√ß√µes ambientais\n‚Ä¢ **Biodiversidade**: Variedade de vida\n‚Ä¢ **Cadeias alimentares**: Fluxo de energia\n‚Ä¢ **Conserva√ß√£o**: Preserva√ß√£o da natureza\n\n### **Evolu√ß√£o**\n‚Ä¢ **Sele√ß√£o natural**: Adapta√ß√£o ao ambiente\n‚Ä¢ **Especia√ß√£o**: Forma√ß√£o de novas esp√©cies\n‚Ä¢ **F√≥sseis**: Evid√™ncias evolutivas\n‚Ä¢ **√Årvore da vida**: Relacionamento entre esp√©cies\n\n### **Fisiologia**\n‚Ä¢ **Sistemas**: Digestivo, circulat√≥rio, nervoso\n‚Ä¢ **√ìrg√£os**: Fun√ß√µes espec√≠ficas\n‚Ä¢ **Homeostase**: Equil√≠brio interno\n‚Ä¢ **Adapta√ß√µes**: Sobreviv√™ncia e reprodu√ß√£o\n\n## **Aplica√ß√µes Pr√°ticas**\n\n‚Ä¢ **Medicina**: Diagn√≥stico e tratamento\n‚Ä¢ **Agricultura**: Melhoramento de culturas\n‚Ä¢ **Biotecnologia**: Produ√ß√£o de medicamentos\n‚Ä¢ **Conserva√ß√£o**: Prote√ß√£o de esp√©cies\n‚Ä¢ **Pesquisa**: Descobertas cient√≠ficas\n\n## **Import√¢ncia da Biologia**\n\n‚Ä¢ **Compreens√£o da vida humana**\n‚Ä¢ **Preserva√ß√£o do meio ambiente**\n‚Ä¢ **Desenvolvimento de tecnologias**\n‚Ä¢ **Melhoria da sa√∫de**\n‚Ä¢ **Sustentabilidade planet√°ria**\n\n**üí° Dica**: A biologia conecta tudo! Desde as menores bact√©rias at√© os maiores ecossistemas, tudo est√° interligado.\n\n**Qual √°rea da biologia te interessa mais?**`
          specificActions = [
            { type: 'cta' as const, label: 'Biologia celular', module: 'professor', args: { topic: 'biologia_celular' } },
            { type: 'cta' as const, label: 'Gen√©tica', module: 'professor', args: { topic: 'genetica' } },
            { type: 'cta' as const, label: 'Aula completa', module: 'aula_interativa', args: { tema: 'biologia' } }
          ]
          break
          
        default:
          specificResponse = `üìö **${subject.charAt(0).toUpperCase() + subject.slice(1)} - Seu Guia de Estudos**\n\n√ìtimo! Vou te ajudar com suas d√∫vidas sobre ${subject}. Como seu professor virtual, estou aqui para tornar o aprendizado mais f√°cil e interessante!\n\n## **Como Posso Te Ajudar?**\n\n### **Explica√ß√µes Detalhadas**\n‚Ä¢ Conceitos fundamentais\n‚Ä¢ Exemplos pr√°ticos\n‚Ä¢ Aplica√ß√µes no dia a dia\n‚Ä¢ Conex√µes com outras mat√©rias\n\n### **Resolu√ß√£o de Exerc√≠cios**\n‚Ä¢ Passo a passo detalhado\n‚Ä¢ Dicas e macetes\n‚Ä¢ M√©todos alternativos\n‚Ä¢ Verifica√ß√£o de respostas\n\n### **Material de Apoio**\n‚Ä¢ Resumos organizados\n‚Ä¢ F√≥rmulas importantes\n‚Ä¢ Conceitos-chave\n‚Ä¢ Exerc√≠cios pr√°ticos\n\n## **Para Come√ßar, Me Conte:**\n\n1. **Qual √© sua d√∫vida espec√≠fica?**\n2. **Em que n√≠vel voc√™ est√° estudando?** (Fundamental, M√©dio, Superior)\n3. **Voc√™ tem algum exerc√≠cio ou problema em mente?**\n4. **H√° algum t√≥pico que voc√™ gostaria de revisar?**\n\n**üí° Dica**: Quanto mais espec√≠fica for sua pergunta, melhor posso te ajudar! N√£o tenha medo de perguntar - estou aqui para esclarecer todas as suas d√∫vidas.\n\n**Vamos come√ßar? Me conte sua d√∫vida!**`
          specificActions = [
            { type: 'cta' as const, label: 'Criar aula interativa', module: 'aula_interativa', args: { tema: message } },
            { type: 'cta' as const, label: 'Continuar conversa', module: 'professor', args: { action: 'continue' } }
          ]
      }
      
      return {
        text: specificResponse,
        blocks: [
          { 
            type: 'notice', 
            title: `Professor IA - ${subject.charAt(0).toUpperCase() + subject.slice(1)}`, 
            body: `Estou aqui para te ajudar com ${subject}. Escolha uma op√ß√£o abaixo ou me conte sua d√∫vida espec√≠fica!` 
          }
        ],
        actions: specificActions
      }
    }
    
    return {
      text: 'üéì **Professor IA - Seu Assistente de Estudos Pessoal**\n\nOl√°! Sou seu professor virtual e estou aqui para tornar o aprendizado mais f√°cil, interessante e eficiente. Posso te ajudar com qualquer d√∫vida acad√™mica!\n\n## **Mat√©rias que Posso Ensinar:**\n\n### **Exatas**\n‚Ä¢ **Matem√°tica**: √Ålgebra, geometria, trigonometria, c√°lculo\n‚Ä¢ **F√≠sica**: Mec√¢nica, eletricidade, √≥ptica, termodin√¢mica\n‚Ä¢ **Qu√≠mica**: Geral, org√¢nica, inorg√¢nica, f√≠sico-qu√≠mica\n\n### **Biol√≥gicas**\n‚Ä¢ **Biologia**: Celular, gen√©tica, ecologia, evolu√ß√£o\n‚Ä¢ **Ci√™ncias**: Meio ambiente, sa√∫de, anatomia\n\n### **Humanas**\n‚Ä¢ **Hist√≥ria**: Geral, do Brasil, mundial\n‚Ä¢ **Geografia**: F√≠sica, humana, pol√≠tica\n‚Ä¢ **Portugu√™s**: Gram√°tica, literatura, reda√ß√£o\n‚Ä¢ **Filosofia**: √âtica, l√≥gica, hist√≥ria da filosofia\n‚Ä¢ **Sociologia**: Sociedade, cultura, pol√≠tica\n\n## **Como Posso Te Ajudar:**\n\n‚úÖ **Explica√ß√µes detalhadas e did√°ticas**\n‚úÖ **Resolu√ß√£o de exerc√≠cios passo a passo**\n‚úÖ **Cria√ß√£o de aulas interativas**\n‚úÖ **Simulados e provas**\n‚úÖ **Dicas de estudo e memoriza√ß√£o**\n‚úÖ **Material de apoio personalizado**\n\n**üí° Dica**: Quanto mais espec√≠fica for sua pergunta, melhor posso te ajudar! N√£o tenha medo de perguntar - estou aqui para esclarecer todas as suas d√∫vidas.\n\n**Me conte: qual √© sua d√∫vida ou o que voc√™ gostaria de aprender hoje?**',
      blocks: [
        { 
          type: 'notice', 
          title: 'üéØ Professor IA Ativo', 
          body: 'Estou pronto para te ajudar com qualquer mat√©ria! Escolha uma op√ß√£o abaixo ou me conte sua d√∫vida espec√≠fica.' 
        }
      ],
      actions: [
        { type: 'cta', label: 'üìö Criar aula interativa', module: 'aula_interativa', args: {} },
        { type: 'cta', label: 'üéØ Simulado r√°pido (5 quest√µes)', module: 'enem', args: { quantidade_questoes: 5 } },
        { type: 'cta', label: 'üìñ Aula expandida completa', module: 'aula-expandida', args: {} }
      ]
    }
  }
})

// atendimento module (fallback)
registerModule({
  id: 'atendimento',
  name: 'Atendimento Geral',
  version: '1.0.0',
  permissions: { requires_auth: false },
  cost_estimate: { tokens: 400, latency_ms: 500 },
  async detect({ text }): Promise<DetectedIntent> {
    // Sempre usar OpenAI para detec√ß√£o - maior certeza
    try {
      const response = await fetch('/api/classify', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ userMessage: text }),
      });

      if (response.ok) {
        const data = await response.json();
        if (data.success && data.classification?.module === 'ATENDIMENTO') {
          return { 
            intent: 'general', 
            module: 'atendimento', 
            confidence: data.classification.confidence || 0.4, 
            slots: {} 
          };
        }
      }
    } catch (error) {
      console.error('Erro na detec√ß√£o OpenAI:', error);
    }

    // Fallback simples apenas em caso de erro
    return { intent: 'general', module: 'atendimento', confidence: 0.4, slots: {} }
  },
  async execute({ slots }): Promise<OrchestratorResponse> {
    return {
      text: 'Como posso ajudar voc√™ hoje? Posso direcionar voc√™ para o setor mais adequado.',
      blocks: [],
      actions: [
        { type: 'cta', label: 'Falar com atendimento', module: 'atendimento', args: { action: 'contact' } },
        { type: 'link', label: 'Central de ajuda', href: '/help' }
      ]
    }
  }
})


