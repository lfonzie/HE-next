import { OrchestratorResponse } from '@/types'
import { registerModule, DetectedIntent } from './orchestrator'

// Helper function to get the correct classify URL
function getClassifyUrl(): string {
  let baseUrl: string;
  
  if (typeof window !== 'undefined') {
    // Client-side: usar window.location.origin
    baseUrl = window.location.origin;
  } else {
    // Server-side: usar vari√°veis de ambiente ou localhost
    baseUrl = process.env.NEXTAUTH_URL || 
              process.env.NEXT_PUBLIC_APP_URL || 
              'http://localhost:3000';
  }
  
  return `${baseUrl}/api/classify`;
}

// aula_interativa module
registerModule({
  id: 'aula_interativa',
  name: 'Aula Interativa',
  version: '1.0.0',
  permissions: { requires_auth: false },
  cost_estimate: { tokens: 1000, latency_ms: 1500 },
  async detect({ text, context }): Promise<DetectedIntent> {
    // Sempre usar OpenAI para detec√ß√£o - maior certeza
    try {
      const response = await fetch(getClassifyUrl(), {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          userMessage: text,
          history: context?.history || [],
          currentModule: context?.module || 'auto'
        }),
      });

      if (response.ok) {
        const data = await response.json();
        if (data.success && data.classification?.module === 'AULA_EXPANDIDA') {
          return { 
            intent: 'lesson_request', 
            module: 'aula_interativa', 
            confidence: data.classification.confidence || 0.8, 
            slots: {} 
          };
        }
      }
    } catch (error) {
      console.error('Erro na detec√ß√£o OpenAI:', error);
    }

    // Fallback simples apenas em caso de erro
    return { intent: 'lesson_request', module: 'aula_interativa', confidence: 0.3, slots: {} }
  },
  async execute({ slots, context }): Promise<OrchestratorResponse> {
    const message = context?.text || ''
    const tema = slots.tema || extractThemeFromMessage(message) || 'assunto'
    const disciplina = slots.disciplina || 'geral'
    return {
      text: `üìö **Aula Interativa Ativada**\n\nPreparei uma aula interativa sobre ${tema} (${disciplina}). Podemos come√ßar pelos fundamentos e depois avan√ßar.\n\n**Estrutura da aula:**\n‚Ä¢ Slide 1: Introdu√ß√£o\n‚Ä¢ Slide 2: Conceitos fundamentais\n‚Ä¢ Slide 3: Desenvolvimento\n‚Ä¢ Slide 4: Pergunta interativa\n‚Ä¢ Slide 5: Aplica√ß√µes pr√°ticas\n‚Ä¢ Slide 6: Exemplos\n‚Ä¢ Slide 7: Pergunta interativa\n‚Ä¢ Slide 8: Resumo\n\nDigite "come√ßar aula" para iniciar!`,
      blocks: [
        { type: 'lesson_interactive', lesson_id: `lesson_${Date.now()}`, meta: { tema, disciplina, passos: 8 } }
      ],
      actions: [
        { type: 'cta', label: 'Come√ßar Aula', module: 'aula_interativa', args: { tema, disciplina } },
        { type: 'cta', label: 'Adicionar quiz de 5 quest√µes', module: 'enem', args: { quantidade_questoes: 5 } }
      ]
    }
  }
})

// aula-expandida module (alias for aula_interativa)
registerModule({
  id: 'aula-expandida',
  name: 'Aula Expandida',
  version: '1.0.0',
  permissions: { requires_auth: false },
  cost_estimate: { tokens: 1000, latency_ms: 1500 },
  async detect({ text, context }): Promise<DetectedIntent> {
    // Sempre usar OpenAI para detec√ß√£o - maior certeza
    try {
      const response = await fetch(getClassifyUrl(), {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          userMessage: text,
          history: context?.history || [],
          currentModule: context?.module || 'auto'
        }),
      });

      if (response.ok) {
        const data = await response.json();
        if (data.success && data.classification?.module === 'AULA_EXPANDIDA') {
          return { 
            intent: 'lesson_request', 
            module: 'aula-expandida', 
            confidence: data.classification.confidence || 0.9, 
            slots: {} 
          };
        }
      }
    } catch (error) {
      console.error('Erro na detec√ß√£o OpenAI:', error);
    }

    // Fallback simples apenas em caso de erro
    return { intent: 'lesson_request', module: 'aula-expandida', confidence: 0.3, slots: {} }
  },
  async execute({ slots, context }): Promise<OrchestratorResponse> {
    const message = context?.text || ''
    const tema = slots.tema || extractThemeFromMessage(message) || 'assunto'
    const disciplina = slots.disciplina || 'geral'
    
    return {
      text: `üéì **Aula Expandida Ativada**\n\nCriando uma aula completa e detalhada sobre ${tema}.\n\n**Esta aula incluir√°:**\n‚Ä¢ Explica√ß√µes detalhadas\n‚Ä¢ Exemplos pr√°ticos\n‚Ä¢ Exerc√≠cios interativos\n‚Ä¢ Resumo completo\n‚Ä¢ Material de apoio\n\nDigite "come√ßar aula expandida" para iniciar!`,
      blocks: [
        { type: 'lesson_interactive', lesson_id: `lesson_expanded_${Date.now()}`, meta: { tema, disciplina, passos: 8, mode: 'expanded' } }
      ],
      actions: [
        { type: 'cta', label: 'Come√ßar Aula Expandida', module: 'aula-expandida', args: { tema, disciplina } },
        { type: 'cta', label: 'Simulado Relacionado', module: 'enem', args: { quantidade_questoes: 5 } }
      ]
    }
  }
})

// enem module
registerModule({
  id: 'enem',
  name: 'ENEM Simulado',
  version: '1.0.0',
  permissions: { requires_auth: false },
  cost_estimate: { tokens: 800, latency_ms: 1200 },
  async detect({ text, context }): Promise<DetectedIntent> {
    // Sempre usar OpenAI para detec√ß√£o - maior certeza
    try {
      const response = await fetch(getClassifyUrl(), {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          userMessage: text,
          history: context?.history || [],
          currentModule: context?.module || 'auto'
        }),
      });

      if (response.ok) {
        const data = await response.json();
        if (data.success && (data.classification?.module === 'ENEM_INTERATIVO' || data.classification?.module === 'PROFESSOR')) {
          return { 
            intent: 'quiz_request', 
            module: 'enem', 
            confidence: data.classification.confidence || 0.85, 
            slots: {} 
          };
        }
      }
    } catch (error) {
      console.error('Erro na detec√ß√£o OpenAI:', error);
    }

    // Fallback simples apenas em caso de erro
    return { intent: 'quiz_request', module: 'enem', confidence: 0.25, slots: {} }
  },
  async execute({ slots, context }): Promise<OrchestratorResponse> {
    const message = context?.text || ''
    const area = slots.area || 'CN'
    const quantidade = Math.min(Math.max(Number(slots.quantidade_questoes || 5), 1), 50)
    
    return {
      text: `üéØ **Simulador ENEM Ativado**\n\nIniciando simulado com ${quantidade} quest√µes de ${area}.\n\n**√Åreas dispon√≠veis:**\n‚Ä¢ CN - Ci√™ncias da Natureza\n‚Ä¢ CH - Ci√™ncias Humanas\n‚Ä¢ LC - Linguagens e C√≥digos\n‚Ä¢ MT - Matem√°tica\n\nDigite "come√ßar simulado" para iniciar ou me diga qual √°rea voc√™ quer praticar!`,
      blocks: [
        { 
          type: 'quiz', 
          questions: [], 
          meta: { 
            area, 
            quantidade, 
            session_id: `enem_${Date.now()}`,
            mode: 'interactive',
            ready_to_start: false
          } 
        }
      ],
      actions: [
        { type: 'cta', label: 'Come√ßar Simulado CN', module: 'enem', args: { area: 'CN', quantidade_questoes: 5 } },
        { type: 'cta', label: 'Come√ßar Simulado CH', module: 'enem', args: { area: 'CH', quantidade_questoes: 5 } },
        { type: 'cta', label: 'Come√ßar Simulado LC', module: 'enem', args: { area: 'LC', quantidade_questoes: 5 } },
        { type: 'cta', label: 'Come√ßar Simulado MT', module: 'enem', args: { area: 'MT', quantidade_questoes: 5 } }
      ],
      trace: { module: 'enem', confidence: 0.85 }
    }
  }
})

// enem-interativo module (alias for enem with enhanced features)
registerModule({
  id: 'enem-interativo',
  name: 'ENEM Interativo',
  version: '1.0.0',
  permissions: { requires_auth: false },
  cost_estimate: { tokens: 1000, latency_ms: 1500 },
  async detect({ text, context }): Promise<DetectedIntent> {
    // Sempre usar OpenAI para detec√ß√£o - maior certeza
    try {
      const response = await fetch(getClassifyUrl(), {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          userMessage: text,
          history: context?.history || [],
          currentModule: context?.module || 'auto'
        }),
      });

      if (response.ok) {
        const data = await response.json();
        if (data.success && data.classification?.module === 'ENEM_INTERATIVO') {
          return { 
            intent: 'quiz_request', 
            module: 'enem-interativo', 
            confidence: data.classification.confidence || 0.9, 
            slots: {} 
          };
        }
      }
    } catch (error) {
      console.error('Erro na detec√ß√£o OpenAI:', error);
    }

    // Fallback simples apenas em caso de erro
    return { intent: 'quiz_request', module: 'enem-interativo', confidence: 0.3, slots: {} }
  },
  async execute({ slots, context }): Promise<OrchestratorResponse> {
    const message = context?.text || ''
    const area = slots.area || 'CN'
    const quantidade = Math.min(Math.max(Number(slots.quantidade_questoes || 5), 1), 50)
    
    return {
      text: `üéØ **ENEM Interativo Ativado**\n\nModo interativo com explica√ß√µes detalhadas e feedback em tempo real!\n\n**Recursos especiais:**\n‚Ä¢ Explica√ß√µes detalhadas de cada quest√£o\n‚Ä¢ Feedback imediato\n‚Ä¢ An√°lise de performance\n‚Ä¢ Sugest√µes de estudo\n‚Ä¢ Relat√≥rio personalizado\n\n**√Åreas dispon√≠veis:**\n‚Ä¢ CN - Ci√™ncias da Natureza\n‚Ä¢ CH - Ci√™ncias Humanas\n‚Ä¢ LC - Linguagens e C√≥digos\n‚Ä¢ MT - Matem√°tica\n\nDigite "come√ßar enem interativo" para iniciar!`,
      blocks: [
        { 
          type: 'quiz', 
          questions: [], 
          meta: { 
            area, 
            quantidade, 
            session_id: `enem_interactive_${Date.now()}`,
            mode: 'interactive',
            enhanced: true,
            ready_to_start: false
          } 
        }
      ],
      actions: [
        { type: 'cta', label: 'ENEM Interativo CN', module: 'enem-interativo', args: { area: 'CN', quantidade_questoes: 5 } },
        { type: 'cta', label: 'ENEM Interativo CH', module: 'enem-interativo', args: { area: 'CH', quantidade_questoes: 5 } },
        { type: 'cta', label: 'ENEM Interativo LC', module: 'enem-interativo', args: { area: 'LC', quantidade_questoes: 5 } },
        { type: 'cta', label: 'ENEM Interativo MT', module: 'enem-interativo', args: { area: 'MT', quantidade_questoes: 5 } }
      ],
      trace: { module: 'enem-interativo', confidence: 0.9 }
    }
  }
})

// ti_troubleshooting module
registerModule({
  id: 'ti_troubleshooting',
  name: 'TI Troubleshooting',
  version: '1.0.0',
  permissions: { requires_auth: false },
  cost_estimate: { tokens: 600, latency_ms: 800 },
  async detect({ text, context }): Promise<DetectedIntent> {
    // Sempre usar OpenAI para detec√ß√£o - maior certeza
    try {
      const response = await fetch(getClassifyUrl(), {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          userMessage: text,
          history: context?.history || [],
          currentModule: context?.module || 'auto'
        }),
      });

      if (response.ok) {
        const data = await response.json();
        if (data.success && data.classification?.module === 'TI') {
          return { 
            intent: 'ti_support', 
            module: 'ti_troubleshooting', 
            confidence: data.classification.confidence || 0.8, 
            slots: {} 
          };
        }
      }
    } catch (error) {
      console.error('Erro na detec√ß√£o OpenAI:', error);
    }

    // Fallback simples apenas em caso de erro
    return { intent: 'ti_support', module: 'ti_troubleshooting', confidence: 0.3, slots: {} }
  },
  async execute({ slots }): Promise<OrchestratorResponse> {
    return {
      text: 'Vou te ajudar com esse problema t√©cnico. Vamos resolver passo a passo.',
      blocks: [
        { 
          type: 'checklist', 
          items: [
            { text: 'Verificar conex√£o de rede', done: false },
            { text: 'Reiniciar o equipamento', done: false },
            { text: 'Verificar configura√ß√µes', done: false },
            { text: 'Contatar suporte t√©cnico se necess√°rio', done: false }
          ],
          meta: { category: 'troubleshooting' }
        }
      ],
      actions: [
        { type: 'cta', label: 'Continuar diagn√≥stico', module: 'ti_troubleshooting', args: { step: 'next' } },
        { type: 'link', label: 'Manual t√©cnico', href: '/docs/ti-troubleshooting' }
      ]
    }
  }
})

// faq_escola module
registerModule({
  id: 'faq_escola',
  name: 'FAQ Escola',
  version: '1.0.0',
  permissions: { requires_auth: false },
  cost_estimate: { tokens: 400, latency_ms: 500 },
  async detect({ text, context }): Promise<DetectedIntent> {
    // Sempre usar OpenAI para detec√ß√£o - maior certeza
    try {
      const response = await fetch(getClassifyUrl(), {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          userMessage: text,
          history: context?.history || [],
          currentModule: context?.module || 'auto'
        }),
      });

      if (response.ok) {
        const data = await response.json();
        if (data.success && data.classification?.module === 'SECRETARIA') {
          return { 
            intent: 'faq_request', 
            module: 'faq_escola', 
            confidence: data.classification.confidence || 0.75, 
            slots: {} 
          };
        }
      }
    } catch (error) {
      console.error('Erro na detec√ß√£o OpenAI:', error);
    }

    // Fallback simples apenas em caso de erro
    return { intent: 'faq_request', module: 'faq_escola', confidence: 0.25, slots: {} }
  },
  async execute({ slots }): Promise<OrchestratorResponse> {
    return {
      text: 'Aqui est√£o as informa√ß√µes que voc√™ precisa sobre procedimentos escolares.',
      blocks: [
        { 
          type: 'notice', 
          title: 'Informa√ß√µes da Secretaria', 
          body: 'Hor√°rio de funcionamento: Segunda a Sexta, 8h √†s 17h. Telefone: (11) 1234-5678',
          meta: { department: 'secretaria' }
        }
      ],
      actions: [
        { type: 'cta', label: 'Falar com secretaria', module: 'faq_escola', args: { action: 'contact' } },
        { type: 'link', label: 'Portal do aluno', href: '/portal-aluno' }
      ]
    }
  }
})

// bem-estar module
registerModule({
  id: 'bem-estar',
  name: 'Bem-Estar',
  version: '1.0.0',
  permissions: { requires_auth: false },
  cost_estimate: { tokens: 700, latency_ms: 1000 },
  async detect({ text, context }): Promise<DetectedIntent> {
    // Sempre usar OpenAI para detec√ß√£o - maior certeza
    try {
      const response = await fetch(getClassifyUrl(), {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          userMessage: text,
          history: context?.history || [],
          currentModule: context?.module || 'auto'
        }),
      });

      if (response.ok) {
        const data = await response.json();
        if (data.success && data.classification?.module === 'BEM_ESTAR') {
          return { 
            intent: 'wellbeing_support', 
            module: 'bem-estar', 
            confidence: data.classification.confidence || 0.85, 
            slots: {} 
          };
        }
      }
    } catch (error) {
      console.error('Erro na detec√ß√£o OpenAI:', error);
    }

    // Fallback simples apenas em caso de erro
    return { intent: 'wellbeing_support', module: 'bem-estar', confidence: 0.3, slots: {} }
  },
  async execute({ slots, context }): Promise<OrchestratorResponse> {
    const message = context?.text || ''
    const lowerMessage = message.toLowerCase()
    
    // Detectar estado emocional espec√≠fico
    let emotionalState = 'geral'
    let specificResponse = ''
    let specificActions = []
    
    if (lowerMessage.includes('triste') || lowerMessage.includes('tristeza') || lowerMessage.includes('deprimido') || lowerMessage.includes('depress√£o')) {
      emotionalState = 'tristeza'
      specificResponse = `üíô **Voc√™ n√£o est√° sozinho(a)**\n\nEntendo que voc√™ est√° passando por um momento dif√≠cil. √â completamente normal sentir tristeza √†s vezes, e √© importante reconhecer esses sentimentos.\n\n## **Lembre-se:**\n\n‚Ä¢ **Suas emo√ß√µes s√£o v√°lidas** - n√£o h√° problema em se sentir triste\n‚Ä¢ **Este momento vai passar** - sentimentos s√£o tempor√°rios\n‚Ä¢ **Voc√™ √© mais forte do que imagina** - j√° superou desafios antes\n‚Ä¢ **√â corajoso pedir ajuda** - reconhecer que precisa de apoio √© um ato de for√ßa\n\n## **O que pode ajudar agora:**\n\nüå± **Respire fundo** - Inspire por 4 segundos, segure por 4, expire por 6\nüå± **Fa√ßa algo gentil por voc√™** - tome um banho quente, ou√ßa m√∫sica que gosta\nüå± **Conecte-se com algu√©m** - um amigo, familiar ou profissional\nüå± **Movimente-se** - mesmo uma caminhada curta pode ajudar\nüå± **Expresse-se** - escreva, desenhe, ou simplesmente chore se precisar\n\n## **Recursos de Apoio:**\n\n‚Ä¢ **CVV (Centro de Valoriza√ß√£o da Vida)**: 188 (24h, gratuito)\n‚Ä¢ **Psic√≥logos escolares**: Dispon√≠veis na escola\n‚Ä¢ **Profissionais de sa√∫de mental**: Sempre dispon√≠veis\n\n**üí° Dica**: Pequenos passos s√£o grandes conquistas. N√£o precisa resolver tudo de uma vez.`
      
      specificActions = [
        { type: 'cta', label: 'Falar com psic√≥logo da escola', module: 'bem-estar', args: { action: 'school_psychologist' } },
        { type: 'cta', label: 'T√©cnicas de respira√ß√£o', module: 'bem-estar', args: { action: 'breathing_exercises' } },
        { type: 'cta', label: 'Atividades de autocuidado', module: 'bem-estar', args: { action: 'self_care' } }
      ]
    } else if (lowerMessage.includes('ansiedade') || lowerMessage.includes('nervoso') || lowerMessage.includes('preocupado') || lowerMessage.includes('medo')) {
      emotionalState = 'ansiedade'
      specificResponse = `üßò **Respire e se acalme**\n\nEntendo que voc√™ est√° se sentindo ansioso(a) ou preocupado(a). A ansiedade √© uma resposta natural do nosso corpo, mas podemos aprender a gerenci√°-la.\n\n## **T√©cnicas R√°pidas para Agora:**\n\n### **Respira√ß√£o 4-7-8**\n‚Ä¢ Inspire pelo nariz por 4 segundos\n‚Ä¢ Segure a respira√ß√£o por 7 segundos\n‚Ä¢ Expire pela boca por 8 segundos\n‚Ä¢ Repita 3-4 vezes\n\n### **Grounding (T√©cnica 5-4-3-2-1)**\n‚Ä¢ **5 coisas** que voc√™ pode ver\n‚Ä¢ **4 coisas** que voc√™ pode tocar\n‚Ä¢ **3 coisas** que voc√™ pode ouvir\n‚Ä¢ **2 coisas** que voc√™ pode cheirar\n‚Ä¢ **1 coisa** que voc√™ pode saborear\n\n## **Lembre-se:**\n\n‚úÖ **A ansiedade √© tempor√°ria** - vai diminuir\n‚úÖ **Voc√™ est√° seguro(a)** - este momento vai passar\n‚úÖ **Respire fundo** - seu corpo sabe como se acalmar\n‚úÖ **Voc√™ n√£o est√° sozinho(a)** - muitas pessoas sentem isso\n\n## **Quando Buscar Ajuda:**\n\n‚Ä¢ Se a ansiedade est√° interferindo na sua vida di√°ria\n‚Ä¢ Se voc√™ est√° evitando atividades que gostava\n‚Ä¢ Se os sintomas f√≠sicos s√£o intensos\n‚Ä¢ Se voc√™ tem pensamentos preocupantes\n\n**üí° Dica**: A ansiedade √© como uma onda - ela cresce, atinge o pico e depois diminui. Voc√™ pode surfar essa onda!`
      
      specificActions = [
        { type: 'cta', label: 'Exerc√≠cio de respira√ß√£o guiado', module: 'bem-estar', args: { action: 'guided_breathing' } },
        { type: 'cta', label: 'T√©cnica de grounding', module: 'bem-estar', args: { action: 'grounding' } },
        { type: 'cta', label: 'Falar com psic√≥logo', module: 'bem-estar', args: { action: 'psychologist' } }
      ]
    } else if (lowerMessage.includes('raiva') || lowerMessage.includes('irritado') || lowerMessage.includes('frustrado')) {
      emotionalState = 'raiva'
      specificResponse = `üî• **Vamos acalmar essa energia**\n\nEntendo que voc√™ est√° se sentindo irritado(a) ou com raiva. Esses sentimentos s√£o normais e v√°lidos - o importante √© como lidamos com eles.\n\n## **T√©cnicas para Agora:**\n\n### **Pausa e Respire**\n‚Ä¢ Pare por 10 segundos antes de reagir\n‚Ä¢ Respire fundo 3 vezes\n‚Ä¢ Conte at√© 10 lentamente\n\n### **Libere a Energia**\n‚Ä¢ Bata em uma almofada\n‚Ä¢ Fa√ßa exerc√≠cios f√≠sicos\n‚Ä¢ Dance ou movimente-se\n‚Ä¢ Escreva sobre seus sentimentos\n\n### **Reflita**\n‚Ä¢ O que realmente est√° te incomodando?\n‚Ä¢ √â algo que voc√™ pode controlar?\n‚Ä¢ Como voc√™ gostaria de resolver isso?\n\n## **Lembre-se:**\n\n‚úÖ **A raiva √© uma emo√ß√£o v√°lida** - n√£o h√° problema em senti-la\n‚úÖ **Voc√™ pode escolher como reagir** - voc√™ tem controle\n‚úÖ **Comunica√ß√£o √© chave** - falar sobre seus sentimentos ajuda\n‚úÖ **Buscar solu√ß√µes** √© melhor que ficar preso no problema\n\n## **Quando Buscar Ajuda:**\n\n‚Ä¢ Se a raiva est√° afetando seus relacionamentos\n‚Ä¢ Se voc√™ est√° tendo explos√µes frequentes\n‚Ä¢ Se est√° se machucando ou machucando outros\n‚Ä¢ Se a raiva est√° durando muito tempo\n\n**üí° Dica**: A raiva muitas vezes esconde outros sentimentos como tristeza, medo ou frustra√ß√£o. Que tal explorar o que realmente est√° acontecendo?`
      
      specificActions = [
        { type: 'cta', label: 'T√©cnicas de relaxamento', module: 'bem-estar', args: { action: 'relaxation' } },
        { type: 'cta', label: 'Exerc√≠cios f√≠sicos', module: 'bem-estar', args: { action: 'physical_exercise' } },
        { type: 'cta', label: 'Conversar sobre sentimentos', module: 'bem-estar', args: { action: 'talk_about_feelings' } }
      ]
    } else {
      // Resposta geral para outros casos
      specificResponse = `ü§ó **Estou aqui para te apoiar**\n\nVejo que voc√™ est√° passando por um momento dif√≠cil. √â corajoso da sua parte compartilhar isso comigo.\n\n## **Voc√™ n√£o est√° sozinho(a)**\n\n‚Ä¢ **Suas emo√ß√µes s√£o importantes** - todos os sentimentos s√£o v√°lidos\n‚Ä¢ **√â normal ter altos e baixos** - faz parte da vida\n‚Ä¢ **Buscar ajuda √© um sinal de for√ßa** - n√£o de fraqueza\n‚Ä¢ **Voc√™ √© capaz de superar isso** - j√° enfrentou desafios antes\n\n## **Recursos Dispon√≠veis:**\n\n### **Suporte Imediato**\n‚Ä¢ **CVV**: 188 (24h, gratuito)\n‚Ä¢ **Psic√≥logos da escola**: Sempre dispon√≠veis\n‚Ä¢ **Profissionais de sa√∫de mental**: Para apoio especializado\n\n### **Autocuidado**\n‚Ä¢ **Respire fundo** - t√©cnicas de respira√ß√£o\n‚Ä¢ **Movimente-se** - exerc√≠cios leves\n‚Ä¢ **Conecte-se** - com pessoas que voc√™ confia\n‚Ä¢ **Expresse-se** - escreva, desenhe, converse\n\n## **Lembre-se:**\n\n‚úÖ **Este momento vai passar** - sentimentos s√£o tempor√°rios\n‚úÖ **Voc√™ tem recursos internos** - for√ßa e resili√™ncia\n‚úÖ **H√° pessoas que se importam** - voc√™ n√£o est√° sozinho(a)\n‚úÖ **√â okay n√£o estar okay** - todos temos dias dif√≠ceis\n\n**üí° Dica**: Pequenos passos di√°rios podem fazer uma grande diferen√ßa. Que tal come√ßar com algo simples que te fa√ßa bem?`
      
      specificActions = [
        { type: 'cta', label: 'Falar com psic√≥logo da escola', module: 'bem-estar', args: { action: 'school_psychologist' } },
        { type: 'cta', label: 'T√©cnicas de autocuidado', module: 'bem-estar', args: { action: 'self_care_techniques' } },
        { type: 'cta', label: 'Exerc√≠cios de relaxamento', module: 'bem-estar', args: { action: 'relaxation_exercises' } }
      ]
    }
    
    return {
      text: specificResponse,
      blocks: [
        { 
          type: 'notice', 
          title: 'üíô Suporte Emocional Dispon√≠vel', 
          body: `Nossa equipe de psicologia est√° sempre dispon√≠vel para conversar. Voc√™ n√£o est√° sozinho(a) neste momento.`,
          meta: { 
            support_type: 'emotional',
            emotional_state: emotionalState,
            timestamp: new Date().toISOString()
          }
        }
      ],
      actions: specificActions
    }
  }
})

// financeiro module
registerModule({
  id: 'financeiro',
  name: 'Financeiro',
  version: '1.0.0',
  permissions: { requires_auth: false },
  cost_estimate: { tokens: 500, latency_ms: 600 },
  async detect({ text, context }): Promise<DetectedIntent> {
    // Sempre usar OpenAI para detec√ß√£o - maior certeza
    try {
      const response = await fetch(getClassifyUrl(), {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          userMessage: text,
          history: context?.history || [],
          currentModule: context?.module || 'auto'
        }),
      });

      if (response.ok) {
        const data = await response.json();
        if (data.success && data.classification?.module === 'FINANCEIRO') {
          return { 
            intent: 'financial_support', 
            module: 'financeiro', 
            confidence: data.classification.confidence || 0.8, 
            slots: {} 
          };
        }
      }
    } catch (error) {
      console.error('Erro na detec√ß√£o OpenAI:', error);
    }

    // Fallback simples apenas em caso de erro
    return { intent: 'financial_support', module: 'financeiro', confidence: 0.25, slots: {} }
  },
  async execute({ slots }): Promise<OrchestratorResponse> {
    return {
      text: 'Vou te ajudar com quest√µes financeiras. Aqui est√£o as informa√ß√µes sobre pagamentos.',
      blocks: [
        { 
          type: 'notice', 
          title: 'Informa√ß√µes Financeiras', 
          body: 'Para quest√µes de pagamento, entre em contato com nossa equipe financeira.',
          meta: { department: 'financeiro' }
        }
      ],
      actions: [
        { type: 'cta', label: 'Falar com financeiro', module: 'financeiro', args: { action: 'contact' } },
        { type: 'link', label: 'Portal de pagamentos', href: '/payments' }
      ]
    }
  }
})

// rh module
registerModule({
  id: 'rh',
  name: 'Recursos Humanos',
  version: '1.0.0',
  permissions: { requires_auth: false },
  cost_estimate: { tokens: 600, latency_ms: 700 },
  async detect({ text, context }): Promise<DetectedIntent> {
    // Sempre usar OpenAI para detec√ß√£o - maior certeza
    try {
      const response = await fetch(getClassifyUrl(), {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          userMessage: text,
          history: context?.history || [],
          currentModule: context?.module || 'auto'
        }),
      });

      if (response.ok) {
        const data = await response.json();
        if (data.success && data.classification?.module === 'RH') {
          return { 
            intent: 'hr_support', 
            module: 'rh', 
            confidence: data.classification.confidence || 0.75, 
            slots: {} 
          };
        }
      }
    } catch (error) {
      console.error('Erro na detec√ß√£o OpenAI:', error);
    }

    // Fallback simples apenas em caso de erro
    return { intent: 'hr_support', module: 'rh', confidence: 0.25, slots: {} }
  },
  async execute({ slots }): Promise<OrchestratorResponse> {
    return {
      text: 'Vou te ajudar com quest√µes de recursos humanos e quest√µes trabalhistas.',
      blocks: [
        { 
          type: 'notice', 
          title: 'Recursos Humanos', 
          body: 'Nossa equipe de RH est√° dispon√≠vel para esclarecer d√∫vidas sobre benef√≠cios, f√©rias e quest√µes trabalhistas.',
          meta: { department: 'rh' }
        }
      ],
      actions: [
        { type: 'cta', label: 'Falar com RH', module: 'rh', args: { action: 'contact' } },
        { type: 'link', label: 'Portal do funcion√°rio', href: '/employee-portal' }
      ]
    }
  }
})

// coordenacao module
registerModule({
  id: 'coordenacao',
  name: 'Coordena√ß√£o Pedag√≥gica',
  version: '1.0.0',
  permissions: { requires_auth: false },
  cost_estimate: { tokens: 600, latency_ms: 800 },
  async detect({ text, context }): Promise<DetectedIntent> {
    // Sempre usar OpenAI para detec√ß√£o - maior certeza
    try {
      const response = await fetch(getClassifyUrl(), {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          userMessage: text,
          history: context?.history || [],
          currentModule: context?.module || 'auto'
        }),
      });

      if (response.ok) {
        const data = await response.json();
        if (data.success && data.classification?.module === 'COORDENACAO') {
          return { 
            intent: 'coordination_support', 
            module: 'coordenacao', 
            confidence: data.classification.confidence || 0.75, 
            slots: {} 
          };
        }
      }
    } catch (error) {
      console.error('Erro na detec√ß√£o OpenAI:', error);
    }

    // Fallback simples apenas em caso de erro
    return { intent: 'coordination_support', module: 'coordenacao', confidence: 0.25, slots: {} }
  },
  async execute({ slots }): Promise<OrchestratorResponse> {
    return {
      text: 'Vou te ajudar com quest√µes pedag√≥gicas e de coordena√ß√£o acad√™mica.',
      blocks: [
        { 
          type: 'notice', 
          title: 'Coordena√ß√£o Pedag√≥gica', 
          body: 'Nossa equipe pedag√≥gica est√° dispon√≠vel para esclarecer d√∫vidas sobre curr√≠culo, avalia√ß√µes e metodologias.',
          meta: { department: 'coordenacao' }
        }
      ],
      actions: [
        { type: 'cta', label: 'Falar com coordena√ß√£o', module: 'coordenacao', args: { action: 'contact' } },
        { type: 'link', label: 'Calend√°rio acad√™mico', href: '/academic-calendar' }
      ]
    }
  }
})

// social_media module
registerModule({
  id: 'social_media',
  name: 'Social Media',
  version: '1.0.0',
  permissions: { requires_auth: false },
  cost_estimate: { tokens: 500, latency_ms: 600 },
  async detect({ text, context }): Promise<DetectedIntent> {
    // Sempre usar OpenAI para detec√ß√£o - maior certeza
    try {
      const response = await fetch(getClassifyUrl(), {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          userMessage: text,
          history: context?.history || [],
          currentModule: context?.module || 'auto'
        }),
      });

      if (response.ok) {
        const data = await response.json();
        if (data.success && data.classification?.module === 'SOCIAL_MEDIA') {
          return { 
            intent: 'social_media_support', 
            module: 'social_media', 
            confidence: data.classification.confidence || 0.7, 
            slots: {} 
          };
        }
      }
    } catch (error) {
      console.error('Erro na detec√ß√£o OpenAI:', error);
    }

    // Fallback simples apenas em caso de erro
    return { intent: 'social_media_support', module: 'social_media', confidence: 0.25, slots: {} }
  },
  async execute({ slots }): Promise<OrchestratorResponse> {
    return {
      text: 'Vou te ajudar com estrat√©gias de marketing digital e comunica√ß√£o nas redes sociais.',
      blocks: [
        { 
          type: 'notice', 
          title: 'Marketing Digital', 
          body: 'Nossa equipe de comunica√ß√£o est√° dispon√≠vel para ajudar com posts, eventos e divulga√ß√£o.',
          meta: { department: 'social_media' }
        }
      ],
      actions: [
        { type: 'cta', label: 'Falar com marketing', module: 'social_media', args: { action: 'contact' } },
        { type: 'link', label: 'Nossas redes sociais', href: '/social-media' }
      ]
    }
  }
})

// conteudo_midia module
registerModule({
  id: 'conteudo_midia',
  name: 'Conte√∫do & M√≠dia',
  version: '1.0.0',
  permissions: { requires_auth: false },
  cost_estimate: { tokens: 800, latency_ms: 1000 },
  async detect({ text, context }): Promise<DetectedIntent> {
    // Sempre usar OpenAI para detec√ß√£o - maior certeza
    try {
      const response = await fetch(getClassifyUrl(), {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          userMessage: text,
          history: context?.history || [],
          currentModule: context?.module || 'auto'
        }),
      });

      if (response.ok) {
        const data = await response.json();
        if (data.success && data.classification?.module === 'CONTEUDO_MIDIA') {
          return { 
            intent: 'media_request', 
            module: 'conteudo_midia', 
            confidence: data.classification.confidence || 0.7, 
            slots: {} 
          };
        }
      }
    } catch (error) {
      console.error('Erro na detec√ß√£o OpenAI:', error);
    }

    // Fallback simples apenas em caso de erro
    return { intent: 'media_request', module: 'conteudo_midia', confidence: 0.25, slots: {} }
  },
  async execute({ slots }): Promise<OrchestratorResponse> {
    return {
      text: 'Vou buscar conte√∫do visual relevante para voc√™.',
      blocks: [
        { 
          type: 'media', 
          items: [
            { url: '/images/placeholder1.jpg', title: 'Imagem relacionada', caption: 'Conte√∫do visual encontrado' },
            { url: '/images/placeholder2.jpg', title: 'Diagrama explicativo', caption: 'Esquema visual' }
          ],
          meta: { source: 'curated' }
        }
      ],
      actions: [
        { type: 'cta', label: 'Buscar mais imagens', module: 'conteudo_midia', args: { action: 'search_more' } },
        { type: 'link', label: 'Galeria completa', href: '/media-gallery' }
      ]
    }
  }
})

// Fun√ß√£o para identificar o nome da mat√©ria
function getSubjectName(message: string): string {
  const lowerMessage = message.toLowerCase()
  
  // Matem√°tica e suas √°reas
  if (lowerMessage.includes('eq') || lowerMessage.includes('equa√ß√£o') || lowerMessage.includes('equacao') || 
      lowerMessage.includes('grau') || lowerMessage.includes('bhaskara') || lowerMessage.includes('delta') ||
      lowerMessage.includes('raiz') || lowerMessage.includes('fun√ß√£o') || lowerMessage.includes('funcao') ||
      lowerMessage.includes('polin√¥mio') || lowerMessage.includes('polinomio')) return 'matem√°tica'
  if (lowerMessage.includes('geometria') || lowerMessage.includes('tri√¢ngulo') || lowerMessage.includes('triangulo') ||
      lowerMessage.includes('c√≠rculo') || lowerMessage.includes('circulo') || lowerMessage.includes('√°rea') ||
      lowerMessage.includes('area') || lowerMessage.includes('per√≠metro') || lowerMessage.includes('perimetro') ||
      lowerMessage.includes('volume')) return 'geometria'
  if (lowerMessage.includes('trigonometria') || lowerMessage.includes('trigonomteria') || lowerMessage.includes('trigonom') ||
      lowerMessage.includes('seno') || lowerMessage.includes('coseno') || lowerMessage.includes('tangente')) return 'trigonometria'
  if (lowerMessage.includes('√°lgebra') || lowerMessage.includes('algebra')) return '√°lgebra'
  if (lowerMessage.includes('c√°lculo') || lowerMessage.includes('calculo') || lowerMessage.includes('derivada') ||
      lowerMessage.includes('integral') || lowerMessage.includes('limite')) return 'c√°lculo'
  if (lowerMessage.includes('logaritmo') || lowerMessage.includes('exponencial')) return 'matem√°tica'
  if (lowerMessage.includes('probabilidade') || lowerMessage.includes('estat√≠stica') || lowerMessage.includes('estatistica')) return 'matem√°tica'
  if (lowerMessage.includes('matem√°tica') || lowerMessage.includes('matematica')) return 'matem√°tica'
  
  // Outras mat√©rias
  if (lowerMessage.includes('f√≠sica') || lowerMessage.includes('fisica')) return 'f√≠sica'
  if (lowerMessage.includes('qu√≠mica') || lowerMessage.includes('quimica')) return 'qu√≠mica'
  if (lowerMessage.includes('fotoss√≠ntese') || lowerMessage.includes('fotossintese')) return 'fotoss√≠ntese'
  if (lowerMessage.includes('mitose')) return 'mitose'
  if (lowerMessage.includes('meiose')) return 'meiose'
  if (lowerMessage.includes('gen√©tica') || lowerMessage.includes('genetica')) return 'gen√©tica'
  if (lowerMessage.includes('evolu√ß√£o') || lowerMessage.includes('evolucao')) return 'evolu√ß√£o'
  if (lowerMessage.includes('ecossistema')) return 'ecossistema'
  if (lowerMessage.includes('biologia')) return 'biologia'
  if (lowerMessage.includes('hist√≥ria') || lowerMessage.includes('historia')) return 'hist√≥ria'
  if (lowerMessage.includes('portugu√™s') || lowerMessage.includes('portugues')) return 'portugu√™s'
  if (lowerMessage.includes('literatura')) return 'literatura'
  if (lowerMessage.includes('gram√°tica') || lowerMessage.includes('gramatica')) return 'gram√°tica'
  
  return 'essa mat√©ria'
}

function extractThemeFromMessage(message: string): string {
  if (!message || message.trim().length === 0) return '';
  
  const lowerMessage = message.toLowerCase().trim();
  
  // Remover palavras comuns que n√£o s√£o temas
  const commonWords = [
    'aula', 'sobre', 'explicar', 'explica', 'como', 'funciona', 'o que √©', 'defini√ß√£o', 'conceito',
    'quero', 'preciso', 'gostaria', 'me ajude', 'ajuda', 'ajude', 'd√∫vida', 'duvida', 'quest√£o', 'questao',
    'exerc√≠cio', 'exercicio', 'problema', 'resolver', 'entender', 'aprender', 'estudar',
    'uma', 'um', 'de', 'da', 'do', 'das', 'dos', 'com', 'para', 'por', 'em', 'na', 'no', 'nas', 'nos',
    'detalhadamente', 'detalhada', 'detalhado'
  ];
  
  // Extrair palavras-chave principais (mantendo acentos)
  const words = lowerMessage
    .replace(/[?!.,;:]/g, '') // Remove apenas pontua√ß√£o, mant√©m acentos
    .split(' ')
    .filter(word => word.length > 2 && !commonWords.includes(word));
  
  // Se h√° palavras espec√≠ficas, usar as primeiras 2-3 como tema
  if (words.length > 0) {
    return words.slice(0, 3).join(' ');
  }
  
  // Se n√£o h√° palavras espec√≠ficas, usar parte da mensagem original
  return message.trim().substring(0, 50);
}

// professor module
registerModule({
  id: 'professor',
  name: 'Professor IA',
  version: '1.0.0',
  permissions: { requires_auth: false },
  cost_estimate: { tokens: 800, latency_ms: 1000 },
  async detect({ text, context }): Promise<DetectedIntent> {
    // Sempre usar OpenAI para detec√ß√£o - maior certeza
    try {
      const response = await fetch(getClassifyUrl(), {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          userMessage: text,
          history: context?.history || [],
          currentModule: context?.module || 'auto'
        }),
      });

      if (response.ok) {
        const data = await response.json();
        if (data.success && data.classification?.module === 'PROFESSOR') {
          return { 
            intent: 'educational_support', 
            module: 'professor', 
            confidence: data.classification.confidence || 0.9, 
            slots: {} 
          };
        }
      }
    } catch (error) {
      console.error('Erro na detec√ß√£o OpenAI:', error);
    }

    // Fallback simples apenas em caso de erro
    return { intent: 'educational_support', module: 'professor', confidence: 0.3, slots: {} }
  },
  async execute({ slots, context }): Promise<OrchestratorResponse> {
    const message = context?.text || ''
    
    // Debug: Log para ver o que est√° acontecendo
    const testPattern = /(geometria|matem√°tica|matematica|√°lgebra|algebra|c√°lculo|calculo|trigonometria|f√≠sica|fisica|qu√≠mica|quimica|biologia|hist√≥ria|historia|portugu√™s|portugues|d√∫vida|duvida|quest√£o|questao|exerc√≠cio|exercicio)/i;
    const testResult = testPattern.test(message);
    
    console.log('üîç [PROFESSOR DEBUG]', {
      message: message.substring(0, 50) + '...',
      messageLength: message.length,
      hasGeometria: message.includes('geometria'),
      hasMatematica: message.includes('matematica'),
      testResult,
      pattern: testPattern.toString(),
      subject: getSubjectName(message)
    })
    
    // Se for uma pergunta espec√≠fica sobre geometria ou outras mat√©rias, responder diretamente
    if (/(geometria|matem√°tica|matematica|√°lgebra|algebra|c√°lculo|calculo|trigonometria|trigonomteria|trigonom|f√≠sica|fisica|qu√≠mica|quimica|biologia|fotoss√≠ntese|fotossintese|mitose|meiose|gen√©tica|genetica|evolu√ß√£o|evolucao|ecossistema|hist√≥ria|historia|portugu√™s|portugues|literatura|gram√°tica|gramatica|d√∫vida|duvida|quest√£o|questao|exerc√≠cio|exercicio|eq|equa√ß√£o|equacao|grau|segundo grau|primeiro grau|bhaskara|delta|raiz|fun√ß√£o|funcao|polin√¥mio|polinomio|geometria|tri√¢ngulo|triangulo|c√≠rculo|circulo|√°rea|area|per√≠metro|perimetro|volume|seno|coseno|tangente|logaritmo|exponencial|derivada|integral|limite|probabilidade|estat√≠stica|estatistica)/i.test(message)) {
      const subject = getSubjectName(message)
      
      console.log('üéØ [PROFESSOR] Subject detected:', subject, 'for message:', message.substring(0, 50))
      
      // Respostas espec√≠ficas para cada mat√©ria
      let specificResponse = ''
      let specificActions = []
      
      switch (subject) {
        case 'trigonometria':
          specificResponse = `üìê **Trigonometria - Guia Completo**\n\nA trigonometria √© uma das √°reas mais importantes da matem√°tica, estudando as rela√ß√µes entre √¢ngulos e lados de tri√¢ngulos. √â essencial para entender fen√¥menos peri√≥dicos e resolver problemas geom√©tricos.\n\n## **Conceitos Fundamentais**\n\n**As tr√™s fun√ß√µes principais:**\n‚Ä¢ **Seno (sin)**: Rela√ß√£o entre o cateto oposto e a hipotenusa\n‚Ä¢ **Cosseno (cos)**: Rela√ß√£o entre o cateto adjacente e a hipotenusa\n‚Ä¢ **Tangente (tan)**: Rela√ß√£o entre o cateto oposto e o adjacente\n\n## **Aplica√ß√µes Pr√°ticas**\n\n‚Ä¢ **Engenharia**: C√°lculo de estruturas, pontes, edif√≠cios\n‚Ä¢ **F√≠sica**: Ondas, oscila√ß√µes, movimento harm√¥nico\n‚Ä¢ **Astronomia**: C√°lculo de dist√¢ncias entre corpos celestes\n‚Ä¢ **Navega√ß√£o**: GPS, sistemas de localiza√ß√£o\n‚Ä¢ **Arquitetura**: Projetos de constru√ß√£o\n\n## **Conceitos Avan√ßados**\n\n‚Ä¢ **C√≠rculo trigonom√©trico**: Visualiza√ß√£o das fun√ß√µes\n‚Ä¢ **Identidades trigonom√©tricas**: Rela√ß√µes matem√°ticas importantes\n‚Ä¢ **Lei dos senos e cossenos**: Resolu√ß√£o de tri√¢ngulos\n‚Ä¢ **Fun√ß√µes inversas**: Arco-seno, arco-cosseno, arco-tangente\n\n**üí° Dica**: A trigonometria √© muito visual! Sempre desenhe tri√¢ngulos e use o c√≠rculo trigonom√©trico para entender melhor os conceitos.\n\n**O que voc√™ gostaria de explorar primeiro?**`
          specificActions = [
            { type: 'cta' as const, label: 'Conceitos b√°sicos', module: 'professor', args: { topic: 'trigonometria_basica' } },
            { type: 'cta' as const, label: 'C√≠rculo trigonom√©trico', module: 'professor', args: { topic: 'circulo_trigonometrico' } },
            { type: 'cta' as const, label: 'Aula interativa completa', module: 'aula_interativa', args: { tema: 'trigonometria' } }
          ]
          break
          
        case 'geometria':
          specificResponse = `üìè **Geometria - A Arte das Formas**\n\nA geometria √© uma das √°reas mais antigas e fascinantes da matem√°tica, estudando as formas, tamanhos e propriedades do espa√ßo. √â a base para entender o mundo ao nosso redor!\n\n## **Principais √Åreas da Geometria**\n\n### **Geometria Plana**\n‚Ä¢ **Tri√¢ngulos**: Propriedades, classifica√ß√£o, teoremas importantes\n‚Ä¢ **Quadril√°teros**: Ret√¢ngulos, quadrados, paralelogramos\n‚Ä¢ **C√≠rculos**: Circunfer√™ncia, √°rea, propriedades especiais\n‚Ä¢ **Pol√≠gonos**: Regulares e irregulares\n\n### **Geometria Espacial**\n‚Ä¢ **S√≥lidos**: Cubos, esferas, cilindros, cones\n‚Ä¢ **Volumes**: C√°lculo de capacidade\n‚Ä¢ **√Åreas**: Superf√≠cie de s√≥lidos\n‚Ä¢ **Proje√ß√µes**: Visualiza√ß√£o 3D\n\n### **Geometria Anal√≠tica**\n‚Ä¢ **Coordenadas**: Sistema cartesiano\n‚Ä¢ **Equa√ß√µes**: Retas, c√≠rculos, par√°bolas\n‚Ä¢ **Dist√¢ncias**: Entre pontos e figuras\n‚Ä¢ **Transforma√ß√µes**: Transla√ß√£o, rota√ß√£o, reflex√£o\n\n## **Aplica√ß√µes no Dia a Dia**\n\n‚Ä¢ **Arquitetura**: Projetos de casas e edif√≠cios\n‚Ä¢ **Design**: Logotipos, layouts, interfaces\n‚Ä¢ **Engenharia**: Constru√ß√£o de pontes e estradas\n‚Ä¢ **Arte**: Perspectiva, composi√ß√£o visual\n‚Ä¢ **Tecnologia**: Gr√°ficos computacionais, GPS\n\n**üí° Dica**: A geometria √© muito visual! Use desenhos, modelos e exemplos pr√°ticos para entender melhor os conceitos.\n\n**Por onde voc√™ gostaria de come√ßar?**`
          specificActions = [
            { type: 'cta' as const, label: 'Geometria plana', module: 'professor', args: { topic: 'geometria_plana' } },
            { type: 'cta' as const, label: 'Tri√¢ngulos', module: 'professor', args: { topic: 'triangulos' } },
            { type: 'cta' as const, label: 'Aula completa', module: 'aula_interativa', args: { tema: 'geometria' } }
          ]
          break
          
        case 'matem√°tica':
          // Check if it's specifically about equations of second degree
          if (lowerMessage.includes('eq') && lowerMessage.includes('grau')) {
            specificResponse = `üìê **Equa√ß√µes do Segundo Grau - Guia Completo**\n\nAs equa√ß√µes do segundo grau s√£o fundamentais na matem√°tica! Elas aparecem em muitos problemas pr√°ticos e s√£o a base para entender fun√ß√µes quadr√°ticas.\n\n## **Forma Geral da Equa√ß√£o**\n\n**ax¬≤ + bx + c = 0**\n\nOnde:\n‚Ä¢ **a ‚â† 0** (coeficiente do termo quadr√°tico)\n‚Ä¢ **b** (coeficiente do termo linear)\n‚Ä¢ **c** (termo independente)\n\n## **Como Resolver**\n\n### **1. F√≥rmula de Bhaskara**\n\n**x = (-b ¬± ‚àöŒî) / 2a**\n\nOnde **Œî = b¬≤ - 4ac** (discriminante)\n\n### **2. An√°lise do Discriminante**\n\n‚Ä¢ **Œî > 0**: Duas ra√≠zes reais diferentes\n‚Ä¢ **Œî = 0**: Uma raiz real (dupla)\n‚Ä¢ **Œî < 0**: Duas ra√≠zes complexas\n\n## **Exemplo Pr√°tico**\n\n**Resolva: x¬≤ - 5x + 6 = 0**\n\n1. **Identifique os coeficientes**:\n   ‚Ä¢ a = 1, b = -5, c = 6\n\n2. **Calcule o discriminante**:\n   ‚Ä¢ Œî = (-5)¬≤ - 4(1)(6) = 25 - 24 = 1\n\n3. **Aplique a f√≥rmula**:\n   ‚Ä¢ x = (5 ¬± ‚àö1) / 2\n   ‚Ä¢ x‚ÇÅ = (5 + 1) / 2 = 3\n   ‚Ä¢ x‚ÇÇ = (5 - 1) / 2 = 2\n\n## **Aplica√ß√µes Pr√°ticas**\n\n‚Ä¢ **F√≠sica**: Movimento de proj√©teis\n‚Ä¢ **Engenharia**: C√°lculo de estruturas\n‚Ä¢ **Economia**: An√°lise de lucros\n‚Ä¢ **Geometria**: Problemas de √°rea\n‚Ä¢ **Gr√°ficos**: Par√°bolas\n\n## **Dicas Importantes**\n\n‚úÖ **Sempre verifique se a = 0** (n√£o √© equa√ß√£o do 2¬∫ grau)\n‚úÖ **Calcule o discriminante primeiro**\n‚úÖ **Use a f√≥rmula de Bhaskara quando necess√°rio**\n‚úÖ **Verifique suas respostas substituindo na equa√ß√£o original**\n\n**üí° Dica**: Pratique com muitos exemplos! A resolu√ß√£o de equa√ß√µes do segundo grau fica mais f√°cil com a pr√°tica.\n\n**Quer que eu resolva uma equa√ß√£o espec√≠fica ou tem alguma d√∫vida sobre o processo?**`
            specificActions = [
              { type: 'cta' as const, label: 'Resolver equa√ß√£o espec√≠fica', module: 'professor', args: { topic: 'resolver_equacao' } },
              { type: 'cta' as const, label: 'Mais exemplos', module: 'professor', args: { topic: 'exemplos_equacoes' } },
              { type: 'cta' as const, label: 'Aula completa sobre equa√ß√µes', module: 'aula_interativa', args: { tema: 'equacoes_segundo_grau' } }
            ]
          } else {
            specificResponse = `üî¢ **Matem√°tica - A Linguagem Universal**\n\nA matem√°tica √© muito mais que n√∫meros! √â a linguagem que descreve o universo, desde as menores part√≠culas at√© as maiores gal√°xias. √â uma ferramenta poderosa para resolver problemas e entender o mundo ao nosso redor.\n\n## **Principais √Åreas da Matem√°tica**\n\n### **√Ålgebra**\n‚Ä¢ **Equa√ß√µes**: Resolu√ß√£o de problemas matem√°ticos\n‚Ä¢ **Fun√ß√µes**: Rela√ß√µes entre vari√°veis\n‚Ä¢ **Gr√°ficos**: Visualiza√ß√£o de dados\n‚Ä¢ **Polin√¥mios**: Express√µes alg√©bricas complexas\n\n### **Geometria**\n‚Ä¢ **Formas**: Tri√¢ngulos, c√≠rculos, pol√≠gonos\n‚Ä¢ **Espa√ßo**: Geometria 3D e s√≥lidos\n‚Ä¢ **Medidas**: √Årea, per√≠metro, volume\n‚Ä¢ **Transforma√ß√µes**: Movimentos geom√©tricos\n\n### **Trigonometria**\n‚Ä¢ **Fun√ß√µes**: Seno, cosseno, tangente\n‚Ä¢ **Tri√¢ngulos**: Resolu√ß√£o de problemas\n‚Ä¢ **Ondas**: Fen√¥menos peri√≥dicos\n‚Ä¢ **Aplica√ß√µes**: Engenharia, f√≠sica\n\n### **C√°lculo**\n‚Ä¢ **Limites**: Comportamento de fun√ß√µes\n‚Ä¢ **Derivadas**: Taxa de varia√ß√£o\n‚Ä¢ **Integrais**: √Årea sob curvas\n‚Ä¢ **Aplica√ß√µes**: Otimiza√ß√£o, modelagem\n\n### **Estat√≠stica**\n‚Ä¢ **An√°lise de dados**: Interpreta√ß√£o de informa√ß√µes\n‚Ä¢ **Probabilidade**: Chances e possibilidades\n‚Ä¢ **Gr√°ficos**: Visualiza√ß√£o estat√≠stica\n‚Ä¢ **Aplica√ß√µes**: Pesquisa, medicina, economia\n\n## **Por que a Matem√°tica √© Importante?**\n\n‚Ä¢ **Desenvolvimento do racioc√≠nio l√≥gico**\n‚Ä¢ **Resolu√ß√£o de problemas complexos**\n‚Ä¢ **Base para outras ci√™ncias**\n‚Ä¢ **Aplica√ß√µes pr√°ticas no dia a dia**\n‚Ä¢ **Desenvolvimento de habilidades anal√≠ticas**\n\n**üí° Dica**: A matem√°tica n√£o √© sobre decorar f√≥rmulas, mas sobre entender conceitos e desenvolver o pensamento l√≥gico!\n\n**Qual √°rea voc√™ gostaria de explorar?**`
            specificActions = [
              { type: 'cta' as const, label: '√Ålgebra', module: 'professor', args: { topic: 'algebra' } },
              { type: 'cta' as const, label: 'Geometria', module: 'professor', args: { topic: 'geometria' } },
              { type: 'cta' as const, label: 'Trigonometria', module: 'professor', args: { topic: 'trigonometria' } }
            ]
          }
          break
          
        case 'f√≠sica':
          specificResponse = `‚ö° **F√≠sica - Desvendando os Mist√©rios do Universo**\n\nA f√≠sica √© a ci√™ncia que estuda a natureza e os fen√¥menos que ocorrem no universo. √â atrav√©s dela que entendemos desde o movimento de uma bola at√© os segredos das estrelas!\n\n## **Principais √Åreas da F√≠sica**\n\n### **Mec√¢nica**\n‚Ä¢ **Cinem√°tica**: Estudo do movimento\n‚Ä¢ **Din√¢mica**: For√ßas e suas causas\n‚Ä¢ **Energia**: Conserva√ß√£o e transforma√ß√£o\n‚Ä¢ **Gravita√ß√£o**: Atra√ß√£o entre corpos\n\n### **Termodin√¢mica**\n‚Ä¢ **Calor**: Transfer√™ncia de energia t√©rmica\n‚Ä¢ **Temperatura**: Medida da energia cin√©tica\n‚Ä¢ **Leis da termodin√¢mica**: Princ√≠pios fundamentais\n‚Ä¢ **M√°quinas t√©rmicas**: Motores e refrigeradores\n\n### **Eletromagnetismo**\n‚Ä¢ **Eletricidade**: Cargas e correntes\n‚Ä¢ **Magnetismo**: Campos magn√©ticos\n‚Ä¢ **Ondas eletromagn√©ticas**: Luz, r√°dio, raios X\n‚Ä¢ **Circuitos**: Componentes el√©tricos\n\n### **√ìptica**\n‚Ä¢ **Luz**: Natureza e comportamento\n‚Ä¢ **Reflex√£o**: Espelhos e superf√≠cies\n‚Ä¢ **Refra√ß√£o**: Lentes e prismas\n‚Ä¢ **Cores**: Espectro e percep√ß√£o\n\n### **F√≠sica Moderna**\n‚Ä¢ **Relatividade**: Espa√ßo e tempo\n‚Ä¢ **F√≠sica qu√¢ntica**: Mundo subat√¥mico\n‚Ä¢ **F√≠sica nuclear**: Energia at√¥mica\n‚Ä¢ **Astrof√≠sica**: Estrelas e gal√°xias\n\n## **Aplica√ß√µes Pr√°ticas**\n\n‚Ä¢ **Tecnologia**: Smartphones, computadores, GPS\n‚Ä¢ **Medicina**: Raios X, resson√¢ncia magn√©tica\n‚Ä¢ **Energia**: Usinas, pain√©is solares\n‚Ä¢ **Transporte**: Avi√µes, carros, foguetes\n‚Ä¢ **Comunica√ß√£o**: Internet, sat√©lites\n\n**üí° Dica**: A f√≠sica est√° em tudo! Observe o mundo ao seu redor e tente entender os fen√¥menos que acontecem diariamente.\n\n**Qual √°rea da f√≠sica te interessa mais?**`
          specificActions = [
            { type: 'cta' as const, label: 'Mec√¢nica', module: 'professor', args: { topic: 'mecanica' } },
            { type: 'cta' as const, label: 'Eletricidade', module: 'professor', args: { topic: 'eletricidade' } },
            { type: 'cta' as const, label: 'Aula completa', module: 'aula_interativa', args: { tema: 'fisica' } }
          ]
          break
          
        case 'qu√≠mica':
          specificResponse = `üß™ **Qu√≠mica - A Ci√™ncia das Transforma√ß√µes**\n\nA qu√≠mica √© a ci√™ncia que estuda a mat√©ria, suas propriedades, composi√ß√£o e as transforma√ß√µes que ela sofre. √â atrav√©s da qu√≠mica que entendemos como os materiais se comportam e como podemos criar novos produtos!\n\n## **Principais √Åreas da Qu√≠mica**\n\n### **Qu√≠mica Geral**\n‚Ä¢ **√Åtomos**: Estrutura e propriedades\n‚Ä¢ **Mol√©culas**: Liga√ß√µes qu√≠micas\n‚Ä¢ **Tabela peri√≥dica**: Organiza√ß√£o dos elementos\n‚Ä¢ **Rea√ß√µes**: Transforma√ß√µes qu√≠micas\n\n### **Qu√≠mica Org√¢nica**\n‚Ä¢ **Compostos de carbono**: Base da vida\n‚Ä¢ **Hidrocarbonetos**: Petr√≥leo e derivados\n‚Ä¢ **Fun√ß√µes org√¢nicas**: √Ålcool, √°cido, √©ter\n‚Ä¢ **Pol√≠meros**: Pl√°sticos e fibras\n\n### **Qu√≠mica Inorg√¢nica**\n‚Ä¢ **Elementos**: Metais e n√£o-metais\n‚Ä¢ **√Åcidos e bases**: pH e neutraliza√ß√£o\n‚Ä¢ **Sais**: Compostos i√¥nicos\n‚Ä¢ **Minerais**: Recursos naturais\n\n### **F√≠sico-Qu√≠mica**\n‚Ä¢ **Termodin√¢mica**: Energia nas rea√ß√µes\n‚Ä¢ **Cin√©tica**: Velocidade das rea√ß√µes\n‚Ä¢ **Equil√≠brio**: Estado de balan√ßo\n‚Ä¢ **Eletroqu√≠mica**: Rea√ß√µes com eletricidade\n\n## **Aplica√ß√µes no Dia a Dia**\n\n‚Ä¢ **Medicina**: Medicamentos e tratamentos\n‚Ä¢ **Alimenta√ß√£o**: Conservantes e aditivos\n‚Ä¢ **Cosm√©ticos**: Produtos de beleza\n‚Ä¢ **Limpeza**: Detergentes e sab√µes\n‚Ä¢ **Tecnologia**: Baterias e semicondutores\n‚Ä¢ **Agricultura**: Fertilizantes e pesticidas\n\n## **Import√¢ncia da Qu√≠mica**\n\n‚Ä¢ **Desenvolvimento de novos materiais**\n‚Ä¢ **Solu√ß√µes para problemas ambientais**\n‚Ä¢ **Melhoria da qualidade de vida**\n‚Ä¢ **Inova√ß√£o tecnol√≥gica**\n‚Ä¢ **Compreens√£o dos processos naturais**\n\n**üí° Dica**: A qu√≠mica est√° em tudo ao nosso redor! Desde o ar que respiramos at√© os alimentos que comemos.\n\n**Qual √°rea da qu√≠mica voc√™ gostaria de explorar?**`
          specificActions = [
            { type: 'cta' as const, label: 'Conceitos b√°sicos', module: 'professor', args: { topic: 'quimica_basica' } },
            { type: 'cta' as const, label: 'Qu√≠mica org√¢nica', module: 'professor', args: { topic: 'quimica_organica' } },
            { type: 'cta' as const, label: 'Aula completa', module: 'aula_interativa', args: { tema: 'quimica' } }
          ]
          break
          
        case 'biologia':
          specificResponse = `üß¨ **Biologia - A Ci√™ncia da Vida**\n\nA biologia √© a ci√™ncia que estuda a vida em todas suas formas e manifesta√ß√µes. √â atrav√©s dela que entendemos como os seres vivos funcionam, se relacionam e evoluem ao longo do tempo!\n\n## **Principais √Åreas da Biologia**\n\n### **Biologia Celular**\n‚Ä¢ **C√©lulas**: Unidade b√°sica da vida\n‚Ä¢ **Organelas**: Estruturas celulares\n‚Ä¢ **Metabolismo**: Processos qu√≠micos\n‚Ä¢ **Divis√£o celular**: Reprodu√ß√£o e crescimento\n\n### **Gen√©tica**\n‚Ä¢ **DNA**: C√≥digo gen√©tico\n‚Ä¢ **Genes**: Unidades heredit√°rias\n‚Ä¢ **Hereditariedade**: Transmiss√£o de caracter√≠sticas\n‚Ä¢ **Muta√ß√£o**: Varia√ß√µes gen√©ticas\n\n### **Ecologia**\n‚Ä¢ **Ecossistemas**: Rela√ß√µes ambientais\n‚Ä¢ **Biodiversidade**: Variedade de vida\n‚Ä¢ **Cadeias alimentares**: Fluxo de energia\n‚Ä¢ **Conserva√ß√£o**: Preserva√ß√£o da natureza\n\n### **Evolu√ß√£o**\n‚Ä¢ **Sele√ß√£o natural**: Adapta√ß√£o ao ambiente\n‚Ä¢ **Especia√ß√£o**: Forma√ß√£o de novas esp√©cies\n‚Ä¢ **F√≥sseis**: Evid√™ncias evolutivas\n‚Ä¢ **√Årvore da vida**: Relacionamento entre esp√©cies\n\n### **Fisiologia**\n‚Ä¢ **Sistemas**: Digestivo, circulat√≥rio, nervoso\n‚Ä¢ **√ìrg√£os**: Fun√ß√µes espec√≠ficas\n‚Ä¢ **Homeostase**: Equil√≠brio interno\n‚Ä¢ **Adapta√ß√µes**: Sobreviv√™ncia e reprodu√ß√£o\n\n## **Aplica√ß√µes Pr√°ticas**\n\n‚Ä¢ **Medicina**: Diagn√≥stico e tratamento\n‚Ä¢ **Agricultura**: Melhoramento de culturas\n‚Ä¢ **Biotecnologia**: Produ√ß√£o de medicamentos\n‚Ä¢ **Conserva√ß√£o**: Prote√ß√£o de esp√©cies\n‚Ä¢ **Pesquisa**: Descobertas cient√≠ficas\n\n## **Import√¢ncia da Biologia**\n\n‚Ä¢ **Compreens√£o da vida humana**\n‚Ä¢ **Preserva√ß√£o do meio ambiente**\n‚Ä¢ **Desenvolvimento de tecnologias**\n‚Ä¢ **Melhoria da sa√∫de**\n‚Ä¢ **Sustentabilidade planet√°ria**\n\n**üí° Dica**: A biologia conecta tudo! Desde as menores bact√©rias at√© os maiores ecossistemas, tudo est√° interligado.\n\n**Qual √°rea da biologia te interessa mais?**`
          specificActions = [
            { type: 'cta' as const, label: 'Biologia celular', module: 'professor', args: { topic: 'biologia_celular' } },
            { type: 'cta' as const, label: 'Gen√©tica', module: 'professor', args: { topic: 'genetica' } },
            { type: 'cta' as const, label: 'Aula completa', module: 'aula_interativa', args: { tema: 'biologia' } }
          ]
          break
          
        case 'hist√≥ria':
          specificResponse = `üìú **Hist√≥ria - Conhecendo o Passado para Entender o Presente**\n\nA hist√≥ria √© a ci√™ncia que estuda o passado da humanidade, analisando eventos, sociedades e transforma√ß√µes ao longo do tempo. √â atrav√©s dela que entendemos como chegamos at√© aqui e podemos construir um futuro melhor!\n\n## **Principais Per√≠odos Hist√≥ricos**\n\n### **Hist√≥ria Antiga**\n‚Ä¢ **Civiliza√ß√µes**: Egito, Mesopot√¢mia, Gr√©cia, Roma\n‚Ä¢ **Imp√©rios**: Persa, Maced√¥nico, Romano\n‚Ä¢ **Culturas**: Desenvolvimento da escrita, leis, filosofia\n‚Ä¢ **Conquistas**: Alexandre, J√∫lio C√©sar, Augusto\n\n### **Hist√≥ria Medieval**\n‚Ä¢ **Feudalismo**: Sistema social e econ√¥mico\n‚Ä¢ **Cristianismo**: Expans√£o e influ√™ncia religiosa\n‚Ä¢ **Imp√©rios**: Bizantino, Carol√≠ngio, Isl√¢mico\n‚Ä¢ **Cruzadas**: Conflitos religiosos e comerciais\n\n### **Hist√≥ria Moderna**\n‚Ä¢ **Renascimento**: Renova√ß√£o cultural e cient√≠fica\n‚Ä¢ **Reforma**: Transforma√ß√µes religiosas\n‚Ä¢ **Absolutismo**: Centraliza√ß√£o do poder\n‚Ä¢ **Revolu√ß√µes**: Inglesa, Americana, Francesa\n\n### **Hist√≥ria Contempor√¢nea**\n‚Ä¢ **Revolu√ß√£o Industrial**: Transforma√ß√£o econ√¥mica\n‚Ä¢ **Imperialismo**: Expans√£o colonial\n‚Ä¢ **Guerras Mundiais**: Conflitos globais\n‚Ä¢ **Guerra Fria**: Polariza√ß√£o pol√≠tica\n\n## **Hist√≥ria do Brasil**\n\n### **Per√≠odo Colonial**\n‚Ä¢ **Descobrimento**: 1500 e os primeiros contatos\n‚Ä¢ **Capitanias**: Sistema de administra√ß√£o\n‚Ä¢ **Ciclo do A√ß√∫car**: Economia colonial\n‚Ä¢ **Escravid√£o**: Sistema de trabalho\n\n### **Per√≠odo Imperial**\n‚Ä¢ **Independ√™ncia**: 1822 e processo de separa√ß√£o\n‚Ä¢ **Primeiro Reinado**: Dom Pedro I\n‚Ä¢ **Reg√™ncia**: Per√≠odo de transi√ß√£o\n‚Ä¢ **Segundo Reinado**: Dom Pedro II e aboli√ß√£o\n\n### **Rep√∫blica**\n‚Ä¢ **Rep√∫blica Velha**: Primeira Rep√∫blica\n‚Ä¢ **Era Vargas**: Get√∫lio Vargas e moderniza√ß√£o\n‚Ä¢ **Ditadura Militar**: 1964-1985\n‚Ä¢ **Redemocratiza√ß√£o**: Nova Rep√∫blica\n\n## **Como Estudar Hist√≥ria**\n\n### **M√©todos de Estudo**\n‚Ä¢ **Linha do tempo**: Organiza√ß√£o cronol√≥gica\n‚Ä¢ **Mapas**: Localiza√ß√£o geogr√°fica dos eventos\n‚Ä¢ **Causas e consequ√™ncias**: An√°lise de rela√ß√µes\n‚Ä¢ **Compara√ß√µes**: Entre per√≠odos e sociedades\n\n### **Dicas para Provas**\n‚Ä¢ **Contextualize**: Entenda o per√≠odo hist√≥rico\n‚Ä¢ **Conecte**: Relacione eventos e personagens\n‚Ä¢ **Analise**: V√° al√©m da memoriza√ß√£o\n‚Ä¢ **Pratique**: Fa√ßa exerc√≠cios e simulados\n\n## **Import√¢ncia da Hist√≥ria**\n\n‚Ä¢ **Forma√ß√£o cidad√£**: Compreens√£o da sociedade\n‚Ä¢ **Pensamento cr√≠tico**: An√°lise de fontes\n‚Ä¢ **Identidade cultural**: Conhecimento das ra√≠zes\n‚Ä¢ **Preven√ß√£o de erros**: Aprender com o passado\n‚Ä¢ **Vis√£o de futuro**: Planejamento baseado em experi√™ncias\n\n**üí° Dica**: A hist√≥ria n√£o √© s√≥ memorizar datas! √â entender processos, causas e consequ√™ncias. Sempre pergunte "por que" e "como" os eventos aconteceram.\n\n**Qual per√≠odo ou tema da hist√≥ria voc√™ gostaria de estudar?**`
          specificActions = [
            { type: 'cta' as const, label: 'Hist√≥ria do Brasil', module: 'professor', args: { topic: 'historia_brasil' } },
            { type: 'cta' as const, label: 'Hist√≥ria Mundial', module: 'professor', args: { topic: 'historia_mundial' } },
            { type: 'cta' as const, label: 'Aula completa', module: 'aula_interativa', args: { tema: 'historia' } }
          ]
          break
          
        default:
          specificResponse = `üìö **${subject.charAt(0).toUpperCase() + subject.slice(1)} - Seu Guia de Estudos**\n\n√ìtimo! Vou te ajudar com suas d√∫vidas sobre ${subject}. Como seu professor virtual, estou aqui para tornar o aprendizado mais f√°cil e interessante!\n\n## **Como Posso Te Ajudar?**\n\n### **Explica√ß√µes Detalhadas**\n‚Ä¢ Conceitos fundamentais\n‚Ä¢ Exemplos pr√°ticos\n‚Ä¢ Aplica√ß√µes no dia a dia\n‚Ä¢ Conex√µes com outras mat√©rias\n\n### **Resolu√ß√£o de Exerc√≠cios**\n‚Ä¢ Passo a passo detalhado\n‚Ä¢ Dicas e macetes\n‚Ä¢ M√©todos alternativos\n‚Ä¢ Verifica√ß√£o de respostas\n\n### **Material de Apoio**\n‚Ä¢ Resumos organizados\n‚Ä¢ F√≥rmulas importantes\n‚Ä¢ Conceitos-chave\n‚Ä¢ Exerc√≠cios pr√°ticos\n\n## **Para Come√ßar, Me Conte:**\n\n1. **Qual √© sua d√∫vida espec√≠fica?**\n2. **Em que n√≠vel voc√™ est√° estudando?** (Fundamental, M√©dio, Superior)\n3. **Voc√™ tem algum exerc√≠cio ou problema em mente?**\n4. **H√° algum t√≥pico que voc√™ gostaria de revisar?**\n\n**üí° Dica**: Quanto mais espec√≠fica for sua pergunta, melhor posso te ajudar! N√£o tenha medo de perguntar - estou aqui para esclarecer todas as suas d√∫vidas.\n\n**Vamos come√ßar? Me conte sua d√∫vida!**`
          specificActions = [
            { type: 'cta' as const, label: 'Criar aula interativa', module: 'aula_interativa', args: { tema: message } },
            { type: 'cta' as const, label: 'Continuar conversa', module: 'professor', args: { action: 'continue' } }
          ]
      }
      
      return {
        text: specificResponse,
        blocks: [
          { 
            type: 'notice', 
            title: `Professor IA - ${subject.charAt(0).toUpperCase() + subject.slice(1)}`, 
            body: `Estou aqui para te ajudar com ${subject}. Escolha uma op√ß√£o abaixo ou me conte sua d√∫vida espec√≠fica!` 
          }
        ],
        actions: specificActions
      }
    }
    
    console.log('‚ö†Ô∏è [PROFESSOR] Returning generic response - no specific subject detected')
    
    return {
      text: 'üéì **Professor IA - Seu Assistente de Estudos Pessoal**\n\nOl√°! Sou seu professor virtual e estou aqui para tornar o aprendizado mais f√°cil, interessante e eficiente. Posso te ajudar com qualquer d√∫vida acad√™mica!\n\n## **Mat√©rias que Posso Ensinar:**\n\n### **Exatas**\n‚Ä¢ **Matem√°tica**: √Ålgebra, geometria, trigonometria, c√°lculo\n‚Ä¢ **F√≠sica**: Mec√¢nica, eletricidade, √≥ptica, termodin√¢mica\n‚Ä¢ **Qu√≠mica**: Geral, org√¢nica, inorg√¢nica, f√≠sico-qu√≠mica\n\n### **Biol√≥gicas**\n‚Ä¢ **Biologia**: Celular, gen√©tica, ecologia, evolu√ß√£o\n‚Ä¢ **Ci√™ncias**: Meio ambiente, sa√∫de, anatomia\n\n### **Humanas**\n‚Ä¢ **Hist√≥ria**: Geral, do Brasil, mundial\n‚Ä¢ **Geografia**: F√≠sica, humana, pol√≠tica\n‚Ä¢ **Portugu√™s**: Gram√°tica, literatura, reda√ß√£o\n‚Ä¢ **Filosofia**: √âtica, l√≥gica, hist√≥ria da filosofia\n‚Ä¢ **Sociologia**: Sociedade, cultura, pol√≠tica\n\n## **Como Posso Te Ajudar:**\n\n‚úÖ **Explica√ß√µes detalhadas e did√°ticas**\n‚úÖ **Resolu√ß√£o de exerc√≠cios passo a passo**\n‚úÖ **Cria√ß√£o de aulas interativas**\n‚úÖ **Simulados e provas**\n‚úÖ **Dicas de estudo e memoriza√ß√£o**\n‚úÖ **Material de apoio personalizado**\n\n**üí° Dica**: Quanto mais espec√≠fica for sua pergunta, melhor posso te ajudar! N√£o tenha medo de perguntar - estou aqui para esclarecer todas as suas d√∫vidas.\n\n**Me conte: qual √© sua d√∫vida ou o que voc√™ gostaria de aprender hoje?**',
      blocks: [
        { 
          type: 'notice', 
          title: 'üéØ Professor IA Ativo', 
          body: 'Estou pronto para te ajudar com qualquer mat√©ria! Escolha uma op√ß√£o abaixo ou me conte sua d√∫vida espec√≠fica.' 
        }
      ],
      actions: [
        { type: 'cta', label: 'üìö Criar aula interativa', module: 'aula_interativa', args: {} },
        { type: 'cta', label: 'üéØ Simulado r√°pido (5 quest√µes)', module: 'enem', args: { quantidade_questoes: 5 } },
        { type: 'cta', label: 'üìñ Aula expandida completa', module: 'aula-expandida', args: {} }
      ]
    }
  }
})

// pesquisa_tempo_real module - usa Perplexity AI SDK para pesquisas em tempo real
registerModule({
  id: 'pesquisa_tempo_real',
  name: 'Pesquisa em Tempo Real',
  version: '1.0.0',
  permissions: { requires_auth: false },
  cost_estimate: { tokens: 1500, latency_ms: 3000 },
  async detect({ text, context }): Promise<DetectedIntent> {
    // Detectar se √© uma pergunta que requer pesquisa em tempo real
    const lowerText = text.toLowerCase()
    
    // Palavras-chave que indicam necessidade de pesquisa em tempo real
    const realTimeKeywords = [
      'not√≠cias', 'atual', 'hoje', 'agora', 'recente', '√∫ltimas', 'atualidade',
      'tend√™ncias', 'mercado', 'economia', 'pol√≠tica', 'tecnologia', 'ci√™ncia',
      'eventos', 'acontecimentos', 'situa√ß√£o atual', 'estado atual', 'como est√°',
      'o que est√° acontecendo', 'novidades', 'desenvolvimentos', 'atualiza√ß√£o',
      'dados atuais', 'informa√ß√µes recentes', '√∫ltima hora', 'breaking news'
    ]
    
    const hasRealTimeKeywords = realTimeKeywords.some(keyword => 
      lowerText.includes(keyword)
    )
    
    // Perguntas que claramente precisam de dados atuais
    const realTimeQuestions = [
      'qual √© a situa√ß√£o atual', 'como est√°', 'o que est√° acontecendo',
      'quais s√£o as √∫ltimas', 'me fale sobre as tend√™ncias atuais',
      'dados mais recentes', 'informa√ß√µes atualizadas', 'estado atual do',
      'desenvolvimentos recentes', 'novidades sobre', 'atualiza√ß√£o sobre'
    ]
    
    const hasRealTimeQuestions = realTimeQuestions.some(question => 
      lowerText.includes(question)
    )
    
    if (hasRealTimeKeywords || hasRealTimeQuestions) {
      return { 
        intent: 'real_time_research', 
        module: 'pesquisa_tempo_real', 
        confidence: 0.9, 
        slots: { query: text } 
      }
    }
    
    // Sempre usar OpenAI para detec√ß√£o - maior certeza
    try {
      const response = await fetch(getClassifyUrl(), {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          userMessage: text,
          history: context?.history || [],
          currentModule: context?.module || 'auto'
        }),
      });

      if (response.ok) {
        const data = await response.json();
        if (data.success && data.classification?.module === 'PESQUISA_TEMPO_REAL') {
          return { 
            intent: 'real_time_research', 
            module: 'pesquisa_tempo_real', 
            confidence: data.classification.confidence || 0.8, 
            slots: { query: text } 
          };
        }
      }
    } catch (error) {
      console.error('Erro na detec√ß√£o OpenAI:', error);
    }

    // Fallback simples apenas em caso de erro
    return { intent: 'real_time_research', module: 'pesquisa_tempo_real', confidence: 0.3, slots: { query: text } }
  },
  async execute({ slots, context }): Promise<OrchestratorResponse> {
    const query = slots.query || context?.text || ''
    
    try {
      // Construir URL absoluta para server-side requests
      let baseUrl: string;
      
      if (typeof window !== 'undefined') {
        // Client-side: usar window.location.origin
        baseUrl = window.location.origin;
      } else {
        // Server-side: usar vari√°veis de ambiente ou localhost
        baseUrl = process.env.NEXTAUTH_URL || 
                  process.env.NEXT_PUBLIC_APP_URL || 
                  'http://localhost:3000';
      }
      
      // Fazer chamada para o endpoint de teste do Perplexity (sem autentica√ß√£o)
      const response = await fetch(`${baseUrl}/api/test-perplexity`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        }
      })

      if (response.ok) {
        const data = await response.json()
        return {
          text: `üîç **Pesquisa em Tempo Real**\n\n${data.response || 'Desculpe, n√£o consegui encontrar informa√ß√µes atualizadas.'}\n\n*Informa√ß√µes pesquisadas em tempo real usando Perplexity AI*`,
          blocks: [
            { 
              type: 'notice', 
              title: 'üì° Pesquisa em Tempo Real', 
              body: 'Esta resposta foi gerada com base em informa√ß√µes atuais e em tempo real.' 
            }
          ],
          actions: [
            { type: 'cta', label: 'Nova pesquisa', module: 'pesquisa_tempo_real', args: {} },
            { type: 'cta', label: 'Criar aula sobre o tema', module: 'aula_interativa', args: { tema: query } }
          ],
          trace: { module: 'pesquisa_tempo_real', confidence: 0.9 }
        }
      } else {
        throw new Error(`HTTP ${response.status}`)
      }
    } catch (error) {
      console.error('Erro na pesquisa com Perplexity:', error)
      return {
        text: 'Desculpe, n√£o consegui realizar a pesquisa em tempo real no momento. Posso te ajudar de outra forma?',
        blocks: [],
        actions: [
          { type: 'cta', label: 'Tentar pesquisa novamente', module: 'pesquisa_tempo_real', args: {} },
          { type: 'cta', label: 'Criar aula interativa', module: 'aula_interativa', args: {} }
        ],
        trace: { module: 'pesquisa_tempo_real', confidence: 0.3, errors: ['perplexity_error'] }
      }
    }
  }
})

// atendimento module (fallback)
registerModule({
  id: 'atendimento',
  name: 'Atendimento Geral',
  version: '1.0.0',
  permissions: { requires_auth: false },
  cost_estimate: { tokens: 400, latency_ms: 500 },
  async detect({ text, context }): Promise<DetectedIntent> {
    // Sempre usar OpenAI para detec√ß√£o - maior certeza
    try {
      const response = await fetch(getClassifyUrl(), {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          userMessage: text,
          history: context?.history || [],
          currentModule: context?.module || 'auto'
        }),
      });

      if (response.ok) {
        const data = await response.json();
        if (data.success && data.classification?.module === 'ATENDIMENTO') {
          return { 
            intent: 'general', 
            module: 'atendimento', 
            confidence: data.classification.confidence || 0.4, 
            slots: {} 
          };
        }
      }
    } catch (error) {
      console.error('Erro na detec√ß√£o OpenAI:', error);
    }

    // Fallback simples apenas em caso de erro
    return { intent: 'general', module: 'atendimento', confidence: 0.4, slots: {} }
  },
  async execute({ slots }): Promise<OrchestratorResponse> {
    return {
      text: 'Como posso ajudar voc√™ hoje? Posso direcionar voc√™ para o setor mais adequado.',
      blocks: [],
      actions: [
        { type: 'cta', label: 'Falar com atendimento', module: 'atendimento', args: { action: 'contact' } },
        { type: 'link', label: 'Central de ajuda', href: '/help' }
      ]
    }
  }
})


