import { GoogleGenerativeAI } from "@google/generative-ai";
import { ChatMessage, trimHistory } from "../chat-history";

function getGeminiClient() {
  if (!process.env.GEMINI_API_KEY) {
    throw new Error("GEMINI_API_KEY environment variable is required");
  }
  return new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
}

function toGeminiContent(history: ChatMessage[], input: string, systemPrompt?: string) {
  const trimmed = trimHistory(history);
  const contents = trimmed.map(m => ({
    role: m.role === "assistant" ? "model" : "user",
    parts: [{ text: typeof m.content === "string" ? m.content : JSON.stringify(m.content) }]
  }));
  
  contents.push({ role: "user", parts: [{ text: input }] });
  
  // Gemini usa system instruction separada
  return { contents, systemInstruction: systemPrompt };
}

export async function callGemini(
  model: string,
  history: ChatMessage[],
  input: string,
  systemPrompt?: string
) {
  const genAI = getGeminiClient();
  const modelClient = genAI.getGenerativeModel({
    model: model === "gemini-2.5-flash" ? "gemini-2.0-flash-exp" : model, // Mapear para modelo dispon√≠vel
    systemInstruction: systemPrompt
  });
  
  const { contents } = toGeminiContent(history, input, systemPrompt);
  const res = await modelClient.generateContent({ contents });
  
  const text = res.response.text();
  return { 
    text, 
    raw: res,
    usage: res.response.usageMetadata
  };
}

export async function streamGemini(
  model: string,
  history: ChatMessage[],
  input: string,
  systemPrompt?: string
) {
  const genAI = getGeminiClient();
  const modelClient = genAI.getGenerativeModel({
    model: model === "gemini-2.5-flash" ? "gemini-2.0-flash-exp" : model, // Mapear para modelo dispon√≠vel
    systemInstruction: systemPrompt
  });
  
  const { contents } = toGeminiContent(history, input, systemPrompt);
  const result = await modelClient.generateContentStream({ contents });
  
  return result;
}

export async function generateCuriosities(topic: string) {
  const genAI = getGeminiClient();
  const modelClient = genAI.getGenerativeModel({
    model: "gemini-2.0-flash-exp",
    systemInstruction: `Voc√™ √© um assistente educacional especializado em criar curiosidades interessantes e educativas sobre diversos t√≥picos. 

Sua tarefa √© gerar exatamente 10 curiosidades sobre o t√≥pico fornecido. Cada curiosidade deve:

1. Ser interessante e envolvente
2. Ser educativa e informativa
3. Despertar curiosidade e interesse
4. Ser apropriada para ambiente educacional
5. Variar entre fatos cient√≠ficos, hist√≥ricos, culturais ou pr√°ticos
6. Ser concisa (m√°ximo 2 frases por curiosidade)
7. Incluir um emoji relevante no in√≠cio

Formato de resposta: Retorne apenas um JSON v√°lido com a seguinte estrutura:
{
  "curiosities": [
    {
      "text": "emoji + texto da curiosidade",
      "category": "categoria (ex: cient√≠fico, hist√≥rico, cultural, pr√°tico)"
    }
  ]
}

Exemplo:
{
  "curiosities": [
    {
      "text": "üß¨ O DNA humano √© 99.9% id√™ntico entre todas as pessoas",
      "category": "cient√≠fico"
    }
  ]
}`
  });

  const prompt = `Gere 10 curiosidades interessantes e educativas sobre: "${topic}"

Certifique-se de que as curiosidades sejam:
- Relevantes ao t√≥pico
- Educativas e informativas
- Apropriadas para ambiente escolar
- Variadas em categorias (cient√≠fico, hist√≥rico, cultural, pr√°tico)
- Interessantes e envolventes

Retorne apenas o JSON v√°lido conforme especificado.`;

  try {
    const result = await modelClient.generateContent(prompt);
    const responseText = result.response.text();
    
    // Tentar extrair JSON da resposta
    const jsonMatch = responseText.match(/\{[\s\S]*\}/);
    if (!jsonMatch) {
      throw new Error('Resposta n√£o cont√©m JSON v√°lido');
    }
    
    const parsed = JSON.parse(jsonMatch[0]);
    
    if (!parsed.curiosities || !Array.isArray(parsed.curiosities)) {
      throw new Error('Estrutura JSON inv√°lida');
    }
    
    // Validar e limpar as curiosidades
    const validCuriosities = parsed.curiosities
      .filter((curiosity: any) => 
        curiosity.text && 
        typeof curiosity.text === 'string' && 
        curiosity.text.trim().length > 0
      )
      .map((curiosity: any) => ({
        text: curiosity.text.trim(),
        category: curiosity.category || 'geral'
      }));
    
    if (validCuriosities.length === 0) {
      throw new Error('Nenhuma curiosidade v√°lida encontrada');
    }
    
    console.log(`‚úÖ Geradas ${validCuriosities.length} curiosidades para "${topic}"`);
    return validCuriosities;
    
  } catch (error) {
    console.error('Erro ao gerar curiosidades:', error);
    
    // Fallback: curiosidades gen√©ricas educativas
    const fallbackCuriosities = [
      {
        text: "üß† O c√©rebro humano processa informa√ß√µes 200.000 vezes mais r√°pido que um computador",
        category: "cient√≠fico"
      },
      {
        text: "üìö A leitura regular pode aumentar a expectativa de vida em at√© 2 anos",
        category: "cient√≠fico"
      },
      {
        text: "üéØ Objetivos claros aumentam a probabilidade de sucesso em at√© 40%",
        category: "pr√°tico"
      },
      {
        text: "‚ö° Aprendizagem ativa √© 6 vezes mais eficaz que aprendizagem passiva",
        category: "cient√≠fico"
      },
      {
        text: "üé® Cores podem influenciar o humor e a produtividade no aprendizado",
        category: "cient√≠fico"
      },
      {
        text: "üèÜ Reconhecimento e feedback positivo aumentam a motiva√ß√£o intr√≠nseca",
        category: "pr√°tico"
      },
      {
        text: "üìä Repeti√ß√£o espa√ßada √© a t√©cnica mais eficaz para memoriza√ß√£o duradoura",
        category: "cient√≠fico"
      },
      {
        text: "üå± A curiosidade √© o combust√≠vel natural do aprendizado e da descoberta",
        category: "pr√°tico"
      },
      {
        text: "üéÆ Gamifica√ß√£o pode aumentar o engajamento em atividades educacionais em at√© 90%",
        category: "cient√≠fico"
      },
      {
        text: "üí° Cada pessoa tem um estilo de aprendizado √∫nico - visual, auditivo ou cinest√©sico",
        category: "cient√≠fico"
      }
    ];
    
    return fallbackCuriosities;
  }
}

export async function generateTopicIntroduction(topic: string) {
  const genAI = getGeminiClient();
  const modelClient = genAI.getGenerativeModel({
    model: "gemini-2.0-flash-exp",
    systemInstruction: `Voc√™ √© um assistente educacional especializado em criar introdu√ß√µes envolventes e informativas sobre diversos t√≥picos educacionais.

Sua tarefa √© criar uma introdu√ß√£o espec√≠fica e personalizada sobre o t√≥pico fornecido. A introdu√ß√£o deve:

1. Ser espec√≠fica ao t√≥pico mencionado
2. Ser envolvente e despertar interesse
3. Ser educativa e informativa
4. Ser apropriada para ambiente educacional
5. Ter entre 2-4 frases, concisa mas completa
6. Explicar a relev√¢ncia e import√¢ncia do t√≥pico
7. Preparar o aluno para o aprendizado
8. Usar linguagem clara e acess√≠vel

Formato de resposta: Retorne apenas o texto da introdu√ß√£o, sem formata√ß√£o adicional ou aspas.`
  });

  const prompt = `Crie uma introdu√ß√£o envolvente e espec√≠fica sobre o t√≥pico: "${topic}"

A introdu√ß√£o deve:
- Ser espec√≠fica ao t√≥pico mencionado
- Explicar por que este t√≥pico √© importante e interessante
- Preparar o aluno para uma experi√™ncia de aprendizado envolvente
- Ser concisa mas informativa (2-4 frases)
- Usar linguagem clara e acess√≠vel
- Ser apropriada para ambiente educacional

Retorne apenas o texto da introdu√ß√£o, sem formata√ß√£o adicional.`;

  try {
    const result = await modelClient.generateContent(prompt);
    const introduction = result.response.text().trim();
    
    // Limpar poss√≠veis aspas ou formata√ß√£o extra
    const cleanIntroduction = introduction.replace(/^["']|["']$/g, '').trim();
    
    if (!cleanIntroduction || cleanIntroduction.length < 50) {
      throw new Error('Introdu√ß√£o muito curta ou inv√°lida');
    }
    
    console.log(`‚úÖ Gerada introdu√ß√£o para "${topic}"`);
    return cleanIntroduction;
    
  } catch (error) {
    console.error('Erro ao gerar introdu√ß√£o:', error);
    
    // Fallback: introdu√ß√£o gen√©rica baseada no t√≥pico
    const fallbackIntroduction = `Esta aula foi cuidadosamente elaborada para proporcionar uma compreens√£o completa e interativa sobre ${topic}. Voc√™ ser√° guiado atrav√©s de conceitos fundamentais, exemplos pr√°ticos e atividades que facilitam o aprendizado e a reten√ß√£o do conhecimento. Prepare-se para uma experi√™ncia educacional envolvente e personalizada!`;
    
    return fallbackIntroduction;
  }
}
