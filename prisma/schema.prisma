// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(STUDENT)
  schoolId      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  conversations Conversation[]
  quotas        Quota[]
  analytics     Analytics[]
  school        School?   @relation(fields: [schoolId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model School {
  id                    String   @id @default(cuid())
  domain                String   @unique
  name                  String
  logoUrl               String?
  plan                  PlanType @default(PROFESSOR)
  primaryColor          String   @default("#3b82f6")
  secondaryColor        String   @default("#6366f1")
  supportEmail          String?
  generalSystemMessage  String?  @db.Text
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  users                 User[]
  prompts               SchoolPrompt[]
  analytics             Analytics[]
}

model Conversation {
  id          String   @id @default(cuid())
  userId      String
  module      String
  subject     String?
  grade       String?
  messages    Json
  tokenCount  Int      @default(0)
  model       String   @default("gpt-4o-mini")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SchoolPrompt {
  id        String   @id @default(cuid())
  schoolId  String
  module    String
  prompt    String   @db.Text
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  school    School   @relation(fields: [schoolId], references: [id], onDelete: Cascade)
}

model SystemMessage {
  id                    String   @id @default(cuid())
  module                String   @unique
  systemPrompt          String   @db.Text
  description           String?
  isActive              Boolean  @default(true)
  temperature           Int      @default(7)
  maxTokens             Int      @default(1000)
  maxCompletionTokens   Int      @default(800)
  tone                  String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

model Analytics {
  id                  String   @id @default(cuid())
  schoolId            String
  userId              String
  module              String
  subject             String?
  grade               String?
  tokensUsed          Int      @default(0)
  responseTime        Int?
  model               String   @default("gpt-4o-mini")
  satisfactionRating  Int?
  date                DateTime @default(now())

  school              School   @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Quota {
  id         String   @id @default(cuid())
  userId     String
  month      String   // YYYY-MM format
  tokenLimit Int      @default(100000)
  tokenUsed  Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model EnemQuestion {
  id              String   @id @default(cuid())
  area            String
  disciplina      String
  year            Int?
  source          String?
  stem            String   @db.Text
  a               String   @db.Text
  b               String   @db.Text
  c               String   @db.Text
  d               String   @db.Text
  e               String   @db.Text
  correct         String
  createdAt       DateTime @default(now())
}

model EnemSession {
  id              String   @id @default(cuid())
  userId          String
  area            String
  disciplina      String?
  numQuestions    Int
  durationMs      Int
  startedAt       DateTime
  finishedAt      DateTime?
  questions       Json
  answers         Json?
  score           Int?
  createdAt       DateTime @default(now())
}

enum UserRole {
  STUDENT
  TEACHER
  STAFF
  ADMIN
  SUPER_ADMIN
}

enum PlanType {
  PROFESSOR
  FULL
}
