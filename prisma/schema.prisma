generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                String    @id(map: "users_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email             String    @unique @db.VarChar(255)
  password_hash     String?
  name              String?   @db.VarChar(255)
  role              role      @default(STUDENT)
  google_id         String?   @db.VarChar(255)
  profile_image_url String?   @db.VarChar(500)
  photo             String?   @db.VarChar(500)
  school_id         String?   @db.Uuid
  created_at        DateTime  @default(now()) @db.Timestamp(6)
  updated_at        DateTime  @default(now()) @db.Timestamp(6)
  profile           Json?
  resetToken        String?   @db.VarChar(255)
  resetTokenExpiry  DateTime? @db.Timestamp(6)
}

model DemoUser {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String   @db.VarChar(255)
  email        String   @db.VarChar(255)
  phone        String   @db.VarChar(20)
  registeredAt DateTime @default(now()) @db.Timestamp(6)
  expiresAt    DateTime @db.Timestamp(6)
}

model achievements {
  id          String               @id @db.VarChar(50)
  title       String               @db.VarChar(100)
  description String
  icon        String               @db.VarChar(10)
  category    achievement_category
  threshold   Int
  is_active   Boolean              @default(true)
  created_at  DateTime             @default(now()) @db.Timestamp(6)
  updated_at  DateTime             @default(now()) @db.Timestamp(6)
}

model ai_requests {
  req_id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  occurred_at       DateTime @default(now()) @db.Timestamptz(6)
  tenant_id         String
  user_id           String?
  session_id        String
  provider          String
  model             String
  prompt_tokens     Int
  completion_tokens Int
  total_tokens      Int
  cost_brl          String
  latency_ms        Int
  success           Boolean
  error_code        String?
  cache_hit         Boolean  @default(false)
  metadata          Json?
  created_at        DateTime @default(now()) @db.Timestamptz(6)
}

model analytics {
  id                  String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  school_id           String   @db.Uuid
  user_id             String   @db.Uuid
  module              String   @db.VarChar(50)
  subject             String?  @db.VarChar(100)
  grade               String?  @db.VarChar(50)
  tokens_used         Int      @default(0)
  response_time       Int?
  model               String?  @default("gpt-4o-mini") @db.VarChar(50)
  satisfaction_rating Int?
  date                DateTime @default(now()) @db.Timestamp(6)
}

model artifact_comments {
  id                String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  artifact_id       String   @db.Uuid
  user_id           String   @db.Uuid
  content           String
  parent_comment_id String?  @db.Uuid
  created_at        DateTime @default(now()) @db.Timestamp(6)
  updated_at        DateTime @default(now()) @db.Timestamp(6)
}

model artifact_permissions {
  id               String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  artifact_id      String           @db.Uuid
  user_id          String           @db.Uuid
  permission_level permission_level
  granted_by       String           @db.Uuid
  granted_at       DateTime         @default(now()) @db.Timestamp(6)
  expires_at       DateTime?        @db.Timestamp(6)
}

model artifact_versions {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  artifact_id String   @db.Uuid
  version     Int
  content     String
  changes     String?
  created_by  String   @db.Uuid
  created_at  DateTime @default(now()) @db.Timestamp(6)
}

model artifacts {
  id                 String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title              String        @db.VarChar(255)
  description        String?
  content            String
  type               artifact_type
  status             String        @default("DRAFT")
  tags               Json?
  metadata           Json?
  template_variables Json?
  author_id          String        @db.Uuid
  school_id          String?       @db.Uuid
  version            Int           @default(1)
  is_template        Boolean       @default(false)
  parent_template_id String?       @db.Uuid
  created_at         DateTime      @default(now()) @db.Timestamp(6)
  updated_at         DateTime      @default(now()) @db.Timestamp(6)
  published_at       DateTime?     @db.Timestamp(6)
  archived_at        DateTime?     @db.Timestamp(6)
}

model conversations {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id     String   @db.Uuid
  module      String   @db.VarChar(50)
  subject     String?  @db.VarChar(100)
  grade       String?  @db.VarChar(50)
  messages    Json
  token_count Int      @default(0)
  model       String?  @default("gpt-4o-mini") @db.VarChar(50)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
}

model cost_log {
  id                String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id           String?  @db.Uuid
  lesson_id         String?  @db.VarChar(50)
  provider          String   @db.VarChar(50)
  model             String   @db.VarChar(100)
  prompt_tokens     Int      @default(0)
  completion_tokens Int      @default(0)
  total_tokens      Int      @default(0)
  cost_usd          Decimal  @default(0) @db.Decimal(10, 6)
  cost_brl          Decimal  @default(0) @db.Decimal(10, 6)
  created_at        DateTime @default(now()) @db.Timestamp(6)
}

model demo_registrations {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String   @db.VarChar(255)
  email         String   @db.VarChar(255)
  phone         String   @db.VarChar(15)
  registered_at DateTime @default(now()) @db.Timestamp(6)
  expires_at    DateTime @db.Timestamp(6)
  created_at    DateTime @default(now()) @db.Timestamp(6)
  updated_at    DateTime @default(now()) @db.Timestamp(6)
}

model errors {
  error_id    String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  occurred_at DateTime         @default(now()) @db.Timestamptz(6)
  tenant_id   String?
  level       error_level_enum
  service     service_enum
  route       String?
  module      String?
  message     String
  stack_hash  String
  metadata    Json?
  created_at  DateTime         @default(now()) @db.Timestamptz(6)
}

model essay_overall_scores {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  session_id String   @db.Uuid
  total      Int?
  comp1      Int?
  comp2      Int?
  comp3      Int?
  comp4      Int?
  comp5      Int?
  issues     Json?
  created_at DateTime @default(now()) @db.Timestamp(6)
}

model essay_paragraphs {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  session_id String   @db.Uuid
  idx        Int
  content    String
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
}

model essay_sessions {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id      String?   @db.Uuid
  topic_prompt String
  area         String    @default("Linguagens") @db.VarChar(50)
  status       String    @default("in_progress") @db.VarChar(20)
  created_at   DateTime  @default(now()) @db.Timestamp(6)
  updated_at   DateTime  @default(now()) @db.Timestamp(6)
  expires_at   DateTime? @db.Timestamp(6)
}

model events {
  event_id    String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  occurred_at DateTime     @default(now()) @db.Timestamptz(6)
  tenant_id   String
  user_id     String?
  session_id  String
  channel     channel_enum
  route       String?
  module      String?
  action      action_enum
  latency_ms  Int?
  status_code Int?
  metadata    Json?
  created_at  DateTime     @default(now()) @db.Timestamptz(6)
}

model feature_flags {
  name        String   @id @db.VarChar(100)
  enabled     Boolean  @default(false)
  description String?
  updated_at  DateTime @default(now()) @db.Timestamp(6)
}

model jobs {
  job_id        String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  queued_at     DateTime   @default(now()) @db.Timestamptz(6)
  started_at    DateTime?  @db.Timestamptz(6)
  finished_at   DateTime?  @db.Timestamptz(6)
  type          String
  status        job_status @default(queued)
  attempts      Int        @default(0)
  duration_ms   Int?
  metadata      Json?
  error_message String?
  created_at    DateTime   @default(now()) @db.Timestamp(6)
}

model learning_paths {
  id                String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id           String   @db.Uuid
  subject           String   @db.VarChar(100)
  title             String   @db.VarChar(255)
  description       String?
  lessons           Json
  mastery_threshold Decimal  @default(0.8) @db.Decimal(3, 2)
  is_active         Boolean  @default(true)
  created_at        DateTime @default(now()) @db.Timestamp(6)
  updated_at        DateTime @default(now()) @db.Timestamp(6)
}

model lesson_meta {
  id         String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  lesson_id  String        @db.VarChar(50)
  state      publish_state @default(DRAFT)
  version    Int           @default(1)
  changelog  String?
  updated_by String        @db.Uuid
  updated_at DateTime      @default(now()) @db.Timestamp(6)
}

model lesson_progress {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String   @db.Uuid
  lesson_id  String   @db.VarChar(50)
  card_id    String   @db.VarChar(50)
  completed  Boolean  @default(false)
  progress   Json?
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
}

model lessons {
  id            String   @id @db.VarChar(50)
  title         String   @db.VarChar(255)
  subject       String   @db.VarChar(100)
  level         String?  @db.VarChar(50)
  objective     String
  outline       Json
  cards         Json
  html_snapshot String?
  user_id       String?  @db.Uuid
  created_at    DateTime @default(now()) @db.Timestamp(6)
  updated_at    DateTime @default(now()) @db.Timestamp(6)
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model mastery {
  user_id    String   @db.Uuid
  tag        String   @db.VarChar(100)
  score      Decimal  @default(0.0) @db.Decimal(3, 2)
  updated_at DateTime @default(now()) @db.Timestamp(6)

  @@ignore
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model message_votes {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  conversation_id String   @db.Uuid
  message_index   Int
  user_id         String   @db.Uuid
  is_upvoted      Boolean
  created_at      DateTime @default(now()) @db.Timestamp(6)
  updated_at      DateTime @default(now()) @db.Timestamp(6)
}

model models {
  id              String   @id @db.VarChar(100)
  name            String   @db.VarChar(255)
  available       Boolean  @default(true)
  is_default      Boolean  @default(false)
  cost_per_input  Int?     @default(0)
  cost_per_output Int?     @default(0)
  created_at      DateTime @default(now()) @db.Timestamp(6)
  updated_at      DateTime @default(now()) @db.Timestamp(6)
}

model moderation_events {
  id           String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  occurred_at  DateTime          @default(now()) @db.Timestamptz(6)
  tenant_id    String
  user_id      String?
  type         moderation_type
  action_taken moderation_action
  content      String?
  metadata     Json?
  created_at   DateTime          @default(now()) @db.Timestamp(6)
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model neon_consumption_daily {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  date       DateTime @db.Date
  scope      String
  org_id     String?
  project_id String?
  metric     String
  agg        String
  value      Float
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @db.Timestamptz(6)
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model neon_consumption_raw {
  id                           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  collected_at                 DateTime @default(now()) @db.Timestamptz(6)
  window_start                 DateTime @db.Timestamptz(6)
  window_end                   DateTime @db.Timestamptz(6)
  scope                        String
  org_id                       String?
  project_id                   String?
  granularity                  String
  active_time_seconds          Float?
  compute_time_seconds         Float?
  written_data_bytes           BigInt?
  data_transfer_bytes          BigInt?
  synthetic_storage_size_bytes BigInt?
  metadata                     Json?    @default("{}")
  created_at                   DateTime @default(now()) @db.Timestamptz(6)
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model neon_consumption_sync_log {
  id                String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  started_at        DateTime  @default(now()) @db.Timestamptz(6)
  completed_at      DateTime? @db.Timestamptz(6)
  status            String
  window_start      DateTime  @db.Timestamptz(6)
  window_end        DateTime  @db.Timestamptz(6)
  scopes_processed  Int       @default(0)
  records_collected Int       @default(0)
  errors_count      Int       @default(0)
  error_details     Json?     @default("{}")
  duration_ms       Int?
  created_at        DateTime  @default(now()) @db.Timestamptz(6)
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model openai_models_latency_daily {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  date           DateTime @db.Timestamptz(6)
  tenant_id      String?
  model          String
  latency_ms_p50 Int
  latency_ms_p95 Int
  latency_ms_avg Int
  source         String
  synced_at      DateTime @default(now()) @db.Timestamptz(6)
  created_at     DateTime @default(now()) @db.Timestamptz(6)
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model openai_usage_daily {
  id                String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  date              DateTime @db.Timestamptz(6)
  tenant_id         String?
  model             String
  requests          Int
  prompt_tokens     Int
  completion_tokens Int
  total_tokens      Int
  cost_usd          String
  cost_brl          String
  source            String
  synced_at         DateTime @default(now()) @db.Timestamptz(6)
  created_at        DateTime @default(now()) @db.Timestamptz(6)
}

model paragraph_feedback {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  session_id   String   @db.Uuid
  paragraph_id String   @db.Uuid
  idx          Int
  comp1        Int?
  comp2        Int?
  comp3        Int?
  comp4        Int?
  comp5        Int?
  suggestions  Json?
  summary_note String?
  ai_model     String?  @db.VarChar(50)
  created_at   DateTime @default(now()) @db.Timestamp(6)
}

model quiz_attempts {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String   @db.Uuid
  lesson_id  String   @db.VarChar(50)
  item_id    String   @db.VarChar(50)
  choice     Int
  correct    Boolean
  confidence Int?
  ms_taken   Int?
  tags       Json?
  created_at DateTime @default(now()) @db.Timestamp(6)
}

model quiz_items {
  id            String   @id @db.VarChar(50)
  stem          String
  choices       Json
  correct_index Int
  rationale     String?
  tags          Json?
  difficulty    String?  @default("medium") @db.VarChar(20)
  lesson_id     String?  @db.VarChar(50)
  user_id       String?  @db.Uuid
  created_at    DateTime @default(now()) @db.Timestamp(6)
  updated_at    DateTime @default(now()) @db.Timestamp(6)
}

model quotas {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id     String    @db.Uuid
  month       String    @db.VarChar(7)
  token_limit Int       @default(100000)
  token_used  Int       @default(0)
  created_at  DateTime  @default(now()) @db.Timestamp(6)
  updated_at  DateTime? @default(now()) @db.Timestamp(6)
}

model enem_session {
  session_id String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String              @db.Uuid
  mode       enem_mode
  area       String[]            @db.VarChar(50)
  config     Json
  status     enem_session_status @default(ACTIVE)
  start_time DateTime            @default(now()) @db.Timestamp(6)
  end_time   DateTime?           @db.Timestamp(6)
  created_at DateTime            @default(now()) @db.Timestamp(6)
  updated_at DateTime            @default(now()) @db.Timestamp(6)
  responses  enem_response[]
  score      enem_score?

  @@index([user_id], map: "idx_enem_sessions_user")
  @@index([area], map: "idx_enem_sessions_area")
  @@index([status], map: "idx_enem_sessions_status")
}

model enem_response {
  response_id     String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  session_id      String       @db.Uuid
  item_id         String       @db.VarChar(50)
  selected_answer String       @db.VarChar(1)
  time_spent      Int
  is_correct      Boolean
  timestamp       DateTime     @default(now()) @db.Timestamp(6)
  session         enem_session @relation(fields: [session_id], references: [session_id], onDelete: Cascade)

  @@index([session_id], map: "idx_enem_responses_session")
  @@index([item_id], map: "idx_enem_responses_item")
}

model enem_score {
  score_id      String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  session_id    String       @unique @db.Uuid
  area_scores   Json
  total_score   Float
  tri_estimated Json
  stats         Json
  created_at    DateTime     @default(now()) @db.Timestamp(6)
  session       enem_session @relation(fields: [session_id], references: [session_id], onDelete: Cascade)

  @@index([session_id], map: "idx_enem_scores_session")
}

model user_achievements {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id        String   @db.Uuid
  achievement_id String   @db.VarChar(50)
  unlocked_at    DateTime @default(now()) @db.Timestamp(6)
  session_id     String?  @db.VarChar(100)
  metadata       Json?

  @@unique([user_id, achievement_id], map: "unique_user_achievement")
}

model schools {
  id             String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String           @db.VarChar(255)
  email          String?          @db.VarChar(255)
  phone          String?          @db.VarChar(20)
  address        String?          @db.VarChar(500)
  created_at     DateTime         @default(now()) @db.Timestamp(6)
  updated_at     DateTime         @default(now()) @db.Timestamp(6)
  school_prompts school_prompts[]
}

model system_messages {
  id                    String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  module                String   @db.VarChar(50)
  content               String
  system_prompt         String?
  description           String?
  temperature           Float?
  max_tokens            Int?
  max_completion_tokens Int?
  tone                  String?
  is_active             Boolean  @default(true)
  created_at            DateTime @default(now()) @db.Timestamp(6)
  updated_at            DateTime @default(now()) @db.Timestamp(6)
}

model school_prompts {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  school_id  String   @db.Uuid
  module     String   @db.VarChar(50)
  content    String
  prompt     String?
  is_active  Boolean  @default(true)
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  schools    schools  @relation(fields: [school_id], references: [id])
}

model enemQuestion {
  id         String           @id @db.VarChar(50)
  area       String           @db.VarChar(50)
  year       Int
  disciplina String           @db.VarChar(100)
  skill_tag  String[]         @db.VarChar(50)
  stem       String
  a          String
  b          String
  c          String
  d          String
  e          String
  correct    String           @db.VarChar(1)
  rationale  String
  difficulty difficulty_level @default(MEDIUM)
  source     String           @default("DATABASE") @db.VarChar(50)
  created_at DateTime         @default(now()) @db.Timestamp(6)
  updated_at DateTime         @default(now()) @db.Timestamp(6)
}

model enem_item {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  question_id  String   @db.VarChar(50)
  exam_id      String   @db.Uuid
  index        Int
  source       String   @default("DATABASE") @db.VarChar(50)
  payload_json Json
  answer_user  String?  @db.VarChar(1)
  updated_at   DateTime @default(now()) @db.Timestamp(6)

  @@index([exam_id], map: "idx_enem_items_exam")
  @@index([question_id], map: "idx_enem_items_question")
}

model enemExam {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id         String   @db.Uuid
  area            String   @db.VarChar(50)
  mode            String   @db.VarChar(50)
  total_questions Int
  duration_sec    Int
  config_json     Json
  created_at      DateTime @default(now()) @db.Timestamp(6)
  updated_at      DateTime @default(now()) @db.Timestamp(6)
}

model enemExamItem {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  exam_id      String   @db.Uuid
  question_id  String   @db.VarChar(50)
  index        Int
  source       String   @default("DATABASE") @db.VarChar(50)
  payload_json Json
  answer_user  String?  @db.VarChar(1)
  updated_at   DateTime @default(now()) @db.Timestamp(6)

  @@index([exam_id], map: "idx_enem_exam_items_exam")
  @@index([question_id], map: "idx_enem_exam_items_question")
}

model enem_exam_template {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String   @db.VarChar(255)
  area        String   @db.VarChar(50)
  config_json Json
  is_active   Boolean  @default(true)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
}

model TraceSpan {
  id            String   @id @default(cuid())
  traceId       String   @db.VarChar(64)
  spanId        String   @db.VarChar(32)
  parentSpanId  String?  @db.VarChar(32)
  name          String
  kind          String
  startTime     DateTime @db.Timestamptz(6)
  endTime       DateTime @db.Timestamptz(6)
  durationMs    Int
  statusCode    String
  statusMessage String?
  attributes    Json
  resource      Json
  scope         Json?
  createdAt     DateTime @default(now()) @db.Timestamptz(6)

  @@index([traceId])
  @@index([name])
  @@index([startTime])
  @@index([statusCode])
  @@index([kind])
}

model MetricPoint {
  id        String   @id @default(cuid())
  name      String
  time      DateTime @db.Timestamptz(6)
  value     Float
  unit      String?
  attr      Json
  resource  Json
  type      String
  createdAt DateTime @default(now()) @db.Timestamptz(6)

  @@index([name, time])
  @@index([time])
  @@index([type])
}

model LogRecord {
  id        String   @id @default(cuid())
  time      DateTime @db.Timestamptz(6)
  severity  String?
  body      String
  attr      Json
  resource  Json
  spanId    String?  @db.VarChar(32)
  traceId   String?  @db.VarChar(64)
  createdAt DateTime @default(now()) @db.Timestamptz(6)

  @@index([time])
  @@index([traceId])
  @@index([severity])
}

enum achievement_category {
  engagement
  learning
  exploration
  consistency
  social
  challenges
  collection
}

enum action {
  message_sent
  module_selected
  login
  signup
  logout
  file_upload
  web_search
  vote_up
  vote_down
  session_start
  session_end
  error_occurred
  quota_exceeded
}

enum action_enum {
  page_view
  button_click
  form_submit
  api_call
  login
  logout
  signup
  password_reset
  profile_update
  message_sent
  message_received
  module_selected
  file_upload
  search
  filter
  export
  import
  delete
  update
  create
  error
  warning
  info
  debug
  health_check
  sync
  backup
}

enum age_group {
  INFANTIL
  FUNDAMENTAL
  MEDIO
}

enum ai_support_need {
  TUTOR_DUVIDAS_ALUNOS
  GERACAO_PLANOS_AULA
  OUTROS
}

enum artifact_status {
  DRAFT
  PUBLISHED
  ARCHIVED
  SHARED
}

enum artifact_type {
  DOCUMENT
  SPREADSHEET
  PRESENTATION
  QUIZ
  ASSESSMENT
  REPORT
  TEMPLATE
}

enum channel {
  web
  whatsapp
  api
  mobile
}

enum channel_enum {
  web
  whatsapp
  api
  mobile
}

enum cost_reduction_goal {
  ATE_30_PORCENTO
  ATE_50_PORCENTO
  ATE_70_PORCENTO
  MAIS_70_PORCENTO
}

enum document_type {
  LESSON_PLAN
  WORKSHEET
  ASSIGNMENT
  RUBRIC
  SYLLABUS
  REPORT_CARD
  CERTIFICATE
  NEWSLETTER
}

enum education_level {
  EDUCACAO_INFANTIL
  FUNDAMENTAL_I
  FUNDAMENTAL_II
  ENSINO_MEDIO
  TECNICO
}

enum error_level {
  error
  warn
  info
}

enum error_level_enum {
  error
  warn
  info
  debug
}

enum feature_flag {
  TTS
  VOICE_CONTROL
  SIMULATIONS
  OFFLINE_MODE
  ADAPTIVE_LEARNING
}

enum financial_process {
  COBRANCA_MENSALIDADES
  CONTROLE_ORCAMENTO
  PAGAMENTOS_FORNECEDORES
  RELATORIOS_FINANCEIROS
}

enum hr_process {
  RECRUTAMENTO
  TREINAMENTO
  FOLHA_PAGAMENTO
  AVALIACAO_EQUIPE
}

enum job_status {
  queued
  running
  done
  failed
  cancelled
}

enum lesson_card_type {
  reading
  math
  quiz
  flashcards
  video
  code
  whiteboard
  assignment
}

enum moderation_action {
  blocked
  warned
  logged
  flagged
}

enum moderation_action_enum {
  allow
  block
  flag
  review
  auto_moderate
}

enum moderation_type {
  hate
  self_harm
  violence
  sexual
  spam
  other
}

enum pedagogical_process {
  PLANEJAMENTO_AULAS
  AVALIACAO_DESEMPENHO
  SUPORTE_PROFESSORES
  ALINHAMENTO_BNCC
}

enum permission_level {
  LEITURA
  EDICAO
  ADMINISTRADOR
}

enum plan {
  PROFESSOR
  FULL
}

enum prompt_action {
  create
  update
  publish
  rollback
  archive
  delete
}

enum prompt_scope {
  production
  staging
  development
}

enum prompt_status {
  draft
  active
  archived
}

enum publish_state {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum role {
  STUDENT
  TEACHER
  STAFF
  ADMIN
  SUPER_ADMIN
}

enum secretariat_automation {
  AUTOMATIZAR_CONSULTAS_PAIS
  GERAR_RELATORIOS_FREQUENCIA
  OUTROS
}

enum secretariat_process {
  MATRICULAS
  ATENDIMENTO_PAIS
  GERENCIAMENTO_DOCUMENTOS
  OUTROS
}

enum service {
  web
  server
  worker
  api
}

enum service_enum {
  web
  server
  worker
  api
  cron
  sync
}

enum ticket_priority {
  BAIXA
  MEDIA
  ALTA
  CRITICA
}

enum ticket_status {
  ABERTO
  EM_ANDAMENTO
  RESOLVIDO
  FECHADO
}

enum uptime_status {
  up
  down
  degraded
}

enum uptime_status_enum {
  up
  down
  degraded
  maintenance
}

enum wellbeing_initiative {
  PROGRAMAS_SAUDE_MENTAL
  TREINAMENTOS_IA
  OUTROS
}

enum difficulty_level {
  EASY
  MEDIUM
  HARD
}

enum simulation_mode {
  REAL
  AI
  MIXED
}

enum question_source {
  DATABASE
  AI
  FALLBACK
}

enum enem_mode {
  QUICK
  CUSTOM
  OFFICIAL
}

enum enem_session_status {
  ACTIVE
  COMPLETED
  ABANDONED
}

model TiSession {
  id           String   @id @default(cuid())
  userId       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  status       String   @default("active") // active | resolved | escalated
  issueType    String?  // ex: "printer", "wifi", "software"
  deviceLabel  String?  // ex: "HP 3635 – Secretaria"
  steps        TiStep[]
  transcript   Json?    // log condensado do chat
  resolution   String?
}

model TiStep {
  id         String   @id @default(cuid())
  sessionId  String
  session    TiSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  key        String    // ex: "check_power_cable"
  title      String
  status     String    @default("pending") // pending | done | skipped | failed
  notes      String?
  evidenceUrl String?
  createdAt  DateTime  @default(now())
}

model TiTicket {
  id          String   @id @default(cuid())
  sessionId   String
  createdAt   DateTime @default(now())
  priority    String   @default("P3") // P1-P4
  summary     String
  details     String
  assignedTo  String?  // opcional
  externalRef String?  // id do seu sistema de chamados (se houver)
}
