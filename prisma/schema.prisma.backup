generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id                String   @id @default(cuid())
  email             String   @unique
  password_hash     String?
  name              String?
  role              role     @default(STUDENT)
  google_id         String?
  profile_image_url String?
  photo             String?
  school_id         String?
  created_at        DateTime @default(now())
  updated_at        DateTime @default(now())
  profile           Json?

  @@index([email], map: "idx_users_email")
  @@index([google_id], map: "idx_users_google_id")
  @@index([school_id], map: "idx_users_school_id")
}

model achievements {
  id          String               @id @db.VarChar(50)
  title       String               @db.VarChar(100)
  description String
  icon        String               @db.VarChar(10)
  category    achievement_category
  threshold   Int
  is_active   Boolean              @default(true)
  created_at  DateTime             @default(now()) @db.Timestamp(6)
  updated_at  DateTime             @default(now()) @db.Timestamp(6)
}

model ai_requests {
  req_id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  occurred_at       DateTime @default(now()) @db.Timestamptz(6)
  tenant_id         String
  user_id           String?
  session_id        String
  provider          String
  model             String   @unique(map: "idx_ai_model")
  prompt_tokens     Int
  completion_tokens Int
  total_tokens      Int
  cost_brl          String
  latency_ms        Int
  success           Boolean
  error_code        String?
  cache_hit         Boolean  @default(false)
  metadata          Json?
  created_at        DateTime @default(now()) @db.Timestamptz(6)

  @@unique([tenant_id, occurred_at], map: "idx_ai_tenant_time")
  @@index([occurred_at], map: "idx_ai_requests_occurred_at")
  @@index([tenant_id], map: "idx_ai_requests_tenant_id")
}

model analytics {
  id                  String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  school_id           String   @db.Uuid
  user_id             String   @db.Uuid
  module              String   @db.VarChar(50)
  subject             String?  @db.VarChar(100)
  grade               String?  @db.VarChar(50)
  tokens_used         Int      @default(0)
  response_time       Int?
  model               String?  @default("gpt-4o-mini") @db.VarChar(50)
  satisfaction_rating Int?
  date                DateTime @default(now()) @db.Timestamp(6)
  schools             schools  @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "analytics_school_id_schools_id_fk")
}

model artifact_comments {
  id                String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  artifact_id       String    @db.Uuid
  user_id           String    @db.Uuid
  content           String
  parent_comment_id String?   @db.Uuid
  created_at        DateTime  @default(now()) @db.Timestamp(6)
  updated_at        DateTime  @default(now()) @db.Timestamp(6)
  artifacts         artifacts @relation(fields: [artifact_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "artifact_comments_artifact_id_artifacts_id_fk")
}

model artifact_permissions {
  id               String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  artifact_id      String           @db.Uuid
  user_id          String           @db.Uuid
  permission_level permission_level
  granted_by       String           @db.Uuid
  granted_at       DateTime         @default(now()) @db.Timestamp(6)
  expires_at       DateTime?        @db.Timestamp(6)
  artifacts        artifacts        @relation(fields: [artifact_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "artifact_permissions_artifact_id_artifacts_id_fk")
}

model artifact_versions {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  artifact_id String    @db.Uuid
  version     Int
  content     String
  changes     String?
  created_by  String    @db.Uuid
  created_at  DateTime  @default(now()) @db.Timestamp(6)
  artifacts   artifacts @relation(fields: [artifact_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "artifact_versions_artifact_id_artifacts_id_fk")
}

model artifacts {
  id                   String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title                String                 @db.VarChar(255)
  description          String?
  content              String
  type                 artifact_type
  status               String                 @default("DRAFT")
  tags                 Json?
  metadata             Json?
  template_variables   Json?
  author_id            String                 @db.Uuid
  school_id            String?                @db.Uuid
  version              Int                    @default(1)
  is_template          Boolean                @default(false)
  parent_template_id   String?                @db.Uuid
  created_at           DateTime               @default(now()) @db.Timestamp(6)
  updated_at           DateTime               @default(now()) @db.Timestamp(6)
  published_at         DateTime?              @db.Timestamp(6)
  archived_at          DateTime?              @db.Timestamp(6)
  artifact_comments    artifact_comments[]
  artifact_permissions artifact_permissions[]
  artifact_versions    artifact_versions[]
  schools              schools?               @relation(fields: [school_id], references: [id], onUpdate: NoAction, map: "artifacts_school_id_schools_id_fk")
}

model conversations {
  id            String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id       String          @db.Uuid
  module        String          @db.VarChar(50)
  subject       String?         @db.VarChar(100)
  grade         String?         @db.VarChar(50)
  messages      Json
  token_count   Int             @default(0)
  model         String?         @default("gpt-4o-mini") @db.VarChar(50)
  created_at    DateTime        @default(now()) @db.Timestamp(6)
  updated_at    DateTime        @default(now()) @db.Timestamp(6)
  message_votes message_votes[]

  @@unique([user_id, created_at], map: "idx_conversations_user_created")
}

model cost_log {
  id                String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id           String?  @db.Uuid
  lesson_id         String?  @db.VarChar(50)
  provider          String   @db.VarChar(50)
  model             String   @db.VarChar(100)
  prompt_tokens     Int      @default(0)
  completion_tokens Int      @default(0)
  total_tokens      Int      @default(0)
  cost_usd          Decimal  @default(0) @db.Decimal(10, 6)
  cost_brl          Decimal  @default(0) @db.Decimal(10, 6)
  created_at        DateTime @default(now()) @db.Timestamp(6)
  lessons           lessons? @relation(fields: [lesson_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "cost_log_lesson_id_lessons_id_fk")
}

model demo_registrations {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String   @db.VarChar(255)
  email         String   @unique(map: "unique_demo_email") @db.VarChar(255)
  phone         String   @unique(map: "unique_demo_phone") @db.VarChar(15)
  registered_at DateTime @default(now()) @db.Timestamp(6)
  expires_at    DateTime @db.Timestamp(6)
  created_at    DateTime @default(now()) @db.Timestamp(6)
  updated_at    DateTime @default(now()) @db.Timestamp(6)

  @@index([expires_at], map: "idx_demo_expires_at")
}

model enemQuestion {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  area       String   @db.VarChar(50)
  disciplina String   @db.VarChar(100)
  stem       String
  a          String
  b          String
  c          String
  d          String
  e          String
  correct    String   @db.VarChar(1)
  source     String   @default("Manual") @db.VarChar(50)
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)

  @@index([area], map: "idx_enem_questions_area")
  @@index([disciplina], map: "idx_enem_questions_disciplina")
}

model enemSession {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId       String   @db.Uuid
  area         String   @db.VarChar(50)
  numQuestions Int
  durationMs   Int
  startedAt    DateTime @db.Timestamp(6)
  finishedAt   DateTime @db.Timestamp(6)
  questions    Json
  answers      Json
  score        Float?
  created_at   DateTime @default(now()) @db.Timestamp(6)
  updated_at   DateTime @default(now()) @db.Timestamp(6)

  @@index([userId], map: "idx_enem_sessions_user")
  @@index([area], map: "idx_enem_sessions_area")
}

model errors {
  error_id    String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  occurred_at DateTime         @default(now()) @db.Timestamptz(6)
  tenant_id   String?
  level       error_level_enum
  service     service_enum
  route       String?
  module      String?
  message     String
  stack_hash  String
  metadata    Json?
  created_at  DateTime         @default(now()) @db.Timestamptz(6)

  @@unique([level, occurred_at], map: "idx_errors_level_time")
  @@unique([service, occurred_at], map: "idx_errors_service_time")
  @@index([occurred_at], map: "idx_errors_occurred_at")
  @@index([stack_hash], map: "idx_errors_stack_hash")
  @@index([tenant_id], map: "idx_errors_tenant_id")
}

model essay_overall_scores {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  session_id String   @db.Uuid
  total      Int?
  comp1      Int?
  comp2      Int?
  comp3      Int?
  comp4      Int?
  comp5      Int?
  issues     Json?
  created_at DateTime @default(now()) @db.Timestamp(6)

  @@index([session_id], map: "idx_essay_overall_scores_session")
}

model essay_paragraphs {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  session_id String   @db.Uuid
  idx        Int
  content    String
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)

  @@index([session_id], map: "idx_essay_paragraphs_session")
}

model essay_sessions {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id      String?   @db.Uuid
  topic_prompt String
  area         String    @default("Linguagens") @db.VarChar(50)
  status       String    @default("in_progress") @db.VarChar(20)
  created_at   DateTime  @default(now()) @db.Timestamp(6)
  updated_at   DateTime  @default(now()) @db.Timestamp(6)
  expires_at   DateTime? @db.Timestamp(6)

  @@index([user_id, created_at], map: "idx_essay_sessions_user_created")
}

model events {
  event_id    String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  occurred_at DateTime     @default(now()) @db.Timestamptz(6)
  tenant_id   String
  user_id     String?
  session_id  String
  channel     channel_enum
  route       String?
  module      String?
  action      action_enum
  latency_ms  Int?
  status_code Int?
  metadata    Json?
  created_at  DateTime     @default(now()) @db.Timestamptz(6)

  @@unique([tenant_id, occurred_at], map: "idx_events_tenant_occurred")
  @@index([action], map: "idx_events_action")
  @@index([occurred_at], map: "idx_events_occurred_at")
  @@index([tenant_id], map: "idx_events_tenant_id")
  @@index([user_id], map: "idx_events_user_id")
}

model feature_flags {
  name        String   @id @db.VarChar(100)
  enabled     Boolean  @default(false)
  description String?
  updated_at  DateTime @default(now()) @db.Timestamp(6)
}

model jobs {
  job_id        String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  queued_at     DateTime   @default(now()) @db.Timestamptz(6)
  started_at    DateTime?  @db.Timestamptz(6)
  finished_at   DateTime?  @db.Timestamptz(6)
  type          String
  status        job_status @default(queued)
  attempts      Int        @default(0)
  duration_ms   Int?
  metadata      Json?
  error_message String?
  created_at    DateTime   @default(now()) @db.Timestamp(6)
}

model learning_paths {
  id                String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id           String   @db.Uuid
  subject           String   @db.VarChar(100)
  title             String   @db.VarChar(255)
  description       String?
  lessons           Json
  mastery_threshold Decimal  @default(0.8) @db.Decimal(3, 2)
  is_active         Boolean  @default(true)
  created_at        DateTime @default(now()) @db.Timestamp(6)
  updated_at        DateTime @default(now()) @db.Timestamp(6)

  @@unique([user_id, subject], map: "unique_user_subject_path")
}

model lesson_meta {
  id         String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  lesson_id  String        @unique(map: "lesson_meta_lesson_id_unique") @db.VarChar(50)
  state      publish_state @default(DRAFT)
  version    Int           @default(1)
  changelog  String?
  updated_by String        @db.Uuid
  updated_at DateTime      @default(now()) @db.Timestamp(6)
  lessons    lessons       @relation(fields: [lesson_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "lesson_meta_lesson_id_lessons_id_fk")
}

model lesson_progress {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String   @db.Uuid
  lesson_id  String   @db.VarChar(50)
  card_id    String   @db.VarChar(50)
  completed  Boolean  @default(false)
  progress   Json?
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)

  @@unique([user_id, lesson_id, card_id], map: "unique_user_lesson_card")
}

model lessons {
  id            String          @id @db.VarChar(50)
  title         String          @db.VarChar(255)
  subject       String          @db.VarChar(100)
  level         String?         @db.VarChar(50)
  objective     String
  outline       Json
  cards         Json
  html_snapshot String?
  user_id       String?         @db.Uuid
  created_at    DateTime        @default(now()) @db.Timestamp(6)
  updated_at    DateTime        @default(now()) @db.Timestamp(6)
  cost_log      cost_log[]
  lesson_meta   lesson_meta?
  quiz_attempts quiz_attempts[]
  quiz_items    quiz_items[]
}

model mastery {
  user_id    String   @db.Uuid
  tag        String   @db.VarChar(100)
  score      Decimal  @default(0.0) @db.Decimal(3, 2)
  updated_at DateTime @default(now()) @db.Timestamp(6)

  @@unique([user_id, tag], map: "pk_mastery")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model message_votes {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  conversation_id String        @db.Uuid
  message_index   Int
  user_id         String        @db.Uuid
  is_upvoted      Boolean
  created_at      DateTime      @default(now()) @db.Timestamp(6)
  updated_at      DateTime      @default(now()) @db.Timestamp(6)
  conversations   conversations @relation(fields: [conversation_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "message_votes_conversation_id_conversations_id_fk")

  @@unique([conversation_id, message_index, user_id], map: "uq_message_vote")
  @@index([conversation_id], map: "idx_message_votes_conversation_id")
  @@index([created_at], map: "idx_message_votes_created_at")
  @@index([user_id], map: "idx_message_votes_user_id")
}

model models {
  id              String   @id @db.VarChar(100)
  name            String   @db.VarChar(255)
  available       Boolean  @default(true)
  is_default      Boolean  @default(false)
  cost_per_input  Int?     @default(0)
  cost_per_output Int?     @default(0)
  created_at      DateTime @default(now()) @db.Timestamp(6)
  updated_at      DateTime @default(now()) @db.Timestamp(6)
}

model moderation_events {
  id           String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  occurred_at  DateTime          @default(now()) @db.Timestamptz(6)
  tenant_id    String
  user_id      String?
  type         moderation_type
  action_taken moderation_action
  content      String?
  metadata     Json?
  created_at   DateTime          @default(now()) @db.Timestamp(6)
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model neon_consumption_daily {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  date       DateTime @db.Date
  scope      String
  org_id     String?
  project_id String?
  metric     String
  agg        String
  value      Float
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @db.Timestamptz(6)

  @@unique([date, scope, org_id, project_id, metric, agg], map: "idx_neon_consumption_daily_unique")
  @@index([date], map: "idx_neon_consumption_daily_date")
  @@index([metric], map: "idx_neon_consumption_daily_metric")
  @@index([org_id], map: "idx_neon_consumption_daily_org_id")
  @@index([project_id], map: "idx_neon_consumption_daily_project_id")
  @@index([scope], map: "idx_neon_consumption_daily_scope")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model neon_consumption_raw {
  id                           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  collected_at                 DateTime @default(now()) @db.Timestamptz(6)
  window_start                 DateTime @db.Timestamptz(6)
  window_end                   DateTime @db.Timestamptz(6)
  scope                        String
  org_id                       String?
  project_id                   String?
  granularity                  String
  active_time_seconds          Float?
  compute_time_seconds         Float?
  written_data_bytes           BigInt?
  data_transfer_bytes          BigInt?
  synthetic_storage_size_bytes BigInt?
  metadata                     Json?    @default("{}")
  created_at                   DateTime @default(now()) @db.Timestamptz(6)

  @@unique([scope, org_id, project_id, window_start, window_end], map: "idx_neon_consumption_raw_unique")
  @@index([collected_at], map: "idx_neon_consumption_raw_collected_at")
  @@index([org_id], map: "idx_neon_consumption_raw_org_id")
  @@index([project_id], map: "idx_neon_consumption_raw_project_id")
  @@index([scope], map: "idx_neon_consumption_raw_scope")
  @@index([window_end], map: "idx_neon_consumption_raw_window_end")
  @@index([window_start], map: "idx_neon_consumption_raw_window_start")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model neon_consumption_sync_log {
  id                String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  started_at        DateTime  @default(now()) @db.Timestamptz(6)
  completed_at      DateTime? @db.Timestamptz(6)
  status            String
  window_start      DateTime  @db.Timestamptz(6)
  window_end        DateTime  @db.Timestamptz(6)
  scopes_processed  Int       @default(0)
  records_collected Int       @default(0)
  errors_count      Int       @default(0)
  error_details     Json?     @default("{}")
  duration_ms       Int?
  created_at        DateTime  @default(now()) @db.Timestamptz(6)

  @@index([started_at], map: "idx_neon_consumption_sync_log_started_at")
  @@index([status], map: "idx_neon_consumption_sync_log_status")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model openai_models_latency_daily {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  date           DateTime @db.Timestamptz(6)
  tenant_id      String?
  model          String
  latency_ms_p50 Int
  latency_ms_p95 Int
  latency_ms_avg Int
  source         String
  synced_at      DateTime @default(now()) @db.Timestamptz(6)
  created_at     DateTime @default(now()) @db.Timestamptz(6)

  @@unique([date, tenant_id, model], map: "idx_openai_models_latency_daily_unique")
  @@index([date], map: "idx_openai_models_latency_daily_date")
  @@index([model], map: "idx_openai_models_latency_daily_model")
  @@index([synced_at], map: "idx_openai_models_latency_daily_synced_at")
  @@index([tenant_id], map: "idx_openai_models_latency_daily_tenant_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model openai_usage_daily {
  id                String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  date              DateTime @db.Timestamptz(6)
  tenant_id         String?
  model             String
  requests          Int
  prompt_tokens     Int
  completion_tokens Int
  total_tokens      Int
  cost_usd          String
  cost_brl          String
  source            String
  synced_at         DateTime @default(now()) @db.Timestamptz(6)
  created_at        DateTime @default(now()) @db.Timestamptz(6)

  @@unique([date, tenant_id, model, source], map: "idx_openai_usage_daily_unique")
  @@unique([tenant_id, date, model], map: "uq_openai_daily_tenant_date_model")
  @@index([date], map: "idx_openai_usage_daily_date")
  @@index([model], map: "idx_openai_usage_daily_model")
  @@index([source], map: "idx_openai_usage_daily_source")
  @@index([synced_at], map: "idx_openai_usage_daily_synced_at")
  @@index([tenant_id], map: "idx_openai_usage_daily_tenant_id")
}

model paragraph_feedback {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  session_id   String   @db.Uuid
  paragraph_id String   @db.Uuid
  idx          Int
  comp1        Int?
  comp2        Int?
  comp3        Int?
  comp4        Int?
  comp5        Int?
  suggestions  Json?
  summary_note String?
  ai_model     String?  @db.VarChar(50)
  created_at   DateTime @default(now()) @db.Timestamp(6)

  @@index([session_id], map: "idx_paragraph_feedback_session")
}

model quiz_attempts {
  id         String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String     @db.Uuid
  lesson_id  String     @db.VarChar(50)
  item_id    String     @db.VarChar(50)
  choice     Int
  correct    Boolean
  confidence Int?
  ms_taken   Int?
  tags       Json?
  created_at DateTime   @default(now()) @db.Timestamp(6)
  quiz_items quiz_items @relation(fields: [item_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "quiz_attempts_item_id_quiz_items_id_fk")
  lessons    lessons    @relation(fields: [lesson_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "quiz_attempts_lesson_id_lessons_id_fk")

  @@unique([user_id, lesson_id], map: "idx_quiz_attempts_user_lesson")
}

model quiz_items {
  id            String          @id @db.VarChar(50)
  stem          String
  choices       Json
  correct_index Int
  rationale     String?
  tags          Json?
  difficulty    String?         @default("medium") @db.VarChar(20)
  lesson_id     String?         @db.VarChar(50)
  user_id       String?         @db.Uuid
  created_at    DateTime        @default(now()) @db.Timestamp(6)
  updated_at    DateTime        @default(now()) @db.Timestamp(6)
  quiz_attempts quiz_attempts[]
  lessons       lessons?        @relation(fields: [lesson_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "quiz_items_lesson_id_lessons_id_fk")
}

model quotas {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id     String    @db.Uuid
  month       String    @db.VarChar(7)
  token_limit Int       @default(100000)
  token_used  Int       @default(0)
  created_at  DateTime  @default(now()) @db.Timestamp(6)
  updated_at  DateTime? @default(now()) @db.Timestamp(6)

  @@unique([month, user_id], map: "idx_quotas_month_user")
  @@unique([user_id, month], map: "uq_quotas_user_month")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model render_metrics_daily {
  id         String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  date       DateTime  @db.Date
  service_id String
  metric     String
  agg        String
  value      Float
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @default(now()) @db.Timestamptz(6)

  @@unique([date, service_id, metric, agg], map: "idx_render_metrics_daily_unique")
  @@index([agg], map: "idx_render_metrics_daily_agg")
  @@index([date], map: "idx_render_metrics_daily_date")
  @@index([metric], map: "idx_render_metrics_daily_metric")
  @@index([service_id], map: "idx_render_metrics_daily_service_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model render_metrics_raw {
  id           String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  collected_at DateTime  @default(now()) @db.Timestamptz(6)
  window_start DateTime  @db.Timestamptz(6)
  window_end   DateTime  @db.Timestamptz(6)
  service_id   String
  metric       String
  labels       Json?     @default("{}")
  value        Float
  units        String?
  created_at   DateTime? @default(now()) @db.Timestamptz(6)

  @@unique([service_id, metric, window_start, window_end, labels], map: "idx_render_metrics_raw_unique")
  @@index([collected_at], map: "idx_render_metrics_raw_collected_at")
  @@index([metric], map: "idx_render_metrics_raw_metric")
  @@index([service_id], map: "idx_render_metrics_raw_service_id")
  @@index([window_end], map: "idx_render_metrics_raw_window_end")
  @@index([window_start], map: "idx_render_metrics_raw_window_start")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model render_metrics_sync_log {
  id                 String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  started_at         DateTime  @default(now()) @db.Timestamptz(6)
  completed_at       DateTime? @db.Timestamptz(6)
  status             String
  window_start       DateTime  @db.Timestamptz(6)
  window_end         DateTime  @db.Timestamptz(6)
  services_processed Int?      @default(0)
  metrics_collected  Int?      @default(0)
  errors_count       Int?      @default(0)
  error_details      Json?     @default("{}")
  duration_ms        Int?
  created_at         DateTime? @default(now()) @db.Timestamptz(6)

  @@index([started_at], map: "idx_render_metrics_sync_log_started_at")
  @@index([status], map: "idx_render_metrics_sync_log_status")
}

model school_forms {
  id                                   String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  school_name                          String    @db.VarChar(100)
  address                              String    @db.VarChar(200)
  city                                 String    @db.VarChar(100)
  state                                String    @db.VarChar(50)
  cep                                  String    @db.VarChar(10)
  phone                                String    @db.VarChar(15)
  website                              String?   @db.VarChar(255)
  student_count                        Int
  teacher_count                        Int
  education_levels                     Json
  school_type                          String    @db.VarChar(20)
  mission_vision                       String?
  general_particularities              String?
  infrastructure                       Json
  current_challenges                   Json
  secretariat_responsible_name         String    @db.VarChar(100)
  secretariat_responsible_email        String    @db.VarChar(255)
  secretariat_main_processes           Json
  secretariat_specific_particularities String?
  secretariat_desired_automations      Json
  secretariat_weekly_attendance_volume Int?
  secretariat_pain_points              Json
  financial_responsible_name           String    @db.VarChar(100)
  financial_responsible_email          String    @db.VarChar(255)
  financial_main_processes             Json
  financial_specific_particularities   String?
  financial_current_tools              String?   @db.VarChar(200)
  financial_cost_reduction_goals       String    @db.VarChar(50)
  financial_cost_reduction_details     String?
  financial_challenges                 Json
  pedagogical_responsible_name         String    @db.VarChar(100)
  pedagogical_responsible_email        String    @db.VarChar(255)
  pedagogical_main_processes           Json
  pedagogical_specific_particularities String?
  pedagogical_ai_support_needs         Json
  pedagogical_predominant_age_group    String    @db.VarChar(30)
  pedagogical_age_group_details        String?
  pedagogical_challenges               Json
  hr_responsible_name                  String    @db.VarChar(100)
  hr_responsible_email                 String    @db.VarChar(255)
  hr_main_processes                    Json
  hr_specific_particularities          String?
  hr_employee_count                    Int
  hr_wellbeing_initiatives             Json
  hr_wellbeing_details                 String?
  hr_challenges                        Json
  lgpd_compliance                      Boolean
  preferred_contact_method             String    @db.VarChar(20)
  urgency_level                        String    @db.VarChar(20)
  expected_implementation              String    @db.VarChar(20)
  final_comments                       String?
  submitted_at                         DateTime  @default(now()) @db.Timestamp(6)
  status                               String    @default("PENDING") @db.VarChar(20)
  processed_at                         DateTime? @db.Timestamp(6)
  report_content                       String?
  created_at                           DateTime  @default(now()) @db.Timestamp(6)
  updated_at                           DateTime  @default(now()) @db.Timestamp(6)
}

model school_prompts {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  school_id  String   @db.Uuid
  module     String   @db.VarChar(50)
  prompt     String
  is_active  Boolean  @default(true)
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  schools    schools  @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "school_prompts_school_id_schools_id_fk")
}

model schools {
  id                         String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  domain                     String            @unique(map: "schools_domain_unique") @db.VarChar(255)
  name                       String            @db.VarChar(255)
  logo_url                   String?           @db.VarChar(500)
  policies                   Json?
  plan                       plan              @default(PROFESSOR)
  primary_color              String?           @default("#3b82f6") @db.VarChar(7)
  secondary_color            String?           @default("#6366f1") @db.VarChar(7)
  support_email              String?           @db.VarChar(255)
  general_prompt             String?
  general_system_message     String?
  general_message_updated_by String?           @db.Uuid
  general_message_updated_at DateTime?         @db.Timestamp(6)
  city                       String?           @db.VarChar(100)
  state                      String?           @db.VarChar(100)
  created_at                 DateTime          @default(now()) @db.Timestamp(6)
  updated_at                 DateTime          @default(now()) @db.Timestamp(6)
  analytics                  analytics[]
  artifacts                  artifacts[]
  school_prompts             school_prompts[]
  support_tickets            support_tickets[]
}

model sensory_profiles {
  id                  String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id             String   @unique(map: "unique_user_sensory_profile") @db.Uuid
  reduce_motion       Boolean  @default(false)
  low_stimulus_theme  Boolean  @default(false)
  high_contrast_text  Boolean  @default(false)
  audio_on_by_default Boolean  @default(false)
  captions            Boolean  @default(true)
  larger_targets      Boolean  @default(false)
  simplified_layout   Boolean  @default(false)
  pictograms_enabled  Boolean  @default(false)
  created_at          DateTime @default(now()) @db.Timestamp(6)
  updated_at          DateTime @default(now()) @db.Timestamp(6)
}

model support_tickets {
  id                    String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id               String          @db.Uuid
  school_id             String?         @db.Uuid
  subject               String          @db.VarChar(200)
  description           String
  priority              ticket_priority @default(MEDIA)
  status                ticket_status   @default(ABERTO)
  conversation_snapshot Json?
  created_at            DateTime        @default(now()) @db.Timestamp(6)
  updated_at            DateTime        @default(now()) @db.Timestamp(6)
  schools               schools?        @relation(fields: [school_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "support_tickets_school_id_schools_id_fk")

  @@index([school_id], map: "idx_support_tickets_school")
  @@index([status], map: "idx_support_tickets_status")
  @@index([user_id], map: "idx_support_tickets_user")
}

model system_messages {
  id                    String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  module                String   @unique(map: "system_messages_module_unique") @db.VarChar(50)
  system_prompt         String
  description           String?
  is_active             Boolean  @default(true)
  temperature           Int?     @default(7)
  max_tokens            Int?     @default(1000)
  max_completion_tokens Int?     @default(800)
  tone                  String?  @db.VarChar(100)
  created_at            DateTime @default(now()) @db.Timestamp(6)
  updated_at            DateTime @default(now()) @db.Timestamp(6)
}

model system_prompt_audit {
  id         String        @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar(100)
  key        String        @db.VarChar(255)
  scope      prompt_scope
  action     prompt_action
  version    Int
  diff       Json?
  actor_id   String        @db.VarChar(100)
  created_at DateTime      @default(now()) @db.Timestamp(6)
}

model system_prompt_history {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar(100)
  prompt_id   String        @db.VarChar(100)
  key         String        @db.VarChar(255)
  scope       prompt_scope
  model       String        @db.VarChar(100)
  status      prompt_status
  version     Int
  json        Json
  description String?
  changed_by  String        @db.VarChar(100)
  changed_at  DateTime      @default(now()) @db.Timestamp(6)
}

model system_prompts {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar(100)
  key         String        @db.VarChar(255)
  scope       prompt_scope  @default(production)
  model       String        @default("gpt-4o-mini") @db.VarChar(100)
  status      prompt_status @default(draft)
  version     Int           @default(1)
  json        Json
  description String?
  created_by  String        @db.VarChar(100)
  created_at  DateTime      @default(now()) @db.Timestamp(6)
  updated_at  DateTime      @default(now()) @db.Timestamp(6)
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model tenant_quotas {
  tenant_id      String
  period_start   DateTime @db.Timestamptz(6)
  period_end     DateTime @db.Timestamptz(6)
  requests_used  Int      @default(0)
  requests_quota Int
  tokens_used    Int      @default(0)
  tokens_quota   Int
  cost_brl       String?  @default("0")
  cost_quota     String
  created_at     DateTime @default(now()) @db.Timestamp(6)
  updated_at     DateTime @default(now()) @db.Timestamp(6)

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model uptime_checks {
  ts         DateTime      @default(now()) @db.Timestamptz(6)
  service    service
  region     String?
  status     uptime_status
  latency_ms Int
  metadata   Json?
  created_at DateTime      @default(now()) @db.Timestamp(6)

  @@ignore
}

model user_achievements {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id        String   @db.Uuid
  achievement_id String   @db.VarChar(50)
  unlocked_at    DateTime @default(now()) @db.Timestamp(6)
  session_id     String?  @db.VarChar(100)
  metadata       Json?

  @@unique([user_id, achievement_id], map: "unique_user_achievement")
}

model user_profiles {
  id               String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id          String   @unique(map: "unique_user_profile") @db.Uuid
  badges           Json     @default("[]")
  streak           Int      @default(0)
  points           Int      @default(0)
  total_study_time Int      @default(0)
  avatar           String?  @db.VarChar(255)
  preferences      Json     @default("{}")
  created_at       DateTime @default(now()) @db.Timestamp(6)
  updated_at       DateTime @default(now()) @db.Timestamp(6)
}

model user_session_stats {
  id                String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id           String    @db.Uuid
  session_id        String    @db.VarChar(100)
  queries_completed Int       @default(0)
  modules_explored  Int       @default(0)
  session_duration  Int       @default(0)
  quizzes_completed Int       @default(0)
  last_activity     DateTime  @default(now()) @db.Timestamp(6)
  session_start     DateTime  @default(now()) @db.Timestamp(6)
  session_end       DateTime? @db.Timestamp(6)
  metadata          Json?

  @@unique([user_id, session_id], map: "unique_user_session")
}

model user_sessions {
  id               String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id          String    @db.Uuid
  session_start    DateTime? @default(now()) @db.Timestamp(6)
  session_end      DateTime? @db.Timestamp(6)
  session_duration Int?
  question_count   Int?      @default(0)
  is_active        Boolean?  @default(true)
  last_activity    DateTime? @default(now()) @db.Timestamp(6)
  ip_address       String?   @db.VarChar(45)
  user_agent       String?
  created_at       DateTime? @default(now()) @db.Timestamp(6)
}

model webhook_calls {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  occurred_at DateTime @default(now()) @db.Timestamptz(6)
  provider    String
  event_type  String
  success     Boolean
  latency_ms  Int
  status_code Int
  retries     Int      @default(0)
  metadata    Json?
  created_at  DateTime @default(now()) @db.Timestamp(6)
}

enum achievement_category {
  engagement
  learning
  exploration
  consistency
  social
  challenges
  collection
}

enum action {
  message_sent
  module_selected
  login
  signup
  logout
  file_upload
  web_search
  vote_up
  vote_down
  session_start
  session_end
  error_occurred
  quota_exceeded
}

enum action_enum {
  page_view
  button_click
  form_submit
  api_call
  login
  logout
  signup
  password_reset
  profile_update
  message_sent
  message_received
  module_selected
  file_upload
  search
  filter
  export
  import
  delete
  update
  create
  error
  warning
  info
  debug
  health_check
  sync
  backup
}

enum age_group {
  INFANTIL
  FUNDAMENTAL
  MEDIO
}

enum ai_support_need {
  TUTOR_DUVIDAS_ALUNOS
  GERACAO_PLANOS_AULA
  OUTROS
}

enum artifact_status {
  DRAFT
  PUBLISHED
  ARCHIVED
  SHARED
}

enum artifact_type {
  DOCUMENT
  SPREADSHEET
  PRESENTATION
  QUIZ
  ASSESSMENT
  REPORT
  TEMPLATE
}

enum channel {
  web
  whatsapp
  api
  mobile
}

enum channel_enum {
  web
  whatsapp
  api
  mobile
}

enum cost_reduction_goal {
  ATE_30_PORCENTO
  ATE_50_PORCENTO
  ATE_70_PORCENTO
  MAIS_70_PORCENTO
}

enum document_type {
  LESSON_PLAN
  WORKSHEET
  ASSIGNMENT
  RUBRIC
  SYLLABUS
  REPORT_CARD
  CERTIFICATE
  NEWSLETTER
}

enum education_level {
  EDUCACAO_INFANTIL
  FUNDAMENTAL_I
  FUNDAMENTAL_II
  ENSINO_MEDIO
  TECNICO
}

enum error_level {
  error
  warn
  info
}

enum error_level_enum {
  error
  warn
  info
  debug
}

enum feature_flag {
  TTS
  VOICE_CONTROL
  SIMULATIONS
  OFFLINE_MODE
  ADAPTIVE_LEARNING
}

enum financial_process {
  COBRANCA_MENSALIDADES
  CONTROLE_ORCAMENTO
  PAGAMENTOS_FORNECEDORES
  RELATORIOS_FINANCEIROS
}

enum hr_process {
  RECRUTAMENTO
  TREINAMENTO
  FOLHA_PAGAMENTO
  AVALIACAO_EQUIPE
}

enum job_status {
  queued
  running
  done
  failed
  cancelled
}

enum lesson_card_type {
  reading
  math
  quiz
  flashcards
  video
  code
  whiteboard
  assignment
}

enum moderation_action {
  blocked
  warned
  logged
  flagged
}

enum moderation_action_enum {
  allow
  block
  flag
  review
  auto_moderate
}

enum moderation_type {
  hate
  self_harm
  violence
  sexual
  spam
  other
}

enum pedagogical_process {
  PLANEJAMENTO_AULAS
  AVALIACAO_DESEMPENHO
  SUPORTE_PROFESSORES
  ALINHAMENTO_BNCC
}

enum permission_level {
  LEITURA
  EDICAO
  ADMINISTRADOR
}

enum plan {
  PROFESSOR
  FULL
}

enum prompt_action {
  create
  update
  publish
  rollback
  archive
  delete
}

enum prompt_scope {
  production
  staging
  development
}

enum prompt_status {
  draft
  active
  archived
}

enum publish_state {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum role {
  STUDENT
  TEACHER
  STAFF
  ADMIN
  SUPER_ADMIN
}

enum secretariat_automation {
  AUTOMATIZAR_CONSULTAS_PAIS
  GERAR_RELATORIOS_FREQUENCIA
  OUTROS
}

enum secretariat_process {
  MATRICULAS
  ATENDIMENTO_PAIS
  GERENCIAMENTO_DOCUMENTOS
  OUTROS
}

enum service {
  web
  server
  worker
  api
}

enum service_enum {
  web
  server
  worker
  api
  cron
  sync
}

enum ticket_priority {
  BAIXA
  MEDIA
  ALTA
  CRITICA
}

enum ticket_status {
  ABERTO
  EM_ANDAMENTO
  RESOLVIDO
  FECHADO
}

enum uptime_status {
  up
  down
  degraded
}

enum uptime_status_enum {
  up
  down
  degraded
  maintenance
}

enum wellbeing_initiative {
  PROGRAMAS_SAUDE_MENTAL
  TREINAMENTOS_IA
  OUTROS
}
