#!/usr/bin/env node

/**
 * Script de Teste: Gera√ß√£o de Aula com Google Gemini 2.0 Flash Exp
 * 
 * Testa se a mudan√ßa de provedor para Google Gemini est√° funcionando
 * 
 * Execu√ß√£o: node test-gemini-lesson.js
 */

const BASE_URL = process.env.NEXTAUTH_URL || 'http://localhost:3000';

// T√≥pico de teste
const TEST_TOPIC = 'Fotoss√≠ntese: Como as plantas convertem luz solar em energia qu√≠mica';

// Fun√ß√£o para fazer requisi√ß√£o HTTP
async function makeRequest(url, data) {
  const fetch = (await import('node-fetch')).default;
  
  const response = await fetch(url, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify(data)
  });

  if (!response.ok) {
    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
  }

  return response.json();
}

// Fun√ß√£o para testar gera√ß√£o de aula
async function testGeminiLessonGeneration() {
  console.log('üöÄ TESTE DE GERA√á√ÉO DE AULA COM GOOGLE GEMINI');
  console.log('=' .repeat(60));
  console.log(`üìÖ Data: ${new Date().toLocaleString('pt-BR')}`);
  console.log(`üåê Servidor: ${BASE_URL}`);
  console.log(`üìù T√≥pico: ${TEST_TOPIC}`);
  console.log('=' .repeat(60));

  // Verificar se o servidor est√° rodando
  try {
    console.log('üîç Verificando servidor...');
    const healthResponse = await makeRequest(`${BASE_URL}/api/health`);
    console.log('‚úÖ Servidor est√° rodando');
  } catch (error) {
    console.error('‚ùå Servidor n√£o est√° acess√≠vel:', BASE_URL);
    console.error('   Certifique-se de que o servidor est√° rodando com: npm run dev');
    process.exit(1);
  }

  const startTime = Date.now();
  
  try {
    console.log('\nüß™ Testando gera√ß√£o de aula com Google Gemini...');
    console.log(`üìù T√≥pico: ${TEST_TOPIC}`);
    
    const requestData = {
      topic: TEST_TOPIC,
      demoMode: true, // Usar modo demo para n√£o salvar no banco
      provider: 'google', // Usar Google Gemini
      complexity: 'simple' // Usar complexidade simples para velocidade
    };

    const response = await makeRequest(`${BASE_URL}/api/generate-lesson-multi`, requestData);
    const endTime = Date.now();
    const duration = endTime - startTime;

    // Verificar se a resposta cont√©m dados v√°lidos
    if (response && response.success && response.lesson) {
      console.log(`‚úÖ Sucesso em ${duration}ms (${(duration/1000).toFixed(1)}s)`);
      
      const lesson = response.lesson;
      console.log('\nüìä DADOS DA AULA GERADA:');
      console.log(`ü§ñ Provedor: ${response.provider || 'N/A'}`);
      console.log(`‚ö° Complexidade: ${response.complexity || 'N/A'}`);
      console.log(`üìö T√≠tulo: ${lesson.title}`);
      console.log(`üéØ Assunto: ${lesson.subject}`);
      console.log(`üìñ S√©rie: ${lesson.grade}`);
      console.log(`üéØ Objetivos: ${lesson.objectives?.length || 0}`);
      console.log(`üìã Slides: ${lesson.slides?.length || 0}`);
      console.log(`üéÆ Etapas: ${lesson.stages?.length || 0}`);
      
      if (lesson.slides && lesson.slides.length > 0) {
        console.log('\nüìã PRIMEIROS SLIDES:');
        lesson.slides.slice(0, 3).forEach((slide, index) => {
          console.log(`   ${index + 1}. ${slide.title} (${slide.type})`);
        });
      }
      
      if (lesson.stages && lesson.stages.length > 0) {
        console.log('\nüéÆ ETAPAS DA AULA:');
        lesson.stages.forEach((stage, index) => {
          console.log(`   ${index + 1}. ${stage.etapa} (${stage.type})`);
        });
      }
      
      // Verificar m√©tricas de pacing profissional
      if (response.pacingMetrics) {
        console.log('\n‚ö° M√âTRICAS DE PACING PROFISSIONAL:');
        console.log(`   üìä Pontua√ß√£o geral: ${response.pacingMetrics.overallScore || 'N/A'}`);
        console.log(`   ‚è±Ô∏è  Dura√ß√£o estimada: ${response.pacingMetrics.estimatedDuration || 'N/A'} min`);
        console.log(`   üéØ Densidade de conte√∫do: ${response.pacingMetrics.contentDensity || 'N/A'}`);
      }
      
      // Verificar warnings
      if (response.warnings && response.warnings.length > 0) {
        console.log('\n‚ö†Ô∏è  WARNINGS:');
        response.warnings.forEach(warning => {
          console.log(`   - ${warning}`);
        });
      }
      
      console.log('\nüéâ TESTE CONCLU√çDO COM SUCESSO!');
      console.log(`‚ö° Google Gemini 2.0 Flash Exp funcionando corretamente`);
      console.log(`‚è±Ô∏è  Tempo de gera√ß√£o: ${duration}ms (${(duration/1000).toFixed(1)}s)`);
      
      return {
        success: true,
        duration,
        lesson: response.lesson,
        pacingMetrics: response.pacingMetrics,
        warnings: response.warnings
      };
      
    } else {
      throw new Error('Resposta inv√°lida da API');
    }

  } catch (error) {
    const endTime = Date.now();
    const duration = endTime - startTime;
    
    console.log(`‚ùå Falha em ${duration}ms: ${error.message}`);
    console.log('\nüîß POSS√çVEIS SOLU√á√ïES:');
    console.log('   1. Verificar se GOOGLE_GENERATIVE_AI_API_KEY est√° configurada no .env.local');
    console.log('   2. Verificar se o servidor est√° rodando corretamente');
    console.log('   3. Verificar logs do servidor para mais detalhes');
    
    return {
      success: false,
      duration,
      error: error.message
    };
  }
}

// Executar teste
async function main() {
  try {
    const result = await testGeminiLessonGeneration();
    
    if (result.success) {
      console.log('\n‚úÖ RESULTADO: Google Gemini est√° funcionando!');
      process.exit(0);
    } else {
      console.log('\n‚ùå RESULTADO: Teste falhou');
      process.exit(1);
    }
  } catch (error) {
    console.error('‚ùå Erro durante o teste:', error);
    process.exit(1);
  }
}

if (require.main === module) {
  main();
}

module.exports = { testGeminiLessonGeneration };
