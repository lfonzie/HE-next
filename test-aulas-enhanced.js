#!/usr/bin/env node
// test-aulas-enhanced.js
// Script de teste para o Sistema de Aulas Aprimorado

const axios = require('axios');

const BASE_URL = process.env.NEXTAUTH_URL || 'http://localhost:3000';

// Configura√ß√µes de teste
const TEST_CONFIGS = [
  {
    name: 'Teste B√°sico - Fotoss√≠ntese',
    data: {
      topic: 'Fotoss√≠ntese',
      mode: 'sync'
    }
  },
  {
    name: 'Teste Ass√≠ncrono - Matem√°tica',
    data: {
      topic: 'Equa√ß√µes Quadr√°ticas',
      mode: 'async'
    }
  },
  {
    name: 'Teste Customizado - Hist√≥ria',
    data: {
      topic: 'Revolu√ß√£o Francesa',
      mode: 'sync',
      schoolId: 'test-school-123',
      customPrompt: 'Foque em causas econ√¥micas e sociais'
    }
  }
];

// Fun√ß√£o para testar gera√ß√£o de aula
async function testLessonGeneration(config) {
  console.log(`\nüß™ ${config.name}`);
  console.log('=' .repeat(50));
  
  try {
    const startTime = Date.now();
    
    const response = await axios.post(`${BASE_URL}/api/aulas/generate`, config.data, {
      headers: { 'Content-Type': 'application/json' },
      timeout: 60000 // 60 segundos
    });
    
    const endTime = Date.now();
    const duration = endTime - startTime;
    
    if (response.data.success) {
      console.log('‚úÖ Sucesso!');
      console.log(`‚è±Ô∏è  Tempo: ${duration}ms`);
      console.log(`üìä Dura√ß√£o: ${response.data.metrics.duration.sync} min (sync), ${response.data.metrics.duration.async} min (async)`);
      console.log(`üìù Tokens: ${response.data.metrics.content.totalTokens.toLocaleString()}`);
      console.log(`üéØ Qualidade: ${response.data.metrics.quality.score}%`);
      console.log(`üñºÔ∏è  Imagens: ${response.data.metrics.images.count} (~${response.data.metrics.images.estimatedSizeMB} MB)`);
      console.log(`üí∞ Custo: R$ ${response.data.usage.costEstimate}`);
      
      // Validar estrutura
      if (response.data.slides.length === 9) {
        console.log('‚úÖ Estrutura: 9 slides ‚úì');
      } else {
        console.log(`‚ùå Estrutura: ${response.data.slides.length} slides (esperado: 9)`);
      }
      
      // Validar quizzes
      const quizSlides = response.data.slides.filter(slide => slide.type === 'quiz');
      if (quizSlides.length === 2) {
        console.log('‚úÖ Quizzes: 2 quizzes ‚úì');
      } else {
        console.log(`‚ùå Quizzes: ${quizSlides.length} quizzes (esperado: 2)`);
      }
      
      // Validar tokens por slide
      const shortSlides = response.data.slides.filter(slide => {
        const tokens = estimateTokens(slide.content);
        return tokens < 500;
      });
      
      if (shortSlides.length === 0) {
        console.log('‚úÖ Tokens: Todos os slides com 500+ tokens ‚úì');
      } else {
        console.log(`‚ö†Ô∏è  Tokens: ${shortSlides.length} slides com menos de 500 tokens`);
      }
      
      // Mostrar warnings se houver
      if (response.data.validation.issues.length > 0) {
        console.log('‚ö†Ô∏è  Problemas:');
        response.data.validation.issues.forEach(issue => {
          console.log(`   - ${issue}`);
        });
      }
      
      // Mostrar recomenda√ß√µes
      if (response.data.validation.recommendations.length > 0) {
        console.log('üí° Recomenda√ß√µes:');
        response.data.validation.recommendations.forEach(rec => {
          console.log(`   - ${rec.message}`);
        });
      }
      
      return {
        success: true,
        duration,
        metrics: response.data.metrics,
        validation: response.data.validation
      };
      
    } else {
      console.log('‚ùå Falha na gera√ß√£o');
      console.log('Erro:', response.data.error);
      return { success: false, error: response.data.error };
    }
    
  } catch (error) {
    console.log('‚ùå Erro na requisi√ß√£o');
    if (error.response) {
      console.log('Status:', error.response.status);
      console.log('Erro:', error.response.data.error || error.response.data);
    } else {
      console.log('Erro:', error.message);
    }
    return { success: false, error: error.message };
  }
}

// Fun√ß√£o para testar estat√≠sticas admin
async function testAdminStats() {
  console.log('\nüìä Testando Estat√≠sticas Admin');
  console.log('=' .repeat(50));
  
  try {
    const response = await axios.get(`${BASE_URL}/api/admin/stats-enhanced`);
    
    if (response.data.success) {
      console.log('‚úÖ Estat√≠sticas carregadas');
      console.log(`üë• Usu√°rios: ${response.data.stats.users.total}`);
      console.log(`üìö Aulas: ${response.data.stats.lessons.total}`);
      console.log(`üí¨ Chats: ${response.data.stats.chats.total}`);
      
      if (response.data.stats.pacing) {
        console.log(`üìä M√©tricas de Pacing:`);
        console.log(`   - Aulas com m√©tricas: ${response.data.stats.pacing.totalLessonsWithMetrics}`);
        console.log(`   - Dura√ß√£o m√©dia: ${response.data.stats.pacing.averageDuration} min`);
        console.log(`   - Tokens m√©dios: ${response.data.stats.pacing.averageTokens.toLocaleString()}`);
        console.log(`   - Qualidade m√©dia: ${response.data.stats.pacing.averageQuality}%`);
      }
      
      return { success: true };
    } else {
      console.log('‚ùå Falha ao carregar estat√≠sticas');
      return { success: false };
    }
    
  } catch (error) {
    console.log('‚ùå Erro na requisi√ß√£o de estat√≠sticas');
    console.log('Erro:', error.message);
    return { success: false };
  }
}

// Fun√ß√£o auxiliar para estimar tokens (simplificada)
function estimateTokens(text) {
  return Math.ceil(text.length / 4);
}

// Fun√ß√£o principal de teste
async function runTests() {
  console.log('üöÄ Iniciando Testes do Sistema de Aulas Aprimorado');
  console.log('=' .repeat(60));
  
  const results = [];
  
  // Testar gera√ß√£o de aulas
  for (const config of TEST_CONFIGS) {
    const result = await testLessonGeneration(config);
    results.push({ test: config.name, ...result });
    
    // Pausa entre testes
    await new Promise(resolve => setTimeout(resolve, 2000));
  }
  
  // Testar estat√≠sticas admin
  const adminResult = await testAdminStats();
  results.push({ test: 'Admin Stats', ...adminResult });
  
  // Resumo dos resultados
  console.log('\nüìã Resumo dos Testes');
  console.log('=' .repeat(60));
  
  const successful = results.filter(r => r.success).length;
  const total = results.length;
  
  console.log(`‚úÖ Sucessos: ${successful}/${total}`);
  
  results.forEach(result => {
    const status = result.success ? '‚úÖ' : '‚ùå';
    console.log(`${status} ${result.test}`);
    
    if (result.success && result.metrics) {
      console.log(`   üìä Qualidade: ${result.metrics.quality.score}%`);
      console.log(`   ‚è±Ô∏è  Dura√ß√£o: ${result.metrics.duration.sync} min`);
    }
  });
  
  // Estat√≠sticas gerais
  const successfulTests = results.filter(r => r.success && r.metrics);
  if (successfulTests.length > 0) {
    const avgQuality = Math.round(
      successfulTests.reduce((sum, r) => sum + r.metrics.quality.score, 0) / successfulTests.length
    );
    const avgDuration = Math.round(
      successfulTests.reduce((sum, r) => sum + r.metrics.duration.sync, 0) / successfulTests.length
    );
    
    console.log('\nüìà Estat√≠sticas Gerais');
    console.log(`üéØ Qualidade m√©dia: ${avgQuality}%`);
    console.log(`‚è±Ô∏è  Dura√ß√£o m√©dia: ${avgDuration} min`);
    console.log(`üí∞ Custo total estimado: R$ ${successfulTests.reduce((sum, r) => sum + parseFloat(r.metrics.content.totalTokens * 0.00003), 0).toFixed(4)}`);
  }
  
  console.log('\nüéâ Testes conclu√≠dos!');
  
  if (successful === total) {
    console.log('üéä Todos os testes passaram! Sistema funcionando perfeitamente.');
    process.exit(0);
  } else {
    console.log('‚ö†Ô∏è  Alguns testes falharam. Verifique os logs acima.');
    process.exit(1);
  }
}

// Executar testes se chamado diretamente
if (require.main === module) {
  runTests().catch(error => {
    console.error('‚ùå Erro fatal nos testes:', error);
    process.exit(1);
  });
}

module.exports = { runTests, testLessonGeneration, testAdminStats };
