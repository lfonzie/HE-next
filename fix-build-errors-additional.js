#!/usr/bin/env node

/**
 * Script adicional para corrigir erros restantes ap√≥s primeira corre√ß√£o
 */

const fs = require('fs');
const path = require('path');

console.log('üîß Aplicando corre√ß√µes adicionais...\n');

// Fun√ß√£o para ler arquivo
function readFile(filePath) {
  try {
    return fs.readFileSync(filePath, 'utf8');
  } catch (error) {
    console.error(`‚ùå Erro ao ler arquivo ${filePath}:`, error.message);
    return null;
  }
}

// Fun√ß√£o para escrever arquivo
function writeFile(filePath, content) {
  try {
    fs.writeFileSync(filePath, content, 'utf8');
    console.log(`‚úÖ Arquivo corrigido: ${filePath}`);
    return true;
  } catch (error) {
    console.error(`‚ùå Erro ao escrever arquivo ${filePath}:`, error.message);
    return false;
  }
}

// Corre√ß√£o 1: page-new.tsx - Remover propriedade alt do √≠cone Lucide
function fixPageNewLucideImage() {
  console.log('\nüîß Corrigindo √≠cone Lucide em page-new.tsx...');
  
  const filePath = './app/aulas/page-new.tsx';
  const content = readFile(filePath);
  
  if (!content) return false;
  
  // Remover propriedade alt do √≠cone Lucide (n√£o √© necess√°rio)
  const fixedContent = content.replace(
    /<Image className="h-5 w-5 text-orange-600 mr-1" alt="√çcone de imagens" \/>/g,
    '<Image className="h-5 w-5 text-orange-600 mr-1" />'
  );
  
  return writeFile(filePath, fixedContent);
}

// Corre√ß√£o 2: AuthenticTask.tsx - Corrigir depend√™ncias do useEffect
function fixAuthenticTaskDeps() {
  console.log('\nüîß Corrigindo depend√™ncias do useEffect em AuthenticTask.tsx...');
  
  const filePath = './components/professor-interactive/curipod/AuthenticTask.tsx';
  const content = readFile(filePath);
  
  if (!content) return false;
  
  let fixedContent = content;
  
  // Adicionar useCallback se n√£o existir
  if (!content.includes('useCallback')) {
    fixedContent = fixedContent.replace(
      /import React, { useState, useEffect } from ['"]react['"];?\s*/,
      "import React, { useState, useEffect, useCallback } from 'react';\n"
    );
  }
  
  // Envolver handleSubmit com useCallback
  fixedContent = fixedContent.replace(
    /const handleSubmit = \(\) => \{[\s\S]*?\};/,
    (match) => {
      return `const handleSubmit = useCallback(() => {${match.slice(match.indexOf('{') + 1, match.lastIndexOf('}'))}}, [onComplete, timeSpent]);`;
    }
  );
  
  // Adicionar handleSubmit √†s depend√™ncias do useEffect
  fixedContent = fixedContent.replace(
    /}, \[isActive, timeRemaining\]\);$/gm,
    '}, [isActive, timeRemaining, handleSubmit]);'
  );
  
  return writeFile(filePath, fixedContent);
}

// Corre√ß√£o 3: ExitTicket.tsx - Corrigir depend√™ncias do useEffect
function fixExitTicketDeps() {
  console.log('\nüîß Corrigindo depend√™ncias do useEffect em ExitTicket.tsx...');
  
  const filePath = './components/professor-interactive/curipod/ExitTicket.tsx';
  const content = readFile(filePath);
  
  if (!content) return false;
  
  let fixedContent = content;
  
  // Adicionar useCallback se n√£o existir
  if (!content.includes('useCallback')) {
    fixedContent = fixedContent.replace(
      /import React, { useState, useEffect } from ['"]react['"];?\s*/,
      "import React, { useState, useEffect, useCallback } from 'react';\n"
    );
  }
  
  // Envolver handleFinish com useCallback
  fixedContent = fixedContent.replace(
    /const handleFinish = \(\) => \{[\s\S]*?\};/,
    (match) => {
      return `const handleFinish = useCallback(() => {${match.slice(match.indexOf('{') + 1, match.lastIndexOf('}'))}}, [onComplete, timeSpent]);`;
    }
  );
  
  // Adicionar handleFinish √†s depend√™ncias do useEffect
  fixedContent = fixedContent.replace(
    /}, \[isActive, timeRemaining\]\);$/gm,
    '}, [isActive, timeRemaining, handleFinish]);'
  );
  
  return writeFile(filePath, fixedContent);
}

// Corre√ß√£o 4: InteractiveCheckpoint.tsx - Corrigir depend√™ncias do useCallback
function fixInteractiveCheckpointCallbackDeps() {
  console.log('\nüîß Corrigindo depend√™ncias do useCallback em InteractiveCheckpoint.tsx...');
  
  const filePath = './components/professor-interactive/curipod/InteractiveCheckpoint.tsx';
  const content = readFile(filePath);
  
  if (!content) return false;
  
  // Corrigir depend√™ncias do useCallback
  const fixedContent = content.replace(
    /}, \[selectedOption, onSubmit\]\);$/gm,
    '}, [selectedOption, onSubmit, checkpoint.correctOption, onComplete, timeSpent]);'
  );
  
  return writeFile(filePath, fixedContent);
}

// Fun√ß√£o principal
async function main() {
  console.log('üöÄ Aplicando corre√ß√µes adicionais...\n');
  
  let successCount = 0;
  let totalFixes = 4;
  
  // Executar todas as corre√ß√µes
  const fixes = [
    { name: '√çcone Lucide sem alt', fn: fixPageNewLucideImage },
    { name: 'Depend√™ncias AuthenticTask', fn: fixAuthenticTaskDeps },
    { name: 'Depend√™ncias ExitTicket', fn: fixExitTicketDeps },
    { name: 'Depend√™ncias InteractiveCheckpoint', fn: fixInteractiveCheckpointCallbackDeps }
  ];
  
  for (const fix of fixes) {
    console.log(`\nüìù Aplicando corre√ß√£o: ${fix.name}`);
    if (fix.fn()) {
      successCount++;
      console.log(`‚úÖ ${fix.name} - Corrigido com sucesso!`);
    } else {
      console.log(`‚ùå ${fix.name} - Falha na corre√ß√£o!`);
    }
  }
  
  console.log('\n' + '='.repeat(50));
  console.log(`üìä RESUMO DAS CORRE√á√ïES ADICIONAIS:`);
  console.log(`‚úÖ Sucessos: ${successCount}/${totalFixes}`);
  console.log(`‚ùå Falhas: ${totalFixes - successCount}/${totalFixes}`);
  
  if (successCount === totalFixes) {
    console.log('\nüéâ Todas as corre√ß√µes adicionais foram aplicadas!');
    console.log('\nüìã Execute novamente: npm run build');
  } else {
    console.log('\n‚ö†Ô∏è  Algumas corre√ß√µes falharam. Verifique os logs acima.');
  }
}

// Executar script
if (require.main === module) {
  main().catch(console.error);
}

module.exports = {
  fixPageNewLucideImage,
  fixAuthenticTaskDeps,
  fixExitTicketDeps,
  fixInteractiveCheckpointCallbackDeps
};
