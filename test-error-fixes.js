/**
 * Teste para verificar se os erros foram corrigidos
 * Este arquivo pode ser usado para testar as corre√ß√µes implementadas
 */

// Dados de teste para valida√ß√£o do quiz sem API Key
const testQuizData = {
  questions: [
    {
      id: 'q1',
      question: 'Qual √© a capital do Brasil?',
      type: 'multiple-choice',
      options: ['S√£o Paulo', 'Rio de Janeiro', 'Bras√≠lia', 'Salvador'],
      correctAnswer: 2,
      required: true
    },
    {
      id: 'q2', 
      question: 'Explique a import√¢ncia da educa√ß√£o.',
      type: 'open-ended',
      required: true
    }
  ],
  userAnswers: {
    'q1': {
      questionId: 'q1',
      answer: 2,
      timestamp: Date.now()
    },
    'q2': {
      questionId: 'q2',
      answer: 'A educa√ß√£o √© fundamental para o desenvolvimento da sociedade.',
      timestamp: Date.now()
    }
  }
};

// Dados de teste para impress√£o com introdu√ß√£o vazia
const testLessonDataEmptyIntro = {
  title: "Teste de Aula",
  objectives: [
    "Objetivo 1",
    "Objetivo 2"
  ],
  introduction: "", // Introdu√ß√£o vazia - deve ser aceita
  stages: [
    {
      etapa: "Etapa 1",
      type: "Te√≥rica",
      activity: {
        content: "Conte√∫do da etapa"
      },
      route: "/test/1"
    }
  ],
  metadata: {
    subject: "Teste",
    grade: "Ensino M√©dio",
    duration: "30 minutos",
    difficulty: "F√°cil",
    tags: []
  }
};

// Dados de teste para impress√£o sem introdu√ß√£o
const testLessonDataNoIntro = {
  title: "Teste de Aula Sem Introdu√ß√£o",
  objectives: [
    "Objetivo √∫nico"
  ],
  // Sem campo introduction - deve ser aceito
  stages: [
    {
      etapa: "Etapa √∫nica",
      type: "Pr√°tica",
      activity: {
        content: "Conte√∫do pr√°tico"
      },
      route: "/test/2"
    }
  ],
  metadata: {
    subject: "Teste",
    grade: "Ensino Fundamental",
    duration: "20 minutos",
    difficulty: "M√©dio",
    tags: []
  }
};

// Fun√ß√£o para testar valida√ß√£o do quiz sem API Key
async function testQuizValidationWithoutAPI() {
  console.log('üß™ Testando valida√ß√£o do quiz sem API Key...');
  
  try {
    // Simular ambiente sem API Key
    const originalApiKey = process.env.OPENAI_API_KEY;
    process.env.OPENAI_API_KEY = '';
    
    // Importar a fun√ß√£o de valida√ß√£o
    const { validateQuizCompletion } = await import('./lib/quiz-validation');
    
    const result = await validateQuizCompletion(
      testQuizData.questions,
      testQuizData.userAnswers,
      { subject: 'Geografia', difficulty: 'M√©dia' }
    );
    
    console.log('‚úÖ Resultado da valida√ß√£o:', result);
    console.log('‚úÖ Valida√ß√£o funcionou sem API Key!');
    
    // Restaurar API Key original
    process.env.OPENAI_API_KEY = originalApiKey;
    
  } catch (error) {
    console.error('‚ùå Erro na valida√ß√£o do quiz:', error);
  }
}

// Fun√ß√£o para testar impress√£o com introdu√ß√£o vazia
function testPrintWithEmptyIntro() {
  console.log('üß™ Testando impress√£o com introdu√ß√£o vazia...');
  
  try {
    // Simular a fun√ß√£o de valida√ß√£o
    const validateLessonData = (lessonData) => {
      const errors = [];
      
      if (!lessonData) {
        errors.push('Dados da aula n√£o fornecidos');
        return { isValid: false, errors };
      }
      
      if (!lessonData.title || typeof lessonData.title !== 'string' || lessonData.title.trim() === '') {
        errors.push('T√≠tulo da aula √© obrigat√≥rio e deve ser uma string n√£o vazia');
      }
      
      if (!lessonData.objectives || !Array.isArray(lessonData.objectives) || lessonData.objectives.length === 0) {
        errors.push('Objetivos da aula s√£o obrigat√≥rios e devem ser um array n√£o vazio');
      }
      
      // Introdu√ß√£o √© opcional - pode ser gerada automaticamente
      if (lessonData.introduction && typeof lessonData.introduction !== 'string') {
        errors.push('Introdu√ß√£o da aula deve ser uma string v√°lida');
      }
      
      if (!lessonData.stages || !Array.isArray(lessonData.stages)) {
        errors.push('Etapas da aula s√£o obrigat√≥rias e devem ser um array');
      }
      
      return { isValid: errors.length === 0, errors };
    };
    
    // Teste com introdu√ß√£o vazia
    const result1 = validateLessonData(testLessonDataEmptyIntro);
    console.log('‚úÖ Teste com introdu√ß√£o vazia:', result1);
    
    // Teste sem introdu√ß√£o
    const result2 = validateLessonData(testLessonDataNoIntro);
    console.log('‚úÖ Teste sem introdu√ß√£o:', result2);
    
    if (result1.isValid && result2.isValid) {
      console.log('‚úÖ Valida√ß√£o de impress√£o funcionou com introdu√ß√£o vazia/ausente!');
    } else {
      console.error('‚ùå Valida√ß√£o de impress√£o falhou:', result1.errors, result2.errors);
    }
    
  } catch (error) {
    console.error('‚ùå Erro na valida√ß√£o de impress√£o:', error);
  }
}

// Fun√ß√£o para verificar se os problemas foram resolvidos
function verifyFixes() {
  console.log(`
üîß VERIFICA√á√ÉO DAS CORRE√á√ïES
============================

Problemas corrigidos:

1. ‚úÖ Erro de API Key do OpenAI na valida√ß√£o do quiz
   - Adicionada verifica√ß√£o de disponibilidade da API Key
   - Implementada valida√ß√£o local como fallback
   - Fun√ß√£o validateQuizLocally() criada

2. ‚úÖ Erro de valida√ß√£o na fun√ß√£o de impress√£o (introdu√ß√£o vazia)
   - Introdu√ß√£o agora √© opcional
   - Valida√ß√£o mais flex√≠vel
   - Introdu√ß√£o pode ser gerada automaticamente

Para testar:
1. Execute testQuizValidationWithoutAPI() no console
2. Execute testPrintWithEmptyIntro() no console
3. Verifique se n√£o h√° mais erros nos logs

Os problemas devem estar resolvidos!
`);

  testQuizValidationWithoutAPI();
  testPrintWithEmptyIntro();
}

// Exportar para uso global
if (typeof window !== 'undefined') {
  window.testQuizValidationWithoutAPI = testQuizValidationWithoutAPI;
  window.testPrintWithEmptyIntro = testPrintWithEmptyIntro;
  window.verifyFixes = verifyFixes;
  window.testQuizData = testQuizData;
  window.testLessonDataEmptyIntro = testLessonDataEmptyIntro;
  window.testLessonDataNoIntro = testLessonDataNoIntro;
}

console.log(`
üß™ TESTE DAS CORRE√á√ïES
======================

Comandos dispon√≠veis:
- verifyFixes() - Verifica√ß√£o completa das corre√ß√µes
- testQuizValidationWithoutAPI() - Teste espec√≠fico do quiz
- testPrintWithEmptyIntro() - Teste espec√≠fico da impress√£o

Os erros devem estar resolvidos!
`);
