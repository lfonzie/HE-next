import { NextRequest, NextResponse } from "next/server";
import { getServerSession } from "next-auth";
import { authOptions } from "@/lib/auth";
import { randomUUID } from "crypto";
import { 
  ensureConversation, 
  getHistory, 
  appendMessage, 
  updateConversation 
} from "@/lib/chat-repository";
import { callOpenAI } from "@/lib/providers/openai";
import { callGPT5 } from "@/lib/providers/gpt5";
import { callGemini } from "@/lib/providers/gemini";
import { callPerplexity } from "@/lib/providers/perplexity";
import { callGrok } from "@/lib/providers/grok";
import { ChatMessage } from "@/lib/chat-history";
import { loadTIResources, loadSocialMediaResources } from "@/lib/ti-framework";
import { aiClassify } from "@/lib/ai-classifier";

export const runtime = "nodejs"; // Para compatibilidade com Prisma

// Fun√ß√£o para detectar temas na entrada do usu√°rio
function detectThemes(input: string): string[] {
  const themes = [];
  const lowerInput = input.toLowerCase();

  // Mapeamento de temas comuns
  const themeKeywords = {
    'gatos': ['gato', 'gatinho', 'felino', 'pets', 'animais dom√©sticos'],
    'cachorros': ['cachorro', 'c√£o', 'dog', 'pets', 'animais dom√©sticos'],
    'animais': ['animal', 'zoo', 'selvagem', 'fauna', 'vida selvagem'],
    'tecnologia': ['tecnologia', 'computador', 'internet', 'software', 'hardware', 'programa√ß√£o'],
    'esporte': ['esporte', 'futebol', 'basquete', 'nata√ß√£o', 'corrida', 'jogos'],
    'comida': ['comida', 'receita', 'culin√°ria', 'cozinhar', 'restaurante', 'prato'],
    'viagem': ['viagem', 'turismo', 'destino', 'feriado', 'passeio', 'explorar'],
    'livros': ['livro', 'leitura', 'autor', 'biblioteca', 'hist√≥ria', 'romance'],
    'm√∫sica': ['m√∫sica', 'cantor', 'banda', 'concerto', 'instrumento', 'ritmo'],
    'filmes': ['filme', 'cinema', 'ator', 'diretor', 's√©rie', 'netflix'],
    'educa√ß√£o': ['escola', 'estudo', 'aprendizado', 'professor', 'aluno', 'aula'],
    'sa√∫de': ['sa√∫de', 'm√©dico', 'doen√ßa', 'bem-estar', 'exerc√≠cio', 'nutri√ß√£o'],
    'natureza': ['natureza', 'ambiente', 'ecologia', 'floresta', 'rios', 'montanhas'],
    'arte': ['arte', 'pintura', 'escultura', 'museu', 'criatividade', 'design']
  };

  // Verificar se algum tema est√° presente na entrada
  for (const [theme, keywords] of Object.entries(themeKeywords)) {
    if (keywords.some(keyword => lowerInput.includes(keyword))) {
      themes.push(theme);
    }
  }

  return themes;
}

// Fun√ß√£o para gerar sugest√µes de follow-up baseadas no tema
function generateFollowUpSuggestions(themes: string[]): string[] {
  const suggestions: { [key: string]: string[] } = {
    'gatos': [
      'Quais ra√ßas de gatos voc√™ mais gosta?',
      'Como cuidar da sa√∫de do seu gato?',
      'Dicas para brincar com gatos'
    ],
    'cachorros': [
      'Quais ra√ßas de c√£es s√£o mais amig√°veis?',
      'Como treinar um cachorro filhote?',
      'Cuidados veterin√°rios para c√£es'
    ],
    'animais': [
      'Quais animais voc√™ gostaria de ver em um zool√≥gico?',
      'Como ajudar na preserva√ß√£o da fauna?',
      'Curiosidades sobre animais selvagens'
    ],
    'tecnologia': [
      'Quais gadgets tecnol√≥gicos voc√™ usa no dia a dia?',
      'Como aprender programa√ß√£o?',
      'Tend√™ncias em intelig√™ncia artificial'
    ],
    'esporte': [
      'Qual seu esporte favorito para praticar?',
      'Dicas para manter a motiva√ß√£o nos treinos',
      'Benef√≠cios do exerc√≠cio f√≠sico'
    ],
    'comida': [
      'Qual sua culin√°ria favorita?',
      'Dicas para uma alimenta√ß√£o saud√°vel',
      'Receitas r√°pidas e f√°ceis'
    ],
    'viagem': [
      'Para onde voc√™ gostaria de viajar?',
      'Dicas para viagens econ√¥micas',
      'Como planejar uma viagem perfeita'
    ],
    'livros': [
      'Qual g√™nero liter√°rio voc√™ prefere?',
      'Recomenda√ß√µes de livros cl√°ssicos',
      'Como desenvolver o h√°bito da leitura'
    ],
    'm√∫sica': [
      'Qual seu estilo musical favorito?',
      'Como aprender a tocar um instrumento?',
      'Festivais de m√∫sica que valem a pena'
    ],
    'filmes': [
      'Qual seu g√™nero de filme preferido?',
      'S√©ries que voc√™ recomenda assistir',
      'Como escolher bons filmes para assistir'
    ],
    'educa√ß√£o': [
      'Como tornar o aprendizado mais interessante?',
      'Dicas para estudo eficiente',
      'Import√¢ncia da educa√ß√£o continuada'
    ],
    'sa√∫de': [
      'Como manter uma rotina saud√°vel?',
      'Dicas para melhorar o sono',
      'Exerc√≠cios para o bem-estar mental'
    ],
    'natureza': [
      'Como ajudar o meio ambiente?',
      'Lugares naturais para visitar',
      'Benef√≠cios de passar tempo na natureza'
    ],
    'arte': [
      'Qual tipo de arte mais te interessa?',
      'Como desenvolver a criatividade?',
      'Museus e galerias imperd√≠veis'
    ]
  };

  const followUps: string[] = [];

  // Pegar at√© 3 sugest√µes do primeiro tema detectado
  for (const theme of themes.slice(0, 1)) {
    if (suggestions[theme]) {
      followUps.push(...suggestions[theme].slice(0, 3));
    }
  }

  return followUps.slice(0, 3); // M√°ximo de 3 sugest√µes
}

type Body = {
  provider: "openai" | "gpt5" | "gemini" | "perplexity" | "grok";
  model: string;
  input: string;
  system?: string;
  module?: string;
  conversationId?: string;
  stepFeedback?: string;
};

export async function POST(req: NextRequest) {
  const startTime = Date.now();

  try {
    const session = await getServerSession(authOptions);
    const userId = session?.user?.id || randomUUID();

    const body = (await req.json()) as Body;
    const { provider, model, input, system, module = "chat", conversationId, stepFeedback } = body;

    // Garantir que stepFeedback seja uma string ou undefined
    const safeStepFeedback = typeof stepFeedback === 'string' ? stepFeedback : undefined;

    console.log(`üöÄ [CHAT-UNIFIED] START - Provider: ${provider}, Model: ${model}, User: ${userId}`);

    if (!input?.trim()) {
      return NextResponse.json({ error: "Input √© obrigat√≥rio" }, { status: 400 });
    }

    // 1) Garantir conversa
    const conv = await ensureConversation(conversationId, userId, provider, module);
    const finalConversationId = conv.id;

    console.log(`üìù [CHAT-UNIFIED] Conversation ID: ${finalConversationId}`);

    // 2) Recuperar hist√≥rico
    const history = await getHistory(finalConversationId);
    console.log(`üìö [CHAT-UNIFIED] History loaded: ${history.length} messages`);

    // 2.5) Detectar m√≥dulo automaticamente se n√£o especificado
    let detectedModule = module;
    if (module === 'chat' || !module) {
      console.log(`üéØ [CHAT-UNIFIED] Auto-detecting module for input: "${input.substring(0, 50)}..."`);
      const moduleDetection = await aiClassify(input, history.length);
      detectedModule = moduleDetection.module;
      console.log(`‚úÖ [CHAT-UNIFIED] Auto-detected module: ${detectedModule} (confidence: ${moduleDetection.confidence})`);
    } else {
      console.log(`üîç [CHAT-UNIFIED] Module specified directly: ${module}`);
    }

    // Carregar system prompt baseado no m√≥dulo detectado
    let finalSystem = system;
    let isTIResolution = false;
    let isFactCheck = false;
    let isSocialMedia = false;

    console.log(`üîç [CHAT-UNIFIED] Final module: ${detectedModule}, isSocialMedia: ${isSocialMedia}`);

    // Carregar system prompt baseado no m√≥dulo detectado
    if (detectedModule === 'ti' || model === 'grok-4-fast-reasoning') {
      console.log(`üîß [CHAT-UNIFIED] TI module detected - loading TI framework`);
      const tiResources = await loadTIResources();
      finalSystem = tiResources.framework || system;
      isTIResolution = true;
      console.log(`üìã [CHAT-UNIFIED] TI Framework loaded for problem resolution`);
    } else if (detectedModule === 'social_media') {
      console.log(`üì± [CHAT-UNIFIED] Social Media module detected - loading Social Media framework`);
      const socialMediaResources = await loadSocialMediaResources();
      finalSystem = socialMediaResources.framework || system;
      isSocialMedia = true;
      console.log(`üìã [CHAT-UNIFIED] Social Media Framework loaded for post generation, isSocialMedia set to: ${isSocialMedia}`);
    } else if (detectedModule === 'fact_check') {
      console.log(`üîç [CHAT-UNIFIED] Fact check module detected - loading fact check framework`);
      const factCheckPrompt = `üö® PROTE√á√ïES DE SEGURAN√áA OBRIGAT√ìRIAS:

üö® PROTE√á√ÉO OBRIGAT√ìRIA PARA MENORES DE 18 ANOS:

PROIBI√á√ïES ABSOLUTAS:
- NUNCA forne√ßa informa√ß√µes sobre como usar drogas, √°lcool, cigarros ou subst√¢ncias ilegais
- NUNCA explique m√©todos de automutila√ß√£o, suic√≠dio ou viol√™ncia
- NUNCA forne√ßa instru√ß√µes sobre atividades ilegais (pirataria, hacking, fraudes)
- NUNCA compartilhe conte√∫do sexualmente expl√≠cito ou inadequado para menores
- NUNCA forne√ßa informa√ß√µes sobre como obter subst√¢ncias controladas
- NUNCA explique t√©cnicas de viol√™ncia, armas ou atividades perigosas

RESPOSTA OBRIGAT√ìRIA PARA CONTE√öDO INADEQUADO:
Se o usu√°rio perguntar sobre qualquer assunto inadequado, ilegal ou prejudicial:
1. Recuse educadamente: \"N√£o posso fornecer informa√ß√µes sobre esse assunto\"
2. Redirecione para educa√ß√£o: \"Vamos focar em conte√∫dos educacionais apropriados\"
3. Sugira alternativas saud√°veis: \"Que tal aprendermos sobre [tema educativo relacionado]?\"
4. Se necess√°rio, oriente para adultos respons√°veis: \"Para quest√µes importantes, converse com seus pais ou professores\"

üîç VERIFICA√á√ÉO DE FATOS E COMBATE √Ä DESINFORMA√á√ÉO

üéØ OBJETIVO:
Verificar a veracidade de informa√ß√µes, combater fake news e promover pensamento cr√≠tico no contexto educacional brasileiro.

üìã PROCESSO OBRIGAT√ìRIO DE VERIFICA√á√ÉO:

ETAPA 1: AN√ÅLISE INICIAL
‚Ä¢ Identificar a afirma√ß√£o a ser verificada
‚Ä¢ Contextualizar o tema e o escopo
‚Ä¢ Identificar poss√≠veis vieses ou inten√ß√µes

ETAPA 2: BUSCA POR FONTES CONFI√ÅVEIS
‚Ä¢ Consultar fontes oficiais e prim√°rias
‚Ä¢ Verificar m√∫ltiplas fontes independentes
‚Ä¢ Priorizar fontes acad√™micas, cient√≠ficas e governamentais

ETAPA 3: AN√ÅLISE CR√çTICA
‚Ä¢ Comparar vers√µes da informa√ß√£o
‚Ä¢ Identificar inconsist√™ncias
‚Ä¢ Avaliar a credibilidade das fontes
‚Ä¢ Considerar o contexto hist√≥rico e atual

ETAPA 4: CONCLUS√ÉO E RECOMENDA√á√ïES
‚Ä¢ Classificar como: Verdadeiro, Falso, Parcialmente Verdadeiro, ou Imposs√≠vel Verificar
‚Ä¢ Explicar o racioc√≠nio de forma clara
‚Ä¢ Fornecer fontes para verifica√ß√£o adicional

üìù FORMATO DE RESPOSTA OBRIGAT√ìRIO:

üîç **VERIFICA√á√ÉO DE FATOS**

üìã **Afirma√ß√£o Analisada:**
[Repetir exatamente a afirma√ß√£o do usu√°rio]

üß† **An√°lise Inicial:**
[Contexto e primeiras observa√ß√µes]

üîé **Verifica√ß√£o:**
[Resultado da checagem com fontes]

‚úÖ **Conclus√£o:**
[VERDADEIRO | FALSO | PARCIALMENTE VERDADEIRO | IMPOSS√çVEL VERIFICAR]

üìö **Fontes Consultadas:**
[Listar as fontes confi√°veis usadas]

üí° **Recomenda√ß√µes:**
[Dicas para verificar informa√ß√µes similares]

üîç FONTES CONFI√ÅVEIS NO BRASIL:
‚Ä¢ Sites governamentais (.gov.br)
‚Ä¢ Institui√ß√µes de ensino superior
‚Ä¢ Organiza√ß√µes cient√≠ficas e acad√™micas
‚Ä¢ Ve√≠culos de imprensa tradicionais com fact-checking
‚Ä¢ Projetos de verifica√ß√£o independentes

‚ö†Ô∏è IMPORTANTE:
‚Ä¢ Sempre declarar limita√ß√µes quando n√£o conseguir verificar completamente
‚Ä¢ Orientar para consulta a especialistas quando necess√°rio
‚Ä¢ Promover educa√ß√£o sobre m√≠dia e informa√ß√£o
‚Ä¢ Encorajar pensamento cr√≠tico e verifica√ß√£o independente`.trim();

      finalSystem = factCheckPrompt;
      isFactCheck = true;
      console.log(`üìã [CHAT-UNIFIED] Fact Check Framework loaded`);
    }

    // 2.6) Se h√° feedback de etapa, adicionar contexto da resolu√ß√£o anterior
    if (safeStepFeedback && isTIResolution) {
      console.log(`üîÑ [CHAT-UNIFIED] Step feedback received:`, safeStepFeedback);

      // Buscar a √∫ltima resposta de resolu√ß√£o TI na conversa
      const lastTIResponse = history
        .filter(msg => msg.role === 'assistant')
        .reverse()
        .find(msg => {
          try {
            const parsed = JSON.parse(msg.content);
            return parsed.problema && parsed.etapas;
          } catch {
            return false;
          }
        });

      if (lastTIResponse) {
        const lastResolution = JSON.parse(lastTIResponse.content);
        finalSystem += `

CONTEXTO ATUAL DA RESOLU√á√ÉO:
${JSON.stringify(lastResolution, null, 2)}

FEEDBACK DO USU√ÅRIO:
${safeStepFeedback || 'Nenhum feedback espec√≠fico fornecido'}

ATUALIZE o JSON acima com o progresso da etapa e continue a resolu√ß√£o.`;
      }
    }

    // 3) Detectar temas e gerar sugest√µes de follow-up ANTES de adicionar a mensagem
    let followUpSuggestions: string[] = [];
    const isFirstMessage = history.length === 0; // Verifica se √© uma conversa nova (hist√≥rico vazio)

    if (isFirstMessage && !isTIResolution && !isFactCheck && detectedModule === 'chat') {
      console.log(`üéØ [FOLLOW-UP] Detecting themes for first message`);
      const detectedThemes = detectThemes(input);
      if (detectedThemes.length > 0) {
        console.log(`‚úÖ [FOLLOW-UP] Detected themes:`, detectedThemes);
        followUpSuggestions = generateFollowUpSuggestions(detectedThemes);
        console.log(`üí° [FOLLOW-UP] Generated suggestions:`, followUpSuggestions);
      }
    }

    // 4) Adicionar mensagem do usu√°rio ANTES de chamar a IA
    await appendMessage(finalConversationId, "user", input, provider, model);
    console.log(`‚úÖ [CHAT-UNIFIED] User message saved`);

    // 5) Roteamento por provedor
    let result: { text: string; raw: any; usage?: any };
    
    const providerStart = Date.now();
    switch (provider) {
      case "openai":
        result = await callOpenAI(model, history, input, finalSystem);
        break;
      case "gpt5":
        result = await callGPT5(model, history, input, finalSystem);
        break;
      case "gemini":
        result = await callGemini(model, history, input, finalSystem);
        break;
      case "perplexity":
        result = await callPerplexity(model, history, input, finalSystem);
        break;
      case "grok":
        result = await callGrok(model, history, input, finalSystem);
        break;
      default:
        return NextResponse.json({ error: "Provider inv√°lido" }, { status: 400 });
    }
    const providerTime = Date.now() - providerStart;
    
    console.log(`‚ö° [CHAT-UNIFIED] Provider ${provider} completed in ${providerTime}ms`);

    // 5) Persistir resposta da IA
    await appendMessage(
      finalConversationId, 
      "assistant", 
      result.text, 
      provider, 
      model, 
      result.raw
    );
    console.log(`‚úÖ [CHAT-UNIFIED] Assistant message saved`);

    // 6) Atualizar estat√≠sticas da conversa
    const totalTime = Date.now() - startTime;
    await updateConversation(finalConversationId, {
      updated_at: new Date(),
      model: model
    });

    console.log(`üéâ [CHAT-UNIFIED] SUCCESS - Total time: ${totalTime}ms`);

    // Aplicar corre√ß√µes p√≥s-processamento para social media
    let finalReply = result.text;
    if (isSocialMedia) {
      console.log(`üîß [SOCIAL-MEDIA] Applying post-processing corrections to:`, result.text.substring(0, 100));
      finalReply = finalReply
        .replace(/Fundamental 1/g, 'Ensino Fundamental I')
        .replace(/Fund 1/g, 'Ensino Fundamental I')
        .replace(/fundamental 1/g, 'Ensino Fundamental I')
        .replace(/1¬∫ ao 5¬∫ ano do Fundamental 1/g, 'Ensino Fundamental I')
        .replace(/1¬∫ ao 5¬∫ ano/g, 'Ensino Fundamental I');
      console.log(`‚úÖ [SOCIAL-MEDIA] Corrected reply:`, finalReply.substring(0, 100));
    }

    return NextResponse.json({
      conversationId: finalConversationId,
      reply: finalReply,
      provider,
      model,
      usage: result.usage,
      timing: {
        total: totalTime,
        provider: providerTime
      },
      followUpSuggestions: followUpSuggestions.length > 0 ? followUpSuggestions : undefined
    });

  } catch (err: any) {
    console.error("‚ùå [CHAT-UNIFIED] ERROR:", err);
    return NextResponse.json({ 
      error: err?.message ?? "Erro interno do servidor" 
    }, { status: 500 });
  }
}

// GET para recuperar hist√≥rico de uma conversa
export async function GET(req: NextRequest) {
  try {
    const session = await getServerSession(authOptions);
    const userId = session?.user?.id || randomUUID();
    
    const { searchParams } = new URL(req.url);
    const conversationId = searchParams.get("conversationId");

    if (!conversationId) {
      return NextResponse.json({ error: "conversationId √© obrigat√≥rio" }, { status: 400 });
    }

    const history = await getHistory(conversationId);
    
    return NextResponse.json({
      conversationId,
      messages: history
    });

  } catch (err: any) {
    console.error("‚ùå [CHAT-UNIFIED-GET] ERROR:", err);
    return NextResponse.json({ 
      error: err?.message ?? "Erro ao recuperar hist√≥rico" 
    }, { status: 500 });
  }
}
