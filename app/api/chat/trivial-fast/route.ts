import { NextRequest, NextResponse } from 'next/server';
import { streamText } from 'ai';
import { google } from '@ai-sdk/google';
import { openai } from '@ai-sdk/openai';

export const dynamic = 'force-dynamic';

// Schema ultra-simplificado para mensagens triviais
const TrivialRequestSchema = {
  message: 'string',
  conversationId: 'string?',
  history: 'array?'
};

// Detec√ß√£o ultra-r√°pida de mensagens triviais
function isTrivialMessage(message: string): boolean {
  const lowerMessage = message.toLowerCase().trim();
  
  // Mensagens muito curtas
  if (message.length < 25) {
    return true;
  }
  
  // Sauda√ß√µes simples
  const trivialPatterns = [
    /^(oi|ol√°|ol√°!|oi!)$/i,
    /^(tudo bem|td bem|tudo bom|td bom)$/i,
    /^(bom dia|boa tarde|boa noite)$/i,
    /^(ok|okay|sim|n√£o|nao)$/i,
    /^(obrigado|obrigada|valeu|vlw)$/i,
    /^(tchau|at√© logo|at√© mais|bye)$/i,
    /^(oi tudo bem|ol√° tudo bem)$/i,
    /^(tudo bem\?|td bem\?)$/i
  ];
  
  return trivialPatterns.some(pattern => pattern.test(lowerMessage));
}

// Respostas pr√©-definidas para mensagens triviais
const TRIVIAL_RESPONSES = {
  greeting: [
    "Ol√°! Tudo bem sim, obrigado! Como posso te ajudar hoje?",
    "Oi! Tudo √≥timo, obrigado! Em que posso te auxiliar?",
    "Ol√°! Estou bem, obrigado! Como posso te ajudar?",
    "Oi! Tudo bem sim! Como posso te ajudar hoje?"
  ],
  goodbye: [
    "Tchau! Foi um prazer te ajudar!",
    "At√© logo! Qualquer coisa, estou aqui!",
    "Tchau! Volte sempre que precisar!",
    "At√© mais! Foi √≥timo conversar com voc√™!"
  ],
  thanks: [
    "De nada! Foi um prazer ajudar!",
    "Por nada! Estou aqui sempre que precisar!",
    "De nada! Qualquer coisa, s√≥ chamar!",
    "Por nada! Foi um prazer te ajudar!"
  ],
  default: [
    "Ol√°! Como posso te ajudar hoje?",
    "Oi! Em que posso te auxiliar?",
    "Ol√°! Como posso te ajudar?",
    "Oi! Como posso te ajudar hoje?"
  ]
};

// Fun√ß√£o para gerar resposta trivial ultra-r√°pida
function generateTrivialResponse(message: string): string {
  const lowerMessage = message.toLowerCase().trim();
  
  if (/^(oi|ol√°|ol√°!|oi!)$/i.test(lowerMessage)) {
    return TRIVIAL_RESPONSES.greeting[Math.floor(Math.random() * TRIVIAL_RESPONSES.greeting.length)];
  }
  
  if (/^(tchau|at√© logo|at√© mais|bye)$/i.test(lowerMessage)) {
    return TRIVIAL_RESPONSES.goodbye[Math.floor(Math.random() * TRIVIAL_RESPONSES.goodbye.length)];
  }
  
  if (/^(obrigado|obrigada|valeu|vlw)$/i.test(lowerMessage)) {
    return TRIVIAL_RESPONSES.thanks[Math.floor(Math.random() * TRIVIAL_RESPONSES.thanks.length)];
  }
  
  if (/^(tudo bem|td bem|tudo bom|td bom)$/i.test(lowerMessage)) {
    return "Que bom! Como posso te ajudar hoje?";
  }
  
  if (/^(bom dia|boa tarde|boa noite)$/i.test(lowerMessage)) {
    return `${lowerMessage.charAt(0).toUpperCase() + lowerMessage.slice(1)}! Como posso te ajudar?`;
  }
  
  return TRIVIAL_RESPONSES.default[Math.floor(Math.random() * TRIVIAL_RESPONSES.default.length)];
}

export async function POST(request: NextRequest) {
  const startTime = Date.now();
  
  try {
    const body = await request.json();
    const { message, conversationId, history = [] } = body;
    
    if (!message?.trim()) {
      return NextResponse.json({ error: 'Message is required' }, { status: 400 });
    }
    
    console.log(`üöÄ [TRIVIAL-FAST] Processing: "${message}"`);
    
    // 1. Verificar se √© mensagem trivial
    if (!isTrivialMessage(message)) {
      // Redirecionar para endpoint normal
      console.log(`üîÑ [TRIVIAL-FAST] Not trivial, redirecting to ai-sdk-multi`);
      return NextResponse.json({ 
        redirect: '/api/chat/ai-sdk-multi',
        reason: 'not_trivial'
      }, { status: 307 });
    }
    
    // 2. Gerar resposta trivial ultra-r√°pida
    const responseStart = Date.now();
    const trivialResponse = generateTrivialResponse(message);
    const responseTime = Date.now() - responseStart;
    
    console.log(`‚ö° [TRIVIAL-RESPONSE] Generated in ${responseTime}ms`);
    
    // 3. Simular streaming para manter compatibilidade
    const streamStart = Date.now();
    
    // Criar um stream simples com a resposta
    const encoder = new TextEncoder();
    const stream = new ReadableStream({
      start(controller) {
        // Simular streaming palavra por palavra
        const words = trivialResponse.split(' ');
        let index = 0;
        
        const sendNextWord = () => {
          if (index < words.length) {
            const word = words[index] + (index < words.length - 1 ? ' ' : '');
            controller.enqueue(encoder.encode(`data: ${JSON.stringify({ content: word })}\n\n`));
            index++;
            setTimeout(sendNextWord, 50); // Simular delay de streaming
          } else {
            controller.enqueue(encoder.encode('data: [DONE]\n\n'));
            controller.close();
          }
        };
        
        sendNextWord();
      }
    });
    
    const streamTime = Date.now() - streamStart;
    const totalTime = Date.now() - startTime;
    
    console.log(`‚è±Ô∏è [STREAM] Started in ${streamTime}ms`);
    console.log(`‚úÖ [TRIVIAL-FAST] Completed in ${totalTime}ms`);
    
    return new Response(stream, {
      headers: {
        'Content-Type': 'text/plain; charset=utf-8',
        'X-Module': 'atendimento',
        'X-Provider': 'trivial',
        'X-Model': 'predefined',
        'X-Complexity': 'trivial',
        'X-Classification-Method': 'trivial_detection',
        'X-Total-Time': `${totalTime}ms`,
        'X-Response-Time': `${responseTime}ms`,
        'X-Stream-Time': `${streamTime}ms`
      }
    });

  } catch (error: any) {
    console.error('‚ùå [TRIVIAL-FAST] Error:', error);
    
    return NextResponse.json(
      { 
        error: 'Internal server error', 
        details: error.message,
        timestamp: new Date().toISOString()
      },
      { status: 500 }
    );
  }
}
