import { NextRequest, NextResponse } from 'next/server';
import { callGrok } from '@/lib/providers/grok';
import { getServerSession } from 'next-auth';
import { authOptions } from '@/lib/auth';

export const dynamic = 'force-dynamic';

export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions);
    if (!session) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    if (!process.env.GROK_API_KEY) {
      return NextResponse.json({
        error: 'Grok API key not configured'
      }, { status: 500 });
    }

    const { description, videoTitle } = await request.json();

    if (!description || typeof description !== 'string') {
      return NextResponse.json({ error: 'Descri√ß√£o do v√≠deo √© obrigat√≥ria' }, { status: 400 });
    }

    console.log(`üé• [VIDEO-LEARNING-FALLBACK] Processing video description with Grok 4 Fast:`, {
      title: videoTitle,
      descriptionLength: description.length
    });

    const prompt = `Voc√™ √© um pedagogista e designer de produtos com profunda experi√™ncia em criar experi√™ncias de aprendizado envolventes via aplica√ß√µes web interativas.

Com base na seguinte descri√ß√£o de v√≠deo, crie uma especifica√ß√£o detalhada para uma aplica√ß√£o web interativa que complemente o conte√∫do e reforce as ideias principais:

T√çTULO DO V√çDEO: ${videoTitle || 'V√≠deo educacional'}
DESCRI√á√ÉO: ${description}

A especifica√ß√£o deve ser completa e autocontida. Aqui est√° um exemplo de especifica√ß√£o:

"Na m√∫sica, acordes criam expectativas de movimento em dire√ß√£o a certos outros acordes e resolu√ß√£o em dire√ß√£o a um centro tonal. Isso √© chamado de harmonia funcional.

Construa uma aplica√ß√£o web interativa para ajudar um aprendiz a entender o conceito de harmonia funcional.

ESPECIFICA√á√ïES:
1. A aplica√ß√£o deve apresentar um teclado interativo.
2. A aplica√ß√£o deve mostrar todos os 7 tr√≠ades diat√¥nicas que podem ser criadas em uma tonalidade maior.
3. A aplica√ß√£o deve descrever a fun√ß√£o de cada uma das tr√≠ades diat√¥nicas.
4. A aplica√ß√£o deve fornecer uma maneira para os usu√°rios tocarem diferentes acordes em sequ√™ncia e ver os resultados.

O objetivo da aplica√ß√£o √© melhorar o entendimento atrav√©s de design simples e l√∫dico. A especifica√ß√£o n√£o deve ser excessivamente complexa - um desenvolvedor web j√∫nior deve ser capaz de implement√°-la em um √∫nico arquivo HTML.

Forne√ßa o resultado como um objeto JSON contendo um √∫nico campo chamado "spec", cujo valor √© a especifica√ß√£o para a aplica√ß√£o web.`;

    try {
      const result = await callGrok(
        'grok-4-fast-reasoning',
        [],
        prompt,
        'Voc√™ √© um especialista em design de experi√™ncias de aprendizado interativas. Sempre crie especifica√ß√µes claras, pr√°ticas e pedagogicamente eficazes para aplica√ß√µes web educacionais.'
      );

      const text = result.text;

      console.log(`‚úÖ [VIDEO-LEARNING-FALLBACK] Specification generated successfully with Grok 4 Fast`);

      // Tentar extrair JSON da resposta
      let specData;
      try {
        const jsonMatch = text.match(/\{[\s\S]*\}/);
        if (jsonMatch) {
          specData = JSON.parse(jsonMatch[0]);
        } else {
          // Fallback se n√£o conseguir fazer parse do JSON
          specData = {
            spec: text,
            rawResponse: text
          };
        }
      } catch (parseError) {
        specData = {
          spec: text,
          rawResponse: text
        };
      }

      return NextResponse.json({
        success: true,
        spec: specData.spec,
        videoTitle,
        description,
        timestamp: new Date().toISOString(),
        aiProvider: 'grok-4-fast-reasoning',
        method: 'fallback-description'
      });

    } catch (error: any) {
      console.error('‚ùå [VIDEO-LEARNING-FALLBACK] Error generating specification:', error);
      return NextResponse.json({
        error: 'Failed to generate specification from description',
        details: error.message
      }, { status: 500 });
    }

  } catch (error: any) {
    console.error('‚ùå [VIDEO-LEARNING-FALLBACK] Processing error:', error);
    return NextResponse.json({
      error: 'Failed to process request',
      details: error.message
    }, { status: 500 });
  }
}
