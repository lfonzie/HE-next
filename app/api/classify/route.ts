import { NextRequest, NextResponse } from 'next/server';

// Prevent prerendering of this API route
export const dynamic = 'force-dynamic';

import { generateText } from 'ai';
import { google } from '@ai-sdk/google';
import { z } from 'zod';

// Initialize Google AI client via Vercel AI SDK
const googleModel = google('gemini-1.5-flash');

// Schema para valida√ß√£o da sa√≠da do classificador
const ClassificationSchema = z.object({
  module: z.enum([
    'professor',
    'aula_expandida', 
    'enem_interactive',
    'enem',
    'professor_interativo',
    'aula_interativa',
    'ti',
    'ti_suporte',
    'rh',
    'financeiro',
    'coordenacao',
    'bem_estar',
    'social_media',
    'conteudo_midia',
    'atendimento',
    'secretaria',
    'resultados_bolsas',
    'juridico_contratos',
    'marketing_design',
    'pesquisa_tempo_real'
  ]),
  complexity: z.enum(['simples', 'media', 'complexa']),
  confidence: z.number().min(0).max(1),
  scores: z.object({
    atendimento: z.number().min(0).max(1),
    professor: z.number().min(0).max(1),
    aula_expandida: z.number().min(0).max(1),
    enem_interactive: z.number().min(0).max(1),
    enem: z.number().min(0).max(1),
    professor_interativo: z.number().min(0).max(1),
    aula_interativa: z.number().min(0).max(1),
    ti: z.number().min(0).max(1),
    ti_suporte: z.number().min(0).max(1),
    rh: z.number().min(0).max(1),
    financeiro: z.number().min(0).max(1),
    coordenacao: z.number().min(0).max(1),
    bem_estar: z.number().min(0).max(1),
    social_media: z.number().min(0).max(1),
    conteudo_midia: z.number().min(0).max(1),
    secretaria: z.number().min(0).max(1),
    resultados_bolsas: z.number().min(0).max(1),
    juridico_contratos: z.number().min(0).max(1),
    marketing_design: z.number().min(0).max(1),
    pesquisa_tempo_real: z.number().min(0).max(1)
  }),
  rationale: z.string(),
  provider_hint: z.enum(['openai', 'anthropic', 'gemini', 'groq']).optional()
});

type ClassificationResult = z.infer<typeof ClassificationSchema>;

// Constantes
const CLASSIFICATION_THRESHOLD = 0.65;

// Heur√≠sticas de alta precis√£o em portugu√™s
const PORTUGUESE_HEURISTICS = {
  enem: /\b(enem|simulado|tri|prova objetiva|reda√ß√£o|quest√µes de m√∫ltipla escolha|gabarito)\b/i,
  professor: /\b(d√∫vida|explica√ß√£o|conceito|mat√©ria|disciplina|geometria|√°lgebra|f√≠sica|qu√≠mica|biologia|hist√≥ria|geografia|me ajude com.*d√∫vida|tirar uma d√∫vida|ajuda com.*exerc√≠cio|como resolver|f√≥rmula|teorema|demonstra√ß√£o|prova|an√°lise|s√≠ntese|comparar|explicar detalhadamente|processo complexo|estat√≠stica|probabilidade|vetores|matriz|logaritmo|exponencial|limite|continuidade)\b/i,
  social_media: /\b(post|rede social|instagram|facebook|tiktok|youtube|conte√∫do digital|marketing digital|postagem|compartilhar nas redes)\b/i,
  financeiro: /\b(pagamento|boleto|mensalidade|financeiro|valor|pre√ßo|custo|desconto|parcelamento|taxa de matr√≠cula)\b/i,
  aula_interativa: /\b(aula interativa|slides|explica√ß√£o passo a passo|atividade|demonstra√ß√£o)\b/i,
  ti: /\b(projetor|internet|lenta|login|n√£o funciona|configurar|impressora|bug|sistema|computador|travou|build|deploy|render|porta|log|404|405|nextauth|rota|api)\b/i,
  rh: /\b(benef√≠cios|f√©rias|atestado|m√©dico|sal√°rio|treinamento|carreira|promo√ß√£o|recursos humanos|colaboradores|funcion√°rios)\b/i,
  coordenacao: /\b(calend√°rio|provas|coordenador|pedag√≥gico|gest√£o|acad√™mica|planejamento|pedag√≥gico|metodologia|ensino)\b/i,
  bem_estar: /\b(ansioso|conflito|colega|apoio|emocional|estresse|depress√£o|bullying|conflito|familiar|sa√∫de|mental)\b/i,
  secretaria: /\b(matr√≠cula|matr√≠cula|documentos|hor√°rio|hor√°rio|secretaria|whats|procedimentos|administrativos)\b/i,
  resultados_bolsas: /\b(prova de bolsas|resultado|percentual|bolsa|bolsas|c√°lculo|desconto|bolsa de estudo)\b/i,
  juridico_contratos: /\b(contrato|jur√≠dico|termo|legal|documentos|legais|acordo|cl√°usula|contrata√ß√£o)\b/i,
  marketing_design: /\b(marketing|design|campanha|publicidade|branding|identidade|visual|material|promocional)\b/i,
  conteudo_midia: /\b(preciso de uma imagem|diagrama|gr√°fico|ilustra√ß√£o|infogr√°fico|conte√∫do visual|material visual)\b/i
};

function applyHeuristics(message: string): string | null {
  const messageLower = message.toLowerCase();
  
  for (const [module, pattern] of Object.entries(PORTUGUESE_HEURISTICS)) {
    if (pattern.test(messageLower)) {
      console.log(`üéØ [HEURISTIC] Matched module '${module}' for message: "${message.substring(0, 50)}..."`);
      return module;
    }
  }
  
  return null;
}

function calculateScoreAnalysis(scores: Record<string, number>) {
  const sortedScores = Object.entries(scores)
    .sort(([,a], [,b]) => b - a);
  
  const [topModule, topScore] = sortedScores[0];
  const [, secondScore] = sortedScores[1] || [null, 0];
  
  return {
    picked: topModule,
    confidence: topScore,
    deltaToSecond: topScore - secondScore,
    scores,
    isCloseCall: (topScore - secondScore) < 0.05
  };
}

// Cache simplificado
const classificationCache = new Map<string, { result: any; timestamp: number }>();

export async function POST(request: NextRequest) {
  const startTime = Date.now();
  const timestamp = new Date().toISOString();
  let source = 'fallback';
  let confidence = 0;
  let scores = {};
  
  console.log(`üöÄ [CLASSIFY] START - ${timestamp}`);
  
  try {
    const parseStart = Date.now();
    const { userMessage, history = [], currentModule = 'auto' } = await request.json();
    const parseTime = Date.now() - parseStart;
    console.log(`‚è±Ô∏è [PARSE] Completed in ${parseTime}ms`);

    if (!userMessage) {
      return NextResponse.json(
        { error: 'userMessage is required' },
        { status: 400 }
      );
    }

    // Calcular messageCount a partir do payload recebido
    const messageCount = history.length + 1; // +1 para a mensagem atual
    
    console.log(`üîç [CLASSIFY] msg="${userMessage.substring(0, 30)}..." messageCount=${messageCount}`);

    // 1. Override do cliente (se veio com m√≥dulo expl√≠cito)
    if (currentModule && currentModule !== 'auto') {
      const overrideTime = Date.now() - startTime;
      console.log(`üéØ [CLIENT_OVERRIDE] Using client module: ${currentModule}`);
      console.log(`‚è±Ô∏è [CLIENT_OVERRIDE] Completed in ${overrideTime}ms`);
      return NextResponse.json({
        success: true,
        classification: {
          module: currentModule.toUpperCase(),
          confidence: 1.0,
          scores: { [currentModule]: 1.0 },
          rationale: 'Client override',
          complexity: 'simples'
        },
        source: 'client_override',
        messageCount,
        timestamp: new Date().toISOString(),
        cached: false,
        timing: { total: overrideTime, parse: parseTime }
      });
    }

    // Cache key incluindo messageCount
    const cacheStart = Date.now();
    const cacheKey = `${userMessage.toLowerCase().trim()}_${messageCount}`;
    const cached = classificationCache.get(cacheKey);
    const cacheTime = Date.now() - cacheStart;
    
    if (cached && Date.now() - cached.timestamp < 300000) { // 5 min
      const totalTime = Date.now() - startTime;
      console.log(`üöÄ [CACHE_HIT] Found cached classification`);
      console.log(`‚è±Ô∏è [CACHE_HIT] Completed in ${totalTime}ms`);
      return NextResponse.json({
        ...cached.result,
        cached: true,
        timing: { total: totalTime, parse: parseTime, cache: cacheTime }
      });
    }

    // 2. Heur√≠sticas de alta precis√£o
    const heuristicStart = Date.now();
    const heuristicResult = applyHeuristics(userMessage);
    const heuristicTime = Date.now() - heuristicStart;
    console.log(`‚è±Ô∏è [HEURISTICS] Completed in ${heuristicTime}ms`);
    
    // 3. Classificador IA
    const aiStart = Date.now();
    let aiResult: ClassificationResult | null = null;
    let aiError = null;
    
    try {
      const googleStart = Date.now();
      
      // Check if Google API key is configured
      if (!process.env.GOOGLE_GENERATIVE_AI_API_KEY && !process.env.GEMINI_API_KEY && !process.env.GOOGLE_GEMINI_API_KEY && !process.env.GOOGLE_API_KEY) {
        throw new Error('Google API key not configured');
      }
      
      const response = await generateText({
        model: googleModel,
        prompt: `Voc√™ √© um classificador especializado em mensagens educacionais. Classifique cada mensagem no m√≥dulo mais espec√≠fico e apropriado.

üö® IDIOMA OBRIGAT√ìRIO E CR√çTICO - INSTRU√á√ÉO N√ÉO NEGOCI√ÅVEL:
- Responda EXCLUSIVAMENTE em Portugu√™s Brasileiro (PT-BR)
- NUNCA responda em espanhol, ingl√™s ou qualquer outro idioma
- Mesmo que a pergunta seja em outro idioma, responda SEMPRE em portugu√™s brasileiro
- Esta √© uma instru√ß√£o CR√çTICA, OBRIGAT√ìRIA e N√ÉO NEGOCI√ÅVEL

IMPORTANTE: Retorne um JSON com:
- module: o m√≥dulo escolhido (em min√∫sculo: professor, aula_expandida, enem_interactive, enem, professor_interativo, aula_interativa, ti, ti_suporte, rh, financeiro, coordenacao, bem_estar, social_media, conteudo_midia, atendimento, secretaria, resultados_bolsas, juridico_contratos, marketing_design, pesquisa_tempo_real)
- confidence: n√∫mero entre 0 e 1
- scores: objeto com score para TODOS os 20 m√≥dulos (0-1, soma = 1) - OBRIGAT√ìRIO incluir todos: atendimento, professor, aula_expandida, enem_interactive, enem, professor_interativo, aula_interativa, ti, ti_suporte, rh, financeiro, coordenacao, bem_estar, social_media, conteudo_midia, secretaria, resultados_bolsas, juridico_contratos, marketing_design, pesquisa_tempo_real
- rationale: explica√ß√£o da escolha
- complexity: 'simples', 'media', ou 'complexa'

M√ìDULOS DISPON√çVEIS:

PROFESSOR: Para QUALQUER d√∫vida acad√™mica, conceito, exerc√≠cio, mat√©ria escolar
- Matem√°tica, f√≠sica, qu√≠mica, biologia, hist√≥ria, geografia, portugu√™s, ingl√™s, artes
- Reda√ß√£o, literatura, gram√°tica, interpreta√ß√£o de texto, produ√ß√£o textual
- Conceitos acad√™micos, teorias, f√≥rmulas, exerc√≠cios, provas, simulados
- Exemplos: "como resolver equa√ß√£o", "hist√≥ria do Brasil", "reda√ß√£o ENEM", "f√≥rmula de Bhaskara", "d√∫vida de geometria", "explicar conceito", "ajuda com exerc√≠cio", "explique detalhadamente a revolu√ß√£o", "Me ajude com: Quero tirar uma d√∫vida de geometria", "tirar uma d√∫vida de matem√°tica", "ajuda com exerc√≠cio de f√≠sica"

AULA_EXPANDIDA: Solicita√ß√µes por aulas completas ou detalhadas
- Exemplos: "quero uma aula expandida sobre fotoss√≠ntese", "aula completa de matem√°tica", "aula detalhada sobre"

ENEM_INTERACTIVE: Solicita√ß√µes por simulados ENEM interativos
- Exemplos: "quero um enem interativo", "simulado com explica√ß√µes detalhadas", "simulado ENEM"

ENEM: Simulados r√°pidos ou quest√µes ENEM simples
- Exemplos: "simulado r√°pido", "quest√µes ENEM", "prova r√°pida"

PROFESSOR_INTERATIVO: Professor interativo com aulas e quizzes
- Exemplos: "professor interativo", "aula interativa", "quiz interativo"

AULA_INTERATIVA: Solicita√ß√µes por aulas interativas ou din√¢micas
- Exemplos: "aula interativa", "aula din√¢mica", "aula participativa"

BEM_ESTAR: Apoio emocional, ansiedade, conflitos, sa√∫de mental
- Exemplos: "estou ansioso", "conflito com colega", "apoio emocional", "estresse"

TI: Suporte t√©cnico educacional
- Exemplos: "projetor n√£o funciona", "internet lenta", "login n√£o funciona", "problema t√©cnico"

TI_SUPORTE: Suporte t√©cnico espec√≠fico (bugs, builds, deployments)
- Exemplos: "build falhou", "deploy error", "bug no sistema", "problema de API"

FINANCEIRO: Pagamentos de alunos/fam√≠lias
- Exemplos: "mensalidade", "boleto", "pagamento", "desconto"

RH: Quest√µes de funcion√°rios/colaboradores
- Exemplos: "benef√≠cios dispon√≠veis", "saldo de f√©rias", "atestado m√©dico", "sal√°rio"

COORDENACAO: Gest√£o pedag√≥gica, calend√°rio escolar
- Exemplos: "calend√°rio de provas", "coordenador pedag√≥gico", "gest√£o acad√™mica"

SOCIAL_MEDIA: Cria√ß√£o de conte√∫do para redes sociais
- Exemplos: "criar post", "post social media", "destacar conquistas", "instagram", "facebook"

CONTEUDO_MIDIA: Solicita√ß√µes por conte√∫do visual, imagens, diagramas
- Exemplos: "preciso de uma imagem", "diagrama de fotoss√≠ntese", "gr√°fico", "ilustra√ß√£o"

SECRETARIA: Tarefas administrativas, matr√≠culas, documentos, hor√°rios
- Exemplos: "matr√≠cula", "documentos necess√°rios", "hor√°rio de funcionamento", "procedimentos administrativos", "secretaria", "whatsapp da secretaria"

RESULTADOS_BOLSAS: Gest√£o de resultados de bolsas e c√°lculos de descontos
- Exemplos: "prova de bolsas", "resultado da bolsa", "percentual de desconto", "c√°lculo de bolsa", "bolsa de estudo"

JURIDICO_CONTRATOS: Documentos legais, contratos e quest√µes jur√≠dicas
- Exemplos: "contrato", "documentos jur√≠dicos", "termo de uso", "acordo", "cl√°usula contratual", "contrata√ß√£o"

MARKETING_DESIGN: Conte√∫do de marketing, design e campanhas promocionais
- Exemplos: "marketing", "design", "campanha", "publicidade", "branding", "identidade visual", "material promocional"

PESQUISA_TEMPO_REAL: Para pesquisas que requerem informa√ß√µes atuais e em tempo real
- Exemplos: "not√≠cias atuais", "tend√™ncias de mercado", "situa√ß√£o atual", "dados recentes", "o que est√° acontecendo", "informa√ß√µes atualizadas", "desenvolvimentos recentes", "estado atual do", "√∫ltimas not√≠cias sobre", "tend√™ncias atuais", "dados mais recentes", "informa√ß√µes recentes", "atualiza√ß√£o sobre", "novidades sobre", "como est√° a situa√ß√£o", "qual √© a situa√ß√£o atual"

ATENDIMENTO: APENAS quando n√£o se encaixa em nenhum m√≥dulo espec√≠fico
- Exemplos: "informa√ß√µes gerais", "d√∫vidas b√°sicas", "primeiro contato", "ajuda geral"

REGRAS CR√çTICAS:
1. PROFESSOR: Para QUALQUER d√∫vida acad√™mica, conceito, exerc√≠cio, mat√©ria escolar
2. Se a mensagem cont√©m palavras como "explique", "como funciona", "conceito", "d√∫vida", "exerc√≠cio", "ajuda com", "como resolver", "f√≥rmula", "geometria", "√°lgebra", "trigonometria", "c√°lculo", "derivada", "integral", "equa√ß√£o", "fun√ß√£o", "teorema", "demonstra√ß√£o", "prova", "an√°lise", "s√≠ntese", "comparar", "explicar detalhadamente", "processo complexo", "estat√≠stica", "probabilidade", "vetores", "matriz", "logaritmo", "exponencial", "limite", "continuidade" ‚Üí SEMPRE PROFESSOR
3. Se a mensagem cont√©m termos acad√™micos como "hist√≥ria", "matem√°tica", "f√≠sica", "qu√≠mica", "biologia", "geografia", "portugu√™s", "literatura", "reda√ß√£o", "revolu√ß√£o", "guerra", "independ√™ncia", "evolu√ß√£o", "fotoss√≠ntese" E tamb√©m cont√©m "explique", "como", "d√∫vida", "conceito" ‚Üí PROFESSOR
4. Se a mensagem cont√©m "Me ajude com" seguido de qualquer termo acad√™mico ‚Üí SEMPRE PROFESSOR
5. Se a mensagem cont√©m "tirar uma d√∫vida" seguido de qualquer mat√©ria escolar ‚Üí SEMPRE PROFESSOR
6. PESQUISA_TEMPO_REAL: Para QUALQUER pergunta que requer informa√ß√µes atuais, not√≠cias, tend√™ncias, dados recentes, situa√ß√£o atual
7. TI/TI_TROUBLESHOOTING: Para QUALQUER problema t√©cnico, equipamento, sistema, desenvolvimento
8. RH: Para funcion√°rios/colaboradores (benef√≠cios, f√©rias, atestados, sal√°rio)
9. FINANCEIRO: Para pagamentos de alunos/fam√≠lias (mensalidades, boletos)
10. SOCIAL_MEDIA: Para QUALQUER cria√ß√£o de conte√∫do, posts, marketing digital, redes sociais
11. CONTEUDO_MIDIA: Para solicita√ß√µes de imagens, diagramas, conte√∫do visual
12. BEM_ESTAR: Para quest√µes emocionais, psicol√≥gicas, conflitos, bullying
13. FAQ_ESCOLA: Para perguntas sobre procedimentos, normas, regulamentos da escola
14. COORDENACAO: Para quest√µes pedag√≥gicas, calend√°rios, gest√£o acad√™mica
15. SECRETARIA: Para tarefas administrativas, matr√≠culas, documentos, hor√°rios
16. RESULTADOS_BOLSAS: Para quest√µes sobre bolsas de estudo, provas de bolsas, c√°lculos de desconto
17. JURIDICO_CONTRATOS: Para documentos legais, contratos, quest√µes jur√≠dicas
18. MARKETING_DESIGN: Para conte√∫do de marketing, design, campanhas promocionais
19. ATENDIMENTO: APENAS quando n√£o se encaixa em nenhum m√≥dulo espec√≠fico

IMPORTANTE: Seja espec√≠fico! Escolha o m√≥dulo mais adequado baseado no contexto completo da mensagem, n√£o ATENDIMENTO.

EXEMPLO DE RESPOSTA V√ÅLIDA:
{
  "module": "professor",
  "confidence": 0.9,
  "scores": {
    "atendimento": 0.05,
    "professor": 0.9,
    "aula_expandida": 0.01,
    "enem_interactive": 0.01,
    "enem": 0.01,
    "professor_interativo": 0.01,
    "aula_interativa": 0.01,
    "ti": 0.0,
    "ti_suporte": 0.0,
    "rh": 0.0,
    "financeiro": 0.0,
    "coordenacao": 0.0,
    "bem_estar": 0.0,
    "social_media": 0.0,
    "conteudo_midia": 0.0,
    "secretaria": 0.0,
    "resultados_bolsas": 0.0,
    "juridico_contratos": 0.0,
    "marketing_design": 0.0,
    "pesquisa_tempo_real": 0.0
  },
  "rationale": "Mensagem educacional sobre conceito acad√™mico",
  "complexity": "complexa"
}

Mensagem: "${userMessage}"
Hist√≥rico: ${history.length} mensagens`,
        temperature: 0.1,
      });

      const googleTime = Date.now() - googleStart;
      console.log(`‚è±Ô∏è [GOOGLE-CALL] Completed in ${googleTime}ms`);
      
      const raw = response.text || "{}";
      
      // Extract JSON from markdown if present
      let jsonString = raw;
      if (raw.includes('```json')) {
        const jsonMatch = raw.match(/```json\s*([\s\S]*?)\s*```/);
        if (jsonMatch) {
          jsonString = jsonMatch[1].trim();
        }
      } else if (raw.includes('```')) {
        const jsonMatch = raw.match(/```\s*([\s\S]*?)\s*```/);
        if (jsonMatch) {
          jsonString = jsonMatch[1].trim();
        }
      }
      
      const parsed = JSON.parse(jsonString);
      
      // Validar com Zod
      const validationStart = Date.now();
      const validationResult = ClassificationSchema.safeParse(parsed);
      const validationTime = Date.now() - validationStart;
      console.log(`‚è±Ô∏è [SCHEMA-VALIDATION] Completed in ${validationTime}ms`);
      
      if (validationResult.success) {
        aiResult = validationResult.data;
        source = 'classifier';
        confidence = aiResult.confidence;
        scores = aiResult.scores;
        
        console.log(`ü§ñ [AI_SUCCESS] module=${aiResult.module} confidence=${aiResult.confidence}`);
        console.log(`‚è±Ô∏è [GOOGLE-TOTAL] ${googleTime}ms`);
      } else {
        console.warn(`‚ö†Ô∏è [SCHEMA_FAIL] AI returned invalid schema:`, validationResult.error.errors);
        
        // Fallback: tentar corrigir o resultado da IA
        const correctedResult = {
          module: parsed.module?.toLowerCase() || 'professor',
          confidence: parsed.confidence || 0.8,
          scores: {
            atendimento: 0.1,
            professor: 0.8,
            aula_expandida: 0.01,
            enem_interactive: 0.01,
            enem: 0.01,
            professor_interativo: 0.01,
            aula_interativa: 0.01,
            ti: 0.01,
            ti_suporte: 0.01,
            rh: 0.01,
            financeiro: 0.01,
            coordenacao: 0.01,
            bem_estar: 0.01,
            social_media: 0.01,
            conteudo_midia: 0.01,
            secretaria: 0.01,
            resultados_bolsas: 0.01,
            juridico_contratos: 0.01,
            marketing_design: 0.01,
            chat_geral: 0.01
          },
          rationale: parsed.rationale || 'Classifica√ß√£o autom√°tica corrigida',
          complexity: parsed.complexity || 'complexa'
        };
        
        // Validar o resultado corrigido
        const correctedValidation = ClassificationSchema.safeParse(correctedResult);
        if (correctedValidation.success) {
          aiResult = correctedValidation.data;
          source = 'classifier_corrected';
          confidence = aiResult.confidence;
          scores = aiResult.scores;
          console.log(`‚úÖ [SCHEMA_CORRECTED] module=${aiResult.module} confidence=${aiResult.confidence}`);
        } else {
          aiError = 'schema_validation_failed';
        }
      }
      
    } catch (error) {
      const aiTime = Date.now() - aiStart;
      console.error(`‚ùå [AI_ERROR] Google Gemini call failed:`, error);
      console.error(`‚ùå [AI_ERROR] Error message:`, error.message);
      console.error(`‚ùå [AI_ERROR] Error stack:`, error.stack);
      console.log(`‚è±Ô∏è [AI-ERROR] Failed after ${aiTime}ms`);
      aiError = 'google_gemini_failed';
    }
    
    const aiTime = Date.now() - aiStart;
    console.log(`‚è±Ô∏è [AI-CLASSIFICATION] Total time: ${aiTime}ms`);

    // 4. L√≥gica de decis√£o com prioridade
    let finalModule = 'professor';
    let finalConfidence = 0.0;
    let finalScores = { professor: 1.0 };
    let finalRationale = 'Fallback default';
    
    if (aiResult && aiResult.confidence >= CLASSIFICATION_THRESHOLD) {
      // IA com confian√ßa alta
      finalModule = aiResult.module;
      finalConfidence = aiResult.confidence;
      finalScores = aiResult.scores;
      finalRationale = aiResult.rationale;
      source = 'classifier';
    } else if (heuristicResult) {
      // Heur√≠stica quebra empate ou substitui IA com baixa confian√ßa
      finalModule = heuristicResult;
      finalConfidence = 0.8;
      finalScores = { 
        [heuristicResult]: 0.8, 
        atendimento: 0.2,
        professor: 0,
        aula_expandida: 0,
        enem_interactive: 0,
        enem: 0,
        professor_interativo: 0,
        aula_interativa: 0,
        ti: 0,
        ti_suporte: 0,
        rh: 0,
        financeiro: 0,
        coordenacao: 0,
        bem_estar: 0,
        social_media: 0,
        conteudo_midia: 0,
        secretaria: 0,
        resultados_bolsas: 0,
        juridico_contratos: 0,
        marketing_design: 0,
        chat_geral: 0
      };
      finalRationale = 'Heuristic pattern match';
      source = 'heuristic';
    } else if (aiResult) {
      // IA com confian√ßa baixa, mas melhor que fallback
      const analysis = calculateScoreAnalysis(aiResult.scores);
      if (analysis.isCloseCall) {
        finalModule = 'professor';
        finalConfidence = 0.5;
        finalScores = { 
          professor: 0.5,
          atendimento: 0.1,
          aula_expandida: 0.1,
          enem_interactive: 0.1,
          enem: 0.1,
          professor_interativo: 0.1,
          aula_interativa: 0.1,
          ti: 0,
          ti_suporte: 0,
          rh: 0,
          financeiro: 0,
          coordenacao: 0,
          bem_estar: 0,
          social_media: 0,
          conteudo_midia: 0,
          secretaria: 0,
          resultados_bolsas: 0,
          juridico_contratos: 0,
          marketing_design: 0,
          chat_geral: 0
        };
        finalRationale = 'Low confidence, close call';
        source = 'fallback';
      } else {
        finalModule = aiResult.module;
        finalConfidence = aiResult.confidence;
        finalScores = aiResult.scores;
        finalRationale = aiResult.rationale;
        source = 'classifier_low_conf';
      }
    }

    const totalTime = Date.now() - startTime;
    const result = {
      success: true,
      classification: {
        module: finalModule.toUpperCase(),
        confidence: finalConfidence,
        scores: finalScores,
        rationale: finalRationale,
        complexity: aiResult?.complexity || 'simples'
      },
      source,
      messageCount,
      model: "gpt-4o-mini",
      timestamp: new Date().toISOString(),
      cached: false,
      latency: totalTime,
      timing: {
        total: totalTime,
        parse: parseTime,
        cache: cacheTime,
        heuristics: heuristicTime,
        ai: aiTime
      }
    };

    // Cache result
    classificationCache.set(cacheKey, { result, timestamp: Date.now() });

    // Telemetria compacta
    const scoreAnalysis = calculateScoreAnalysis(finalScores);
    console.log(`[CLASSIFY] msg=${userMessage.substring(0, 20)}... module=${finalModule} src=${source} conf=${finalConfidence.toFixed(2)} delta=${scoreAnalysis.deltaToSecond.toFixed(2)} msgCount=${messageCount} latency=${totalTime}ms`);
    console.log(`üìä [CLASSIFY-TIMING] Parse: ${parseTime}ms | Cache: ${cacheTime}ms | Heuristics: ${heuristicTime}ms | AI: ${aiTime}ms | TOTAL: ${totalTime}ms`);

    return NextResponse.json(result);

  } catch (error: any) {
    console.error('‚ùå [CLASSIFY] Fatal error:', error);
    
    const fallbackResult = {
      success: false,
      classification: {
        module: "ATENDIMENTO",
        confidence: 0.0,
        scores: { atendimento: 1.0 },
        rationale: "Fatal error fallback",
        complexity: 'simples'
      },
      source: 'error_fallback',
      error: error.message,
      timestamp: new Date().toISOString(),
      cached: false
    };

    console.log(`[CLASSIFY] msg=ERROR module=atendimento src=error_fallback conf=0.00 msgCount=unknown latency=${Date.now() - startTime}ms`);

    return NextResponse.json(fallbackResult);
  }
}