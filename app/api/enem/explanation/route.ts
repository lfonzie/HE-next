import { NextRequest, NextResponse } from 'next/server';

// Prevent prerendering of this API route

// Prevent prerendering of this API route
export const dynamic = 'force-dynamic';


import OpenAI from 'openai';


import { logTokens } from '@/lib/token-logger';


import { getServerSession } from 'next-auth';


import { authOptions } from '@/lib/auth';

import { callGrok } from '@/lib/providers/grok';



// Inicializar cliente OpenAI
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

export async function POST(request: NextRequest) {
  let body: any;
  
  try {
    console.log('POST /api/enem/explanation called');
    
    body = await request.json();
    const { item_id, session_id, question_text, alternatives, correct_answer, user_answer, area, question_number } = body;

    if (!item_id) {
      return NextResponse.json({ error: 'item_id is required' }, { status: 400 });
    }

    if (!process.env.GROK_API_KEY) {
      console.warn('Grok API key not found, using fallback explanation');
      return NextResponse.json({
        explanation: generateFallbackExplanation(area, correct_answer, user_answer),
        item_id,
        session_id,
        success: true,
        source: 'fallback'
      });
    }

    // Preparar contexto da quest√£o para o Grok
const questionContext = `
Quest√£o ENEM ${question_number ? `#${question_number}` : ''} - √Årea: ${area || 'N√£o especificada'}
Enunciado: ${question_text || 'Quest√£o n√£o dispon√≠vel'}

Alternativas:
${alternatives ? Object.entries(alternatives).map(([key, value]) => `${key}) ${value}`).join('\n') : 'Alternativas n√£o dispon√≠veis'}

Resposta correta: ${correct_answer || 'N√£o especificada'}
${user_answer ? `Resposta do usu√°rio: ${user_answer}` : 'Usu√°rio n√£o respondeu'}
`;

    const systemPrompt = `Voc√™ √© um tutor especializado em prepara√ß√£o para o ENEM. Sua tarefa √© explicar quest√µes de forma did√°tica e CONCISA.

Instru√ß√µes:
1. Seja DIRETO e OBJETIVO - m√°ximo 2 par√°grafos para a explica√ß√£o principal
2. SEMPRE mencione o n√∫mero da quest√£o no in√≠cio da explica√ß√£o (ex: "Na Quest√£o #4...")
3. Explique por que a resposta correta est√° certa de forma clara
4. Se o usu√°rio respondeu errado, explique o erro de forma construtiva e breve
5. Forne√ßa UMA dica de estudo espec√≠fica e pr√°tica
6. Use linguagem clara e acess√≠vel para estudantes do ensino m√©dio
7. Evite explica√ß√µes longas e repetitivas
8. Foque no essencial para o aprendizado
9. N√ÉO inclua mensagens gen√©ricas de motiva√ß√£o ou frases como "persista para arrasar no ENEM"

Formato da resposta (M√ÅXIMO 150 palavras):
- Explica√ß√£o principal (1-2 par√°grafos curtos) - SEMPRE come√ßando com "Na Quest√£o #X..."
- Uma dica de estudo espec√≠fica

IMPORTANTE: Seja conciso! O estudante precisa entender rapidamente o conceito, n√£o uma disserta√ß√£o. N√ÉO inclua mensagens gen√©ricas de motiva√ß√£o.`

    // Chamada para Grok 4 Fast Reasoning
    const result = await callGrok(
      'grok-4-fast-reasoning',
      [],
      questionContext,
      systemPrompt
    );

    const explanation = result.text || generateFallbackExplanation(area, correct_answer, user_answer);

    // Persist token usage for ENEM explanations
    try {
      const session = await getServerSession(authOptions).catch(() => null);
      const totalTokens = result.usage?.total_tokens || Math.ceil((explanation?.length || 0) / 4);
      const userId = session?.user?.id;
      if (userId && totalTokens > 0) {
        await logTokens({
          userId,
          moduleGroup: 'ENEM',
          model: 'grok-4-fast-reasoning',
          totalTokens,
          subject: area,
          messages: { item_id, session_id }
        })
      }
    } catch (e) {
      console.warn('‚ö†Ô∏è [ENEM/EXPLANATION] Failed to log tokens:', e)
    }

    return NextResponse.json({
      explanation,
      item_id,
      session_id,
      success: true,
      source: 'grok'
    });

  } catch (error) {
    console.error('Error in POST /api/enem/explanation:', error);
    
    // Tentar fallback com GPT-4o Mini se dispon√≠vel
    if (process.env.OPENAI_API_KEY) {
      try {
        console.log('üîÑ Tentando fallback com GPT-4o Mini...');
        
        const questionContext = `
Quest√£o ENEM ${body.question_number ? `#${body.question_number}` : ''} - √Årea: ${body.area || 'N√£o especificada'}
Enunciado: ${body.question_text || 'Quest√£o n√£o dispon√≠vel'}

Alternativas:
${body.alternatives ? Object.entries(body.alternatives).map(([key, value]) => `${key}) ${value}`).join('\n') : 'Alternativas n√£o dispon√≠veis'}

Resposta correta: ${body.correct_answer || 'N√£o especificada'}
${body.user_answer ? `Resposta do usu√°rio: ${body.user_answer}` : 'Usu√°rio n√£o respondeu'}
`;

        const systemPrompt = `Voc√™ √© um tutor especializado em prepara√ß√£o para o ENEM. Sua tarefa √© explicar quest√µes de forma did√°tica e CONCISA.

Instru√ß√µes:
1. Seja DIRETO e OBJETIVO - m√°ximo 2 par√°grafos para a explica√ß√£o principal
2. SEMPRE mencione o n√∫mero da quest√£o no in√≠cio da explica√ß√£o (ex: "Na Quest√£o #4...")
3. Explique por que a resposta correta est√° certa de forma clara
4. Se o usu√°rio respondeu errado, explique o erro de forma construtiva e breve
5. Forne√ßa UMA dica de estudo espec√≠fica e pr√°tica
6. Use linguagem clara e acess√≠vel para estudantes do ensino m√©dio
7. Evite explica√ß√µes longas e repetitivas
8. Foque no essencial para o aprendizado
9. N√ÉO inclua mensagens gen√©ricas de motiva√ß√£o ou frases como "persista para arrasar no ENEM"

Formato da resposta (M√ÅXIMO 150 palavras):
- Explica√ß√£o principal (1-2 par√°grafos curtos) - SEMPRE come√ßando com "Na Quest√£o #X..."
- Uma dica de estudo espec√≠fica

IMPORTANTE: Seja conciso! O estudante precisa entender rapidamente o conceito, n√£o uma disserta√ß√£o. N√ÉO inclua mensagens gen√©ricas de motiva√ß√£o.`;

        const gptResponse = await openai.chat.completions.create({
          model: 'gpt-4o-mini',
          messages: [
            { role: 'system', content: systemPrompt },
            { role: 'user', content: questionContext }
          ],
          max_tokens: 300,
          temperature: 0.7
        });

        const explanation = gptResponse.choices[0]?.message?.content || generateFallbackExplanation(body.area, body.correct_answer, body.user_answer);

        // Log tokens do GPT-4o Mini
        try {
          const session = await getServerSession(authOptions).catch(() => null);
          const totalTokens = gptResponse.usage?.total_tokens || Math.ceil((explanation?.length || 0) / 4);
          const userId = session?.user?.id;
          if (userId && totalTokens > 0) {
            await logTokens({
              userId,
              moduleGroup: 'ENEM',
              model: 'gpt-4o-mini',
              totalTokens,
              subject: body.area,
              messages: { item_id: body.item_id, session_id: body.session_id }
            })
          }
        } catch (e) {
          console.warn('‚ö†Ô∏è [ENEM/EXPLANATION] Failed to log GPT tokens:', e)
        }

        return NextResponse.json({
          explanation,
          item_id: body.item_id,
          session_id: body.session_id,
          success: true,
          source: 'gpt-4o-mini'
        });

      } catch (gptError) {
        console.error('GPT-4o Mini fallback also failed:', gptError);
      }
    }
    
    // Fallback final com explica√ß√£o gen√©rica
    const fallbackExplanation = generateFallbackExplanation(
      body.area, 
      body.correct_answer, 
      body.user_answer
    );
    
    return NextResponse.json({
      explanation: fallbackExplanation,
      item_id: body.item_id,
      session_id: body.session_id,
      success: true,
      source: 'fallback'
    });
  }
}

// Fun√ß√£o de fallback para quando ambas as APIs n√£o estiverem dispon√≠veis
function generateFallbackExplanation(area?: string, correctAnswer?: string, userAnswer?: string): string {
  const areaNames: Record<string, string> = {
    'CN': 'Ci√™ncias da Natureza',
    'CH': 'Ci√™ncias Humanas', 
    'LC': 'Linguagens e C√≥digos',
    'MT': 'Matem√°tica'
  };

  const areaName = areaNames[area || ''] || 'esta √°rea';

  let explanation = `Na Quest√£o #${Math.floor(Math.random() * 100) + 1}, esta quest√£o aborda conceitos importantes de ${areaName}. `;
  
  if (userAnswer && userAnswer !== correctAnswer) {
    explanation += `Voc√™ respondeu "${userAnswer}", mas a resposta correta √© "${correctAnswer}". `;
    explanation += `√â importante revisar os conceitos fundamentais relacionados a esta quest√£o para evitar erros similares. `;
  } else if (!userAnswer) {
    explanation += `A resposta correta √© "${correctAnswer}". `;
    explanation += `Para quest√µes similares, leia cuidadosamente o enunciado e identifique as informa√ß√µes-chave. `;
  } else {
    explanation += `A resposta correta "${correctAnswer}" est√° fundamentada em princ√≠pios espec√≠ficos da disciplina. `;
    explanation += `Continue praticando para consolidar seu conhecimento nesta √°rea. `;
  }

  explanation += `\n\n**Dica de estudo:** Revise os conceitos fundamentais relacionados a esta quest√£o e pratique exerc√≠cios similares para consolidar seu aprendizado.`;

  return explanation;
}
