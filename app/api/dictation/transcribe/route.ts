import { NextRequest, NextResponse } from 'next/server'
import { callGrok } from '@/lib/providers/grok'
import { GoogleGenerativeAI } from '@google/generative-ai'
import { getServerSession } from 'next-auth'
import { authOptions } from '@/lib/auth'

export const dynamic = 'force-dynamic'

export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions)
    if (!session) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const formData = await request.formData()
    const audioFile = formData.get('audio') as File

    if (!audioFile) {
      return NextResponse.json({ error: 'No audio file provided' }, { status: 400 })
    }

    console.log(`üé§ [DICTATION] Processing audio file: ${audioFile.name} (${audioFile.size} bytes)`)

    // Verificar se temos as chaves de API necess√°rias
    if (!process.env.GEMINI_API_KEY) {
      return NextResponse.json({
        error: 'Gemini API key not configured for audio transcription'
      }, { status: 500 })
    }

    // Converter arquivo de √°udio para base64
    const arrayBuffer = await audioFile.arrayBuffer()
    const base64Audio = Buffer.from(arrayBuffer).toString('base64')

    // Determinar o tipo MIME correto
    let mimeType = audioFile.type
    if (!mimeType || mimeType === '') {
      // Tentar detectar pelo nome do arquivo
      const fileName = audioFile.name.toLowerCase()
      if (fileName.includes('.webm')) mimeType = 'audio/webm'
      else if (fileName.includes('.mp3')) mimeType = 'audio/mpeg'
      else if (fileName.includes('.wav')) mimeType = 'audio/wav'
      else if (fileName.includes('.ogg')) mimeType = 'audio/ogg'
      else mimeType = 'audio/webm' // Padr√£o
    }

    console.log(`üîó [DICTATION] Transcribing audio with Gemini 2.5... (${mimeType})`)

    // Usar Gemini para transcri√ß√£o (suporta √°udio)
    const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY)
    const model = genAI.getGenerativeModel({ model: 'gemini-2.5-flash' })

    const result = await model.generateContent([
      {
        inlineData: {
          mimeType: mimeType,
          data: base64Audio
        }
      },
      'Transcreva este √°udio em portugu√™s brasileiro. Seja preciso e mantenha a formata√ß√£o natural da fala.'
    ])

    const response = await result.response
    const transcriptionText = response.text()

    if (!transcriptionText || transcriptionText.trim() === '') {
      console.log('‚ö†Ô∏è [DICTATION] Empty transcription received from Gemini')
      return NextResponse.json({
        error: 'Falha na transcri√ß√£o do √°udio - resposta vazia',
        details: 'O √°udio pode estar muito curto ou com qualidade insuficiente'
      }, { status: 500 })
    }

    console.log(`‚úÖ [DICTATION] Audio transcribed successfully with Gemini 2.5 (${transcriptionText.length} chars)`)

    // Se temos Grok dispon√≠vel, usar para polir a transcri√ß√£o
    let polishedText = transcriptionText
    if (process.env.GROK_API_KEY) {
      try {
        console.log('üöÄ [DICTATION] Polishing transcription with Grok 4 Fast...')
        
        const polishResult = await callGrok(
          'grok-4-fast-reasoning',
          [],
          `Polir esta transcri√ß√£o de √°udio para torn√°-la mais clara e organizada, mantendo todo o conte√∫do original:

${transcriptionText}

Instru√ß√µes:
- Remova palavras de preenchimento (um, uh, n√©, tipo)
- Corrija repeti√ß√µes desnecess√°rias
- Mantenha a formata√ß√£o natural
- Organize em par√°grafos quando apropriado
- Preserve todo o conte√∫do original`,
          'Voc√™ √© um especialista em edi√ß√£o de transcri√ß√µes. Sempre mantenha o conte√∫do original enquanto melhora a clareza e organiza√ß√£o do texto.'
        )

        polishedText = polishResult.text
        console.log('‚úÖ [DICTATION] Transcription polished successfully with Grok 4 Fast')
      } catch (grokError) {
        console.log('‚ö†Ô∏è [DICTATION] Grok polishing failed, using raw transcription:', grokError)
        // Continuar com a transcri√ß√£o original se Grok falhar
      }
    }

    return NextResponse.json({
      success: true,
      transcription: polishedText,
      rawTranscription: transcriptionText,
      audioInfo: {
        name: audioFile.name,
        size: audioFile.size,
        type: audioFile.type
      },
      timestamp: new Date().toISOString(),
      aiProviders: {
        transcription: 'gemini-2.5-flash',
        polishing: process.env.GROK_API_KEY ? 'grok-4-fast-reasoning' : 'none'
      }
    })

  } catch (error: any) {
    console.error('‚ùå [DICTATION] Processing error:', error)
    return NextResponse.json({
      error: 'Failed to process audio',
      details: error.message
    }, { status: 500 })
  }
}
