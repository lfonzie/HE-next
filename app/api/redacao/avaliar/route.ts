import { NextRequest, NextResponse } from 'next/server'

// Prevent prerendering of this API route

// Prevent prerendering of this API route
export const dynamic = 'force-dynamic';


import { getServerSession } from 'next-auth'


import { authOptions } from '@/lib/auth'


import { prisma } from '@/lib/prisma'


import { OpenAI } from 'openai'


import { logTokens } from '@/lib/token-logger'
import { saveRedacaoToNeo4j, saveRedacaoEvaluationToNeo4j } from '@/lib/neo4j'

// Cache simples em mem√≥ria para avalia√ß√µes similares
const evaluationCache = new Map<string, { evaluation: RedacaoEvaluation, timestamp: number }>()
const CACHE_TTL = 30 * 60 * 1000 // 30 minutos



const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
})

// Fun√ß√£o para gerar chave de cache baseada no conte√∫do e tema
function generateCacheKey(content: string, theme: string): string {
  // Normalizar conte√∫do: remover espa√ßos extras, converter para min√∫sculas
  const normalizedContent = content.toLowerCase().replace(/\s+/g, ' ').trim()
  const normalizedTheme = theme.toLowerCase().replace(/\s+/g, ' ').trim()
  
  // Criar hash simples baseado no conte√∫do e tema
  const contentHash = normalizedContent.slice(0, 200) // Primeiros 200 caracteres
  const themeHash = normalizedTheme.slice(0, 100) // Primeiros 100 caracteres
  
  return `${themeHash}_${contentHash}`.replace(/[^a-z0-9_]/g, '')
}

// Fun√ß√£o para verificar cache
function getCachedEvaluation(content: string, theme: string): { evaluation: RedacaoEvaluation, cacheHit: boolean } | null {
  const cacheKey = generateCacheKey(content, theme)
  const cached = evaluationCache.get(cacheKey)
  
  if (cached && (Date.now() - cached.timestamp) < CACHE_TTL) {
    console.log('üéØ [CACHE] Avalia√ß√£o encontrada no cache para tema similar')
    return { evaluation: cached.evaluation, cacheHit: true }
  }
  
  // Limpar cache expirado
  if (cached) {
    evaluationCache.delete(cacheKey)
  }
  
  return null
}

// Fun√ß√£o para salvar no cache
function setCachedEvaluation(content: string, theme: string, evaluation: RedacaoEvaluation): void {
  const cacheKey = generateCacheKey(content, theme)
  evaluationCache.set(cacheKey, {
    evaluation,
    timestamp: Date.now()
  })
  
  // Limitar tamanho do cache (manter apenas 100 entradas)
  if (evaluationCache.size > 100) {
    const firstKey = evaluationCache.keys().next().value
    evaluationCache.delete(firstKey)
  }
}

interface RedacaoSubmission {
  theme: string
  themeText?: string // Texto completo do tema para temas de IA
  content: string
  wordCount: number
  uploadedFileName?: string
  uploadedFileSize?: number
}

interface CompetenciaScore {
  comp1: number // Dom√≠nio da norma padr√£o (0-200)
  comp2: number // Compreens√£o do tema (0-200)
  comp3: number // Organiza√ß√£o de argumentos (0-200)
  comp4: number // Mecanismos lingu√≠sticos (0-200)
  comp5: number // Proposta de interven√ß√£o (0-200)
}

interface RedacaoEvaluation {
  scores: CompetenciaScore
  totalScore: number
  feedback: string
  suggestions: string[]
  highlights: {
    grammar: string[]
    structure: string[]
    content: string[]
  }
}

export async function POST(request: NextRequest) {
  try {
    // Verificar autentica√ß√£o
    const session = await getServerSession(authOptions)
    if (!session?.user?.id) {
      return NextResponse.json({ error: 'N√£o autorizado' }, { status: 401 })
    }

    const body: RedacaoSubmission = await request.json()
    const { theme, themeText, content, wordCount, uploadedFileName, uploadedFileSize } = body

    // Valida√ß√µes b√°sicas
    if (!theme || !content) {
      return NextResponse.json({ error: 'Tema e conte√∫do s√£o obrigat√≥rios' }, { status: 400 })
    }

    if (wordCount < 100 || wordCount > 1000) {
      return NextResponse.json({ 
        error: 'A reda√ß√£o deve ter entre 100 e 1000 palavras' 
      }, { status: 400 })
    }

    // Verificar se o usu√°rio existe
    const user = await prisma.user.findUnique({
      where: { id: session.user.id },
      select: { id: true, name: true, email: true }
    })

    if (!user) {
      return NextResponse.json({ error: 'Usu√°rio n√£o encontrado' }, { status: 404 })
    }

    // Obter tema selecionado
    let finalThemeText = themeText
    if (!finalThemeText) {
      const selectedTheme = await getThemeById(theme)
      if (!selectedTheme) {
        return NextResponse.json({ error: 'Tema n√£o encontrado' }, { status: 404 })
      }
      finalThemeText = selectedTheme.theme
    }

    // Avaliar reda√ß√£o com IA
    const evaluationStartTime = Date.now()
    const evaluationResult = await evaluateRedacao(content, finalThemeText)
    const evaluationEndTime = Date.now()
    const totalEvaluationTime = evaluationEndTime - evaluationStartTime
    
    const { evaluation, cacheHit } = evaluationResult

    // Gerar ID da sess√£o e salvar no banco de dados
    const sessionId = crypto.randomUUID()

    // Salvar resultado no banco de dados
    const selectedTheme = await getThemeById(theme)
    
    // Criar sess√£o de reda√ß√£o
    await prisma.essay_sessions.create({
      data: {
        id: sessionId,
        user_id: session.user.id,
        topic_prompt: finalThemeText,
        area: 'Linguagens',
        status: 'completed'
      }
    })

    // Salvar pontua√ß√£o geral
    await prisma.essay_overall_scores.create({
      data: {
        session_id: sessionId,
        total: evaluation.totalScore,
        comp1: evaluation.scores.comp1,
        comp2: evaluation.scores.comp2,
        comp3: evaluation.scores.comp3,
        comp4: evaluation.scores.comp4,
        comp5: evaluation.scores.comp5,
        issues: {
          feedback: evaluation.feedback,
          suggestions: evaluation.suggestions,
          highlights: evaluation.highlights || {},
          wordCount: wordCount,
          themeYear: selectedTheme?.year || 2024
        }
      }
    })

    // Salvar conte√∫do da reda√ß√£o como par√°grafo √∫nico
    await prisma.essay_paragraphs.create({
      data: {
        session_id: sessionId,
        idx: 0,
        content: content
      }
    })

    // Persistir uso de tokens (aproxima√ß√£o baseada no tamanho do conte√∫do)
    try {
      const estimatedTokens = Math.ceil((content?.length || 0) / 4)
      await logTokens({
        userId: session.user.id,
        moduleGroup: 'Redacao',
        model: 'grok-4-fast-reasoning',
        totalTokens: estimatedTokens,
        subject: finalThemeText,
        messages: { wordCount, uploadedFileName, uploadedFileSize }
      })
    } catch (e) {
      console.warn('‚ö†Ô∏è [REDACAO] Failed to log tokens:', e)
    }

    // Salvar no Neo4j se configurado
    if (process.env.NEO4J_URI && process.env.NEO4J_USER && process.env.NEO4J_PASSWORD) {
      try {
        console.log('üíæ [NEO4J] Salvando reda√ß√£o e avalia√ß√£o no Neo4j...')
        
        // Preparar dados da reda√ß√£o para Neo4j
        const redacaoData = {
          id: sessionId,
          title: `Reda√ß√£o sobre ${finalThemeText}`,
          theme: finalThemeText,
          themeYear: selectedTheme?.year || new Date().getFullYear(),
          content: content,
          wordCount: wordCount
        }
        
        // Salvar reda√ß√£o no Neo4j
        const neo4jRedacaoId = await saveRedacaoToNeo4j(redacaoData, session.user.id)
        console.log('‚úÖ [NEO4J] Reda√ß√£o salva com ID:', neo4jRedacaoId)
        
        // Preparar dados da avalia√ß√£o para Neo4j
        const evaluationData = {
          id: `eval_${sessionId}`,
          totalScore: evaluation.totalScore,
          scores: evaluation.scores,
          feedback: evaluation.feedback,
          suggestions: evaluation.suggestions,
          highlights: evaluation.highlights
        }
        
        // Salvar avalia√ß√£o no Neo4j
        const neo4jEvaluationId = await saveRedacaoEvaluationToNeo4j(evaluationData, sessionId, session.user.id)
        console.log('‚úÖ [NEO4J] Avalia√ß√£o salva com ID:', neo4jEvaluationId)
        
      } catch (neo4jError) {
        console.warn('‚ö†Ô∏è [NEO4J] Erro ao salvar no Neo4j (continuando):', neo4jError)
        // N√£o falhar a opera√ß√£o se o Neo4j n√£o estiver dispon√≠vel
      }
    } else {
      console.log('‚ÑπÔ∏è [NEO4J] Neo4j n√£o configurado, pulando salvamento')
    }

    // Log da atividade (modelo activityLog n√£o implementado no schema atual)

    return NextResponse.json({
      success: true,
      sessionId: sessionId,
      evaluation: {
        scores: evaluation.scores,
        totalScore: evaluation.totalScore,
        feedback: evaluation.feedback,
        suggestions: evaluation.suggestions
      },
      performance: {
        evaluationTimeMs: totalEvaluationTime,
        wordCount: wordCount,
        characterCount: content.length,
        cacheHit: cacheHit
      }
    })

  } catch (error) {
    console.error('Erro ao avaliar reda√ß√£o:', error)
    return NextResponse.json(
      { error: 'Erro interno do servidor' },
      { status: 500 }
    )
  }
}

async function getThemeById(themeId: string) {
  // Se for um tema de IA, buscar no banco de dados
  if (themeId.startsWith('ai-')) {
    try {
      const savedTheme = await prisma.conversations.findFirst({
        where: {
          user_id: '00000000-0000-0000-0000-000000000000',
          module: 'redacao',
          subject: {
            startsWith: 'Tema:'
          }
        },
        orderBy: {
          created_at: 'desc'
        }
      })

      if (savedTheme) {
        try {
          const messages = savedTheme.messages as any[]
          const themeData = JSON.parse((messages[0]?.content as string) || '{}')
          
          // Verificar se √© o tema correto pelo ID
          if (themeData.themeId === themeId) {
            return {
              id: themeData.themeId,
              year: themeData.year || 2025,
              theme: themeData.theme || 'Tema gerado por IA'
            }
          }
        } catch (error) {
          console.warn('Erro ao processar tema de IA:', error)
        }
      }
    } catch (error) {
      console.warn('Erro ao buscar tema de IA no banco:', error)
    }
    
    // Fallback se n√£o encontrar
    return {
      id: themeId,
      year: 2025,
      theme: `Tema gerado por IA (${themeId})`
    }
  }

  // Buscar tema no banco ou retornar tema padr√£o
  const themes = [
    {
      id: '2023-1',
      year: 2023,
      theme: 'Desafios para o combate √† invisibilidade e ao registro civil de pessoas em situa√ß√£o de rua no Brasil'
    },
    {
      id: '2022-1', 
      year: 2022,
      theme: 'Desafios para a valoriza√ß√£o de comunidades e povos tradicionais no Brasil'
    },
    {
      id: '2021-1',
      year: 2021,
      theme: 'Invisibilidade e registro civil: garantia de acesso √† cidadania no Brasil'
    }
  ]

  return themes.find(t => t.id === themeId) || themes[0]
}

async function evaluateRedacao(content: string, theme: string): Promise<{ evaluation: RedacaoEvaluation, cacheHit: boolean }> {
  // Verificar cache primeiro
  const cachedResult = getCachedEvaluation(content, theme)
  if (cachedResult) {
    return cachedResult
  }

  const startTime = Date.now()
  console.log('üöÄ [GROK] Iniciando avalia√ß√£o de reda√ß√£o...')
  
  const prompt = `
Voc√™ √© um corretor especialista do ENEM com anos de experi√™ncia. Sua tarefa √© avaliar esta reda√ß√£o seguindo RIGOROSAMENTE os crit√©rios oficiais do ENEM, fornecendo feedback PERSONALIZADO baseado no conte√∫do espec√≠fico da reda√ß√£o.

TEMA: ${theme}

REDA√á√ÉO PARA AVALIA√á√ÉO:
${content}

## INSTRU√á√ïES CR√çTICAS:
1. Analise CADA palavra, frase e par√°grafo da reda√ß√£o
2. Identifique erros espec√≠ficos e problemas concretos
3. Forne√ßa feedback detalhado e personalizado
4. N√ÉO use feedback gen√©rico ou padr√£o
5. Baseie suas observa√ß√µes no conte√∫do REAL da reda√ß√£o

## CRIT√âRIOS DE AVALIA√á√ÉO DO ENEM:

### COMPET√äNCIA 1 (0-200): Dom√≠nio da Modalidade Escrita Formal da L√≠ngua Portuguesa
**Aspectos avaliados:**
- Ortografia e acentua√ß√£o (erros sistem√°ticos reduzem nota)
- Concord√¢ncia nominal e verbal (consist√™ncia entre sujeito, verbo e complementos)
- Reg√™ncia nominal e verbal (uso apropriado de preposi√ß√µes e complementos)
- Pontua√ß√£o (emprego correto de v√≠rgulas, pontos, dois-pontos)
- Vocabul√°rio formal adequado

**N√≠veis de desempenho:**
- 0-40: Aus√™ncia total de dom√≠nio, muitos erros graves
- 41-80: Dom√≠nio insuficiente, erros frequentes
- 81-120: Dom√≠nio mediano, alguns erros
- 121-160: Bom dom√≠nio, poucos desvios
- 161-200: Dom√≠nio excelente, sem erros ou desvios isolados

### COMPET√äNCIA 2 (0-200): Compreender a Proposta e Aplicar Conceitos das V√°rias √Åreas
**Aspectos avaliados:**
- Compreens√£o do tema proposto (ades√£o direta, sem tangenciar)
- Estrutura dissertativa-argumentativa (introdu√ß√£o, desenvolvimento, conclus√£o)
- Integra√ß√£o de conhecimentos interdisciplinares (hist√≥ria, sociologia, filosofia, ci√™ncias)
- Desenvolvimento amplo e integrado do tema

**N√≠veis de desempenho:**
- 0-40: Fuga total ao tema ou n√£o atendimento ao g√™nero
- 41-80: Tangenciamento ou desenvolvimento superficial
- 81-120: Desenvolvimento adequado do tema
- 121-160: Bom desenvolvimento com conhecimentos interdisciplinares
- 161-200: Desenvolvimento amplo e integrado, estrutura impec√°vel

### COMPET√äNCIA 3 (0-200): Selecionar, Relacionar, Organizar e Interpretar Informa√ß√µes
**Aspectos avaliados:**
- Sele√ß√£o de argumentos relevantes e diversos
- Organiza√ß√£o l√≥gica com progress√£o do racioc√≠nio
- Interpreta√ß√£o cr√≠tica das informa√ß√µes
- Rela√ß√£o entre fatos, dados, opini√µes e exemplos
- Defesa consistente de uma tese clara

**N√≠veis de desempenho:**
- 0-40: Aus√™ncia de argumentos ou organiza√ß√£o
- 41-80: Argumentos fracos ou mal organizados
- 81-120: Argumenta√ß√£o adequada
- 121-160: Boa argumenta√ß√£o com interpreta√ß√£o cr√≠tica
- 161-200: Argumenta√ß√£o sofisticada, repert√≥rio amplo, interpreta√ß√£o profunda

### COMPET√äNCIA 4 (0-200): Demonstrar Conhecimento dos Mecanismos Lingu√≠sticos
**Aspectos avaliados:**
- Coes√£o referencial (pronomes, sin√¥nimos, elipses)
- Coes√£o sequencial (conectores: "portanto", "entretanto", "al√©m disso")
- Coer√™ncia global (consist√™ncia tem√°tica, aus√™ncia de contradi√ß√µes)
- Variedade lexical e sint√°tica
- Mecanismos lingu√≠sticos avan√ßados

**N√≠veis de desempenho:**
- 0-40: Falta de conex√£o entre ideias
- 41-80: Conex√µes inadequadas ou repetitivas
- 81-120: Coes√£o e coer√™ncia adequadas
- 121-160: Boa articula√ß√£o textual
- 161-200: Constru√ß√£o argumentativa coesa e coerente, mecanismos avan√ßados

### COMPET√äNCIA 5 (0-200): Elaborar Proposta de Interven√ß√£o
**Aspectos avaliados:**
- Detalhamento da proposta (a√ß√µes, agentes, meios, efeitos)
- Viabilidade e originalidade da proposta
- Respeito aos direitos humanos
- Articula√ß√£o l√≥gica com a argumenta√ß√£o anterior
- Proposta espec√≠fica e n√£o gen√©rica

**N√≠veis de desempenho:**
- 0-40: Aus√™ncia de proposta ou viola√ß√£o de direitos humanos
- 41-80: Proposta vaga ou invi√°vel
- 81-120: Proposta adequada mas gen√©rica
- 121-160: Boa proposta com detalhamento
- 161-200: Proposta detalhada, articulada e alinhada a valores √©ticos

## FORMATO DE RESPOSTA OBRIGAT√ìRIO (JSON):
{
  "scores": {
    "comp1": 0-200,
    "comp2": 0-200,
    "comp3": 0-200,
    "comp4": 0-200,
    "comp5": 0-200
  },
  "totalScore": 0-1000,
  "feedback": "Feedback detalhado e PERSONALIZADO baseado no conte√∫do espec√≠fico desta reda√ß√£o. Mencione problemas concretos encontrados, pontos fortes espec√≠ficos e an√°lise detalhada do desenvolvimento do tema.\n\nIMPORTANTE: Use quebras de linha (\\n) para separar par√°grafos e melhorar a legibilidade do feedback.",
  "suggestions": [
    "Sugest√£o espec√≠fica baseada em problemas reais encontrados na reda√ß√£o",
    "Segunda sugest√£o concreta e personalizada",
    "Terceira sugest√£o direcionada ao conte√∫do espec√≠fico"
  ],
  "highlights": {
    "grammar": ["Erro gramatical espec√≠fico encontrado na reda√ß√£o", "Segundo erro gramatical espec√≠fico"],
    "structure": ["Problema estrutural espec√≠fico identificado", "Segundo problema estrutural espec√≠fico"],
    "content": ["Problema de conte√∫do espec√≠fico encontrado", "Segundo problema de conte√∫do espec√≠fico"]
  }
}

IMPORTANTE: 
1. Analise esta reda√ß√£o espec√≠fica e forne√ßa feedback √∫nico e personalizado. N√ÉO use feedback gen√©rico.
2. FORMATO DO FEEDBACK: Use quebras de linha (\\n) para separar par√°grafos e melhorar a legibilidade:
   - Primeiro par√°grafo: An√°lise geral da reda√ß√£o
   - Segundo par√°grafo: Pontos fortes espec√≠ficos encontrados
   - Terceiro par√°grafo: Problemas e pontos de melhoria identificados
   - Quarto par√°grafo: Avalia√ß√£o da proposta de interven√ß√£o (se aplic√°vel)
3. Seja espec√≠fico: mencione linhas, par√°grafos ou trechos espec√≠ficos da reda√ß√£o.
4. Use linguagem clara e did√°tica para o estudante.
`

  try {
    // Usar Grok Fast 4 para avalia√ß√£o mais precisa e r√°pida
    const response = await fetch('https://api.x.ai/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${process.env.GROK_API_KEY}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'grok-4-fast-reasoning',
        messages: [
          {
            role: 'system',
            content: 'Voc√™ √© um corretor especialista do ENEM com anos de experi√™ncia. Sempre forne√ßa feedback personalizado e detalhado baseado no conte√∫do espec√≠fico da reda√ß√£o. Responda sempre com JSON v√°lido conforme solicitado.'
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        temperature: 0.1, // Baixa temperatura para maior consist√™ncia
        max_tokens: 3000
      })
    })

    if (!response.ok) {
      const errorText = await response.text()
      console.error('Erro na API do Grok:', errorText)
      throw new Error(`Grok API error: ${response.status} - ${errorText}`)
    }

    const grokData = await response.json()
    const evaluationText = grokData.choices[0]?.message?.content

    if (!evaluationText) {
      throw new Error('Resposta vazia do Grok')
    }

    console.log('ü§ñ [GROK] Avalia√ß√£o recebida:', evaluationText.length, 'caracteres')

    // Extrair JSON da resposta
    let evaluation
    try {
      // Tentar encontrar JSON na resposta
      const jsonMatch = evaluationText.match(/\{[\s\S]*\}/)
      if (jsonMatch) {
        evaluation = JSON.parse(jsonMatch[0])
      } else {
        throw new Error('JSON n√£o encontrado na resposta do Grok')
      }
    } catch (parseError) {
      console.error('‚ùå Erro ao parsear resposta do Grok:', parseError)
      throw new Error('Falha ao processar resposta do Grok')
    }
    
    // Validar estrutura da resposta
    if (!evaluation.scores || !evaluation.feedback) {
      throw new Error('Resposta do Grok em formato inv√°lido')
    }

    // Calcular total score se n√£o fornecido
    if (!evaluation.totalScore) {
      evaluation.totalScore = Object.values(evaluation.scores).reduce((sum: number, score: number) => sum + score, 0)
    }

    // Garantir que highlights exista
    if (!evaluation.highlights) {
      evaluation.highlights = {
        grammar: [],
        structure: [],
        content: []
      }
    }

    const endTime = Date.now()
    const processingTime = endTime - startTime
    
    console.log('‚úÖ [GROK] Avalia√ß√£o processada com sucesso. Nota total:', evaluation.totalScore)
    console.log('‚è±Ô∏è [PERFORMANCE] Tempo de processamento:', processingTime, 'ms')
    
    // Salvar no cache para futuras avalia√ß√µes similares
    setCachedEvaluation(content, theme, evaluation)
    
    return { evaluation, cacheHit: false }

  } catch (error) {
    console.error('‚ùå Erro na avalia√ß√£o com Grok:', error)
    
    // Tentar novamente com GROK se for erro de rede
    if (error instanceof Error && error.message.includes('fetch')) {
      console.log('üîÑ Tentando novamente com GROK (erro de rede)...')
      try {
        await new Promise(resolve => setTimeout(resolve, 2000)) // Aguardar 2 segundos
        
        const retryResponse = await fetch('https://api.x.ai/v1/chat/completions', {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${process.env.GROK_API_KEY}`,
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            model: 'grok-4-fast-reasoning',
            messages: [
              {
                role: 'system',
                content: 'Voc√™ √© um corretor especialista do ENEM com anos de experi√™ncia. Sempre forne√ßa feedback personalizado e detalhado baseado no conte√∫do espec√≠fico da reda√ß√£o. Responda sempre com JSON v√°lido conforme solicitado.'
              },
              {
                role: 'user',
                content: prompt
              }
            ],
            temperature: 0.1,
            max_tokens: 3000
          })
        })

        if (retryResponse.ok) {
          const retryData = await retryResponse.json()
          const retryEvaluationText = retryData.choices[0]?.message?.content
          
          if (retryEvaluationText) {
            const jsonMatch = retryEvaluationText.match(/\{[\s\S]*\}/)
            if (jsonMatch) {
              const evaluation = JSON.parse(jsonMatch[0])
              if (evaluation.scores && evaluation.feedback) {
                if (!evaluation.totalScore) {
                  evaluation.totalScore = Object.values(evaluation.scores).reduce((sum: number, score: number) => sum + score, 0)
                }
                if (!evaluation.highlights) {
                  evaluation.highlights = { grammar: [], structure: [], content: [] }
                }
                
                console.log('‚úÖ [GROK RETRY] Avalia√ß√£o processada com sucesso na segunda tentativa')
                setCachedEvaluation(content, theme, evaluation)
                return { evaluation, cacheHit: false }
              }
            }
          }
        }
      } catch (retryError) {
        console.error('‚ùå Erro na segunda tentativa com GROK:', retryError)
      }
    }
    
    // Fallback para OpenAI em caso de erro
    console.log('üîÑ Tentando fallback para OpenAI...')
    try {
      const fallbackResponse = await openai.chat.completions.create({
      model: 'gpt-4o-mini',
      messages: [
        {
          role: 'system',
          content: 'Voc√™ √© um especialista em avalia√ß√£o de reda√ß√µes do ENEM. Responda sempre com JSON v√°lido.'
        },
        {
          role: 'user',
          content: prompt
        }
      ],
      temperature: 0.3,
      max_tokens: 2000
    })

      const evaluationText = fallbackResponse.choices[0]?.message?.content
    if (!evaluationText) {
      throw new Error('Resposta vazia da IA')
    }

    const evaluation = JSON.parse(evaluationText)
    
    if (!evaluation.scores || !evaluation.feedback) {
      throw new Error('Resposta da IA em formato inv√°lido')
    }

    if (!evaluation.totalScore) {
      evaluation.totalScore = Object.values(evaluation.scores).reduce((sum: number, score: number) => sum + score, 0)
    }

    return { evaluation, cacheHit: false }
    } catch (fallbackError) {
      console.error('‚ùå Erro no fallback OpenAI:', fallbackError)
      throw error // Re-throw o erro original do Grok
    }
  }
}
