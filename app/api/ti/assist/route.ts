import { NextRequest, NextResponse } from 'next/server'
import { z } from 'zod'
import { openai } from '@ai-sdk/openai'
import { generateText, streamText } from 'ai'

export const runtime = 'nodejs'

const requestSchema = z.object({
  message: z.string(),
  sessionId: z.string().optional(),
  issue: z.string().optional(),
  deviceLabel: z.string().optional()
})

export async function POST(req: NextRequest) {
  try {
    const body = await req.json()
    const { message, sessionId, issue, deviceLabel } = requestSchema.parse(body)

    console.log('TI Assist API called with:', { message, sessionId, issue, deviceLabel })

    // Check if OpenAI API key is available
    if (!process.env.OPENAI_API_KEY) {
      return NextResponse.json({
        error: 'OpenAI API not configured',
        message: 'A chave da API OpenAI n√£o est√° configurada. Verifique as vari√°veis de ambiente.'
      }, { status: 500 })
    }

    // Enhanced system prompt for AI-powered TI support
    const systemPrompt = `Voc√™ √© um t√©cnico de TI especializado em ambiente educacional brasileiro. Seu nome √© TechEdu e voc√™ trabalha especificamente com escolas p√∫blicas e privadas.

CONTEXTO ESPEC√çFICO:
- Ambiente: Escola brasileira (p√∫blica ou privada)
- Usu√°rio: ${deviceLabel ? `Funcion√°rio usando ${deviceLabel}` : 'Funcion√°rio da escola'}
- Problema: ${issue ? `Categoria: ${issue}` : 'Problema t√©cnico geral'}
- Urg√™ncia: Resolver rapidamente para n√£o afetar as aulas

METODOLOGIA PERSONALIZADA:
1. Analise o problema espec√≠fico mencionado: "${message}"
2. Considere o contexto educacional brasileiro
3. Forne√ßa solu√ß√µes pr√°ticas que funcionem em escolas
4. Use terminologia t√©cnica simples mas precisa
5. Inclua verifica√ß√µes espec√≠ficas para equipamentos escolares
6. Sugira alternativas quando necess√°rio

FORMATO DE RESPOSTA:
üîß **DIAGN√ìSTICO R√ÅPIDO**
[An√°lise espec√≠fica do problema mencionado]

‚ö° **SOLU√á√ÉO IMEDIATA** 
[Passo a passo espec√≠fico para resolver AGORA]

üîç **VERIFICA√á√ïES ESPEC√çFICAS**
[Checagens espec√≠ficas para o problema]

üìã **PR√ìXIMOS PASSOS**
[O que fazer se n√£o resolver]

‚ö†Ô∏è **ESCALA√á√ÉO**
[Quando chamar o t√©cnico da escola]

IMPORTANTE: Seja espec√≠fico sobre o problema mencionado. N√£o d√™ respostas gen√©ricas. Foque na situa√ß√£o exata descrita pelo usu√°rio.`

    // AI-powered response
    const result = await generateText({
      model: openai('gpt-4o-mini'),
      system: systemPrompt,
      prompt: message,
    })

    return NextResponse.json({
      success: true,
      message: result.text,
      sessionId: sessionId || 'session-' + Date.now(),
      timestamp: new Date().toISOString(),
      aiPowered: true
    })

  } catch (error) {
    console.error('TI Assist API error:', error)
    
    if (error instanceof z.ZodError) {
      return NextResponse.json(
        { error: 'Invalid request data', details: error.errors },
        { status: 400 }
      )
    }

    return NextResponse.json(
      { error: 'Internal server error', details: error instanceof Error ? error.message : 'Unknown error' },
      { status: 500 }
    )
  }
}

// GET endpoint for testing
export async function GET(req: NextRequest) {
  return NextResponse.json({
    success: true,
    message: 'TI Assist API with AI is working',
    timestamp: new Date().toISOString(),
    features: ['AI-powered responses', 'Educational context'],
    openaiConfigured: !!process.env.OPENAI_API_KEY
  })
}