import { NextRequest, NextResponse } from 'next/server';

// Prevent prerendering of this API route

// Prevent prerendering of this API route
export const dynamic = 'force-dynamic';


import OpenAI from 'openai';



const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

export async function POST(request: NextRequest) {
  try {
    const { query, subject, slideIndex } = await request.json();

    if (!query || !slideIndex) {
      return NextResponse.json(
        { success: false, error: 'Query e slideIndex s√£o obrigat√≥rios' },
        { status: 400 }
      );
    }

    console.log(`üéì Gerando slide ${slideIndex} para:`, query, 'Subject:', subject);

    // Determinar tipo de slide baseado no √≠ndice (slides 4 e 7 s√£o perguntas)
    const isQuestionSlide = slideIndex === 4 || slideIndex === 7;
    const isFinalSlide = slideIndex === 8;
    
    // Determinar contexto espec√≠fico do progresso da aula
    const progressContext = slideIndex === 1 ? 'introdu√ß√£o inicial' :
                           slideIndex === 2 ? 'conceitos fundamentais' :
                           slideIndex === 3 ? 'desenvolvimento inicial' :
                           slideIndex === 4 ? 'primeira verifica√ß√£o' :
                           slideIndex === 5 ? 'aplica√ß√µes pr√°ticas' :
                           slideIndex === 6 ? 'exerc√≠cios e exemplos' :
                           slideIndex === 7 ? 'segunda verifica√ß√£o' :
                           slideIndex === 8 ? 'conclus√£o e resumo' : 'final';
    
    console.log(`üìù Gerando slide ${slideIndex}, tipo: ${isQuestionSlide ? 'pergunta' : 'explica√ß√£o'}, contexto: ${progressContext}`);

    const slideType = isQuestionSlide ? 'question' : 'explanation';
    
    // Prompts espec√≠ficos para cada tipo de slide
    let systemPrompt = '';
    let userPrompt = '';

    if (isQuestionSlide) {
      systemPrompt = `Voc√™ √© um professor especializado em criar perguntas educativas sobre ${query}.

      Crie uma pergunta de m√∫ltipla escolha √öNICA com 4 op√ß√µes (A, B, C, D) seguindo esta estrutura:
      - Pergunta contextualizada e desafiadora espec√≠fica para o slide ${slideIndex}
      - 4 op√ß√µes de resposta bem elaboradas e √∫nicas
      - Uma resposta correta bem fundamentada
      - Explica√ß√£o detalhada da resposta correta
      - N√ÉO repita conte√∫do de slides anteriores
      - Foque em aspectos espec√≠ficos do slide ${slideIndex}
      - IMPORTANTE: Use formata√ß√£o markdown no conte√∫do (## para t√≠tulos, **negrito**, *it√°lico*, - para listas, quebras de linha duplas)
      
      Responda APENAS com JSON v√°lido:
      {
        "type": "question",
        "card1": {
          "title": "Pergunta",
          "content": "Texto da pergunta detalhada e contextualizada"
        },
        "card2": {
          "title": "Op√ß√µes de Resposta",
          "content": "Escolha a resposta que melhor representa seu entendimento:",
          "options": ["Op√ß√£o A", "Op√ß√£o B", "Op√ß√£o C", "Op√ß√£o D"],
          "correctOption": 0,
          "helpMessage": "Dica para ajudar na resposta",
          "correctAnswer": "Explica√ß√£o detalhada da resposta correta"
        }
      }`;

      userPrompt = `Crie uma pergunta √öNICA sobre ${query} para o slide ${slideIndex} (contexto: ${progressContext}). Esta pergunta deve ser espec√≠fica para este momento da aula e testar conhecimentos espec√≠ficos do slide ${slideIndex}. N√ÉO repita conte√∫do de slides anteriores. A pergunta deve ter n√≠vel de dificuldade apropriado para o progresso da aula (${progressContext}).`;
    } else if (isFinalSlide) {
      systemPrompt = `Voc√™ √© um professor especializado em criar resumos e conclus√µes educativas sobre ${query}.

      Crie um slide de conclus√£o seguindo esta estrutura:
      - Resumo abrangente do conte√∫do estudado
      - Conclus√µes importantes e aplica√ß√µes pr√°ticas
      - Recomenda√ß√µes para continuar aprendendo
      - O slide 8 deve incluir uma imagem diferente relacionada ao tema
      
      Responda APENAS com JSON v√°lido:
      {
        "type": "explanation",
        "card1": {
          "title": "Resumo do Conte√∫do",
          "content": "Resumo detalhado dos principais pontos aprendidos"
        },
        "card2": {
          "title": "Conclus√£o e Pr√≥ximos Passos",
          "content": "Conclus√µes importantes e recomenda√ß√µes para continuar aprendendo",
          "imageUrl": "URL de uma imagem diferente relacionada ao tema"
        }
      }`;

      userPrompt = `Crie um slide de conclus√£o √öNICO para ${query}. Este √© o slide final da aula e deve resumir todo o conte√∫do estudado de forma espec√≠fica e n√£o repetitiva. Inclua uma imagem diferente relacionada ao tema no segundo card.`;
    } else {
      // Prompts espec√≠ficos baseados no contexto do slide
      if (slideIndex === 1) {
        systemPrompt = `Voc√™ √© um professor especializado em criar conte√∫do educativo sobre ${query}.

        Crie um slide de APRESENTA√á√ÉO E MOTIVA√á√ÉO seguindo esta estrutura:
        - Card 1: Contexto hist√≥rico e relev√¢ncia atual do tema
        - Card 2: Impacto no mundo real e curiosidades interessantes
        - Foco em despertar curiosidade e mostrar a import√¢ncia pr√°tica
        - Linguagem envolvente com exemplos do cotidiano
        - Cada card deve ter aproximadamente 100-150 palavras
        - IMPORTANTE: Use formata√ß√£o markdown no conte√∫do (## para t√≠tulos, **negrito**, *it√°lico*, - para listas, quebras de linha duplas)
        
        Responda APENAS com JSON v√°lido:
        {
          "type": "explanation",
          "card1": {
            "title": "T√≠tulo do Card 1",
            "content": "Contexto hist√≥rico e relev√¢ncia atual"
          },
          "card2": {
            "title": "T√≠tulo do Card 2",
            "content": "Impacto real e curiosidades"
          }
        }`;

        userPrompt = `Crie um slide de APRESENTA√á√ÉO E MOTIVA√á√ÉO sobre ${query}. Este slide deve apresentar o contexto hist√≥rico do tema, sua relev√¢ncia atual, impacto no mundo real e curiosidades interessantes. Use exemplos do cotidiano para despertar curiosidade. N√ÉO fale sobre conceitos ou defini√ß√µes - apenas apresente o tema de forma motivacional.`;
      } else if (slideIndex === 2) {
        systemPrompt = `Voc√™ √© um professor especializado em criar conte√∫do educativo sobre ${query}.

        Crie um slide de DEFINI√á√ïES E TERMINOLOGIA seguindo esta estrutura:
        - Card 1: Defini√ß√µes precisas e terminologia espec√≠fica do tema
        - Card 2: Gloss√°rio de termos importantes e suas aplica√ß√µes
        - Foco em estabelecer vocabul√°rio t√©cnico correto
        - Linguagem precisa e t√©cnica
        - Cada card deve ter aproximadamente 100-150 palavras
        
        Responda APENAS com JSON v√°lido:
        {
          "type": "explanation",
          "card1": {
            "title": "T√≠tulo do Card 1",
            "content": "Defini√ß√µes precisas e terminologia"
          },
          "card2": {
            "title": "T√≠tulo do Card 2",
            "content": "Gloss√°rio de termos importantes"
          }
        }`;

        userPrompt = `Crie um slide de DEFINI√á√ïES E TERMINOLOGIA sobre ${query}. Este slide deve apresentar as defini√ß√µes precisas do tema, terminologia espec√≠fica e um gloss√°rio de termos importantes. Foque em estabelecer o vocabul√°rio t√©cnico correto. N√ÉO repita informa√ß√µes do slide anterior - seja espec√≠fico sobre defini√ß√µes e termos t√©cnicos.`;
      } else if (slideIndex === 3) {
        systemPrompt = `Voc√™ √© um professor especializado em criar conte√∫do educativo sobre ${query}.

        Crie um slide de MECANISMOS E PROCESSOS seguindo esta estrutura:
        - Card 1: Como funciona o tema - mecanismos internos e processos
        - Card 2: Etapas espec√≠ficas e fluxos de funcionamento
        - Foco em explicar o "como" e "por que" dos processos
        - Linguagem t√©cnica explicativa
        - Cada card deve ter aproximadamente 100-150 palavras
        
        Responda APENAS com JSON v√°lido:
        {
          "type": "explanation",
          "card1": {
            "title": "T√≠tulo do Card 1",
            "content": "Mecanismos internos e processos"
          },
          "card2": {
            "title": "T√≠tulo do Card 2",
            "content": "Etapas e fluxos de funcionamento"
          }
        }`;

        userPrompt = `Crie um slide de MECANISMOS E PROCESSOS sobre ${query}. Este slide deve explicar como o tema funciona internamente, seus mecanismos, processos espec√≠ficos e etapas de funcionamento. Foque em explicar o "como" e "por que" dos processos. N√ÉO repita defini√ß√µes ou contexto - seja espec√≠fico sobre mecanismos e processos internos.`;
      } else {
        systemPrompt = `Voc√™ √© um professor especializado em criar conte√∫do educativo sobre ${query}.

        Crie um slide explicativo √öNICO seguindo esta estrutura:
        - Conte√∫do principal claro e educativo espec√≠fico para o slide ${slideIndex}
        - Informa√ß√µes complementares e aplica√ß√µes pr√°ticas √∫nicas
        - Cada card deve ter aproximadamente 100-150 palavras de conte√∫do bem estruturado
        - Incluir exemplos pr√°ticos √∫nicos e explica√ß√µes claras espec√≠ficas
        - Usar linguagem did√°tica e envolvente
        - N√ÉO repetir conte√∫do de slides anteriores
        - Focar em aspectos espec√≠ficos do slide ${slideIndex}
        
        Responda APENAS com JSON v√°lido:
        {
          "type": "explanation",
          "card1": {
            "title": "T√≠tulo do Card 1",
            "content": "Conte√∫do claro e educativo do primeiro card (100-150 palavras)"
          },
          "card2": {
            "title": "T√≠tulo do Card 2",
            "content": "Conte√∫do claro e educativo do segundo card (100-150 palavras)"
          }
        }`;

        userPrompt = `Crie um slide explicativo √öNICO sobre ${query} para o slide ${slideIndex} (contexto: ${progressContext}). O conte√∫do deve ser espec√≠fico para este momento da aula, educativo, claro (100-150 palavras por card) e N√ÉO repetir conte√∫do de slides anteriores. Inclua exemplos pr√°ticos √∫nicos e explica√ß√µes concisas espec√≠ficas para o slide ${slideIndex}. O n√≠vel de complexidade deve ser apropriado para o contexto ${progressContext}.`;
      }
      
      // Adicionar contexto espec√≠fico para slides 5 e 6
      if (slideIndex === 5) {
        userPrompt += ` Este √© o slide de APLICA√á√ïES PR√ÅTICAS - foque em casos reais, implementa√ß√µes concretas e situa√ß√µes do mundo real onde ${query} √© aplicado.`;
      } else if (slideIndex === 6) {
        userPrompt += ` Este √© o slide de EXERC√çCIOS E EXEMPLOS - foque em exerc√≠cios pr√°ticos, resolu√ß√£o de problemas e exemplos detalhados com solu√ß√µes comentadas.`;
      }
    }

    const completion = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [
        {
          role: "system",
          content: systemPrompt
        },
        {
          role: "user",
          content: userPrompt
        }
      ],
      temperature: 0.7,
      max_tokens: 1500,
    });

    const responseText = completion.choices[0]?.message?.content;
    
    if (!responseText) {
      throw new Error('Resposta vazia da OpenAI');
    }

    // Limpar poss√≠vel formata√ß√£o markdown
    let cleanedResponse = responseText.trim();
    if (cleanedResponse.startsWith('```json')) {
      cleanedResponse = cleanedResponse.replace(/^```json\s*/, '').replace(/\s*```$/, '');
    } else if (cleanedResponse.startsWith('```')) {
      cleanedResponse = cleanedResponse.replace(/^```\s*/, '').replace(/\s*```$/, '');
    }

    // Tentar fazer parse do JSON
    let slide;
    try {
      slide = JSON.parse(cleanedResponse);
      console.log(`‚úÖ Slide ${slideIndex} gerado com sucesso`);
    } catch (parseError) {
      console.error('‚ùå JSON Parse Error:', parseError);
      
      // Fallback para slide b√°sico com conte√∫do reduzido
      slide = {
        type: slideType,
        card1: {
          title: isQuestionSlide ? 'Pergunta' : 'Conte√∫do Principal',
          content: isQuestionSlide 
            ? `Agora vamos testar nosso entendimento com uma pergunta pr√°tica sobre ${query}. Esta pergunta foi elaborada para avaliar nossa compreens√£o dos conceitos estudados e nossa capacidade de aplic√°-los em situa√ß√µes pr√°ticas.`
            : `Vamos explorar os aspectos fundamentais de ${query} neste slide ${slideIndex}. Este conte√∫do foi elaborado para proporcionar uma compreens√£o s√≥lida dos conceitos estudados atrav√©s de explica√ß√µes claras e exemplos pr√°ticos.`
        },
        card2: {
          title: isQuestionSlide ? 'Op√ß√µes de Resposta' : 'Detalhes Adicionais',
          content: isQuestionSlide 
            ? 'Analise cuidadosamente cada op√ß√£o apresentada abaixo. Considere qual melhor representa uma compreens√£o s√≥lida dos conceitos que estudamos.'
            : `Este segundo card complementa o conte√∫do apresentado no primeiro card, oferecendo informa√ß√µes adicionais e exemplos pr√°ticos de ${query}.`,
          ...(isQuestionSlide && {
            options: ['Op√ß√£o A: Conceito fundamental', 'Op√ß√£o B: Aplica√ß√£o pr√°tica', 'Op√ß√£o C: Exemplo espec√≠fico', 'Op√ß√£o D: Defini√ß√£o t√©cnica'],
            correctOption: 0,
            helpMessage: 'Pense no que aprendemos sobre os conceitos fundamentais de ${query}.',
            correctAnswer: 'A resposta correta √© a Op√ß√£o A, pois representa uma compreens√£o s√≥lida dos conceitos fundamentais.'
          })
        }
      };
    }

    return NextResponse.json({
      success: true,
      slide: slide
    });

  } catch (error: any) {
    console.error('‚ùå Erro na API slide:', error);
    
    return NextResponse.json(
      { 
        success: false, 
        error: 'Erro interno do servidor',
        details: error.message 
      },
      { status: 500 }
    );
  }
}
