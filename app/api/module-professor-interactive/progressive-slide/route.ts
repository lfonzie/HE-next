import { NextRequest, NextResponse } from 'next/server';

// Prevent prerendering of this API route

// Prevent prerendering of this API route
export const dynamic = 'force-dynamic';


import OpenAI from 'openai';



const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

export async function POST(request: NextRequest) {
  try {
    const { query, subject, slideNumber, slideInfo } = await request.json();

    if (!query || !slideNumber || !slideInfo) {
      return NextResponse.json(
        { success: false, error: 'Query, slideNumber e slideInfo s√£o obrigat√≥rios' },
        { status: 400 }
      );
    }

    console.log(`üìö Gerando slide ${slideNumber} para: ${query}`);

    const isQuestionSlide = slideNumber === 4 || slideNumber === 7;
    const isClosingSlide = slideNumber === 8;
    const slideType = isQuestionSlide ? 'question' : 'explanation';

    let systemPrompt = '';
    let userPrompt = '';

    if (isQuestionSlide) {
      systemPrompt = `Voc√™ √© um professor especializado em criar perguntas educativas sobre ${query}.

Crie uma pergunta de m√∫ltipla escolha √öNICA com 4 op√ß√µes (A, B, C, D) seguindo esta estrutura:
- Pergunta contextualizada e desafiadora espec√≠fica para o slide ${slideNumber}
- 4 op√ß√µes de resposta bem elaboradas e √∫nicas
- Uma resposta correta bem fundamentada
- Explica√ß√£o detalhada da resposta correta
- Foque no objetivo espec√≠fico: ${slideInfo.objective}

IMPORTANTE: Use formata√ß√£o markdown no conte√∫do:
- Use **texto** para negrito
- Use *texto* para it√°lico  
- Use ## para subt√≠tulos
- Use - para listas
- Use quebras de linha duplas (\\n\\n) para separar par√°grafos
- Cada par√°grafo deve ter 2-3 frases bem estruturadas

Responda APENAS com JSON v√°lido:
{
  "type": "question",
  "title": "${slideInfo.title}",
  "content": "Texto da pergunta detalhada com **formata√ß√£o markdown**",
  "options": ["Op√ß√£o A detalhada", "Op√ß√£o B detalhada", "Op√ß√£o C detalhada", "Op√ß√£o D detalhada"],
  "correctOption": 0,
  "helpMessage": "Dica para ajudar na resposta",
  "correctAnswer": "Explica√ß√£o detalhada da resposta correta com **formata√ß√£o markdown**",
  "imagePrompt": "${slideInfo.imagePrompt || query}"
}`;

      userPrompt = `Crie uma pergunta √öNICA sobre ${query} para o slide ${slideNumber}.

Objetivo: ${slideInfo.objective}
Resumo do conte√∫do: ${slideInfo.contentSummary}

A pergunta deve:
- Ser espec√≠fica para este momento da aula
- Testar conhecimentos espec√≠ficos do slide ${slideNumber}
- Ter n√≠vel de dificuldade apropriado
- Incluir formata√ß√£o markdown adequada
- Ter explica√ß√£o detalhada da resposta correta`;
    } else {
      systemPrompt = `Voc√™ √© um professor especializado em criar conte√∫do educativo sobre ${query}.

Crie um slide de ${slideType} seguindo esta estrutura:
- Card 1: Conte√∫do principal detalhado e educativo
- Card 2: Conte√∫do complementar ou aplica√ß√£o pr√°tica
- Foque no objetivo espec√≠fico: ${slideInfo.objective}
- Conte√∫do deve ser extenso e educativo (200-300 palavras por card)

IMPORTANTE: Use formata√ß√£o markdown no conte√∫do:
- Use **texto** para negrito
- Use *texto* para it√°lico  
- Use ## para subt√≠tulos
- Use - para listas
- Use quebras de linha duplas (\\n\\n) para separar par√°grafos
- Cada par√°grafo deve ter 2-3 frases bem estruturadas
- Inclua exemplos pr√°ticos e aplica√ß√µes reais

Responda APENAS com JSON v√°lido:
{
  "type": "explanation",
  "title": "${slideInfo.title}",
  "content": "Conte√∫do principal detalhado com **formata√ß√£o markdown** e quebras de linha adequadas",
  "imagePrompt": "${slideInfo.imagePrompt || query}"
}`;

      userPrompt = `Crie um slide de ${slideType} sobre ${query} para o slide ${slideNumber}.

Objetivo: ${slideInfo.objective}
Resumo do conte√∫do: ${slideInfo.contentSummary}

O slide deve:
- Ser espec√≠fico para este momento da aula
- Ter conte√∫do extenso e educativo (200-300 palavras)
- Incluir exemplos pr√°ticos e aplica√ß√µes reais
- Usar formata√ß√£o markdown adequada
- Ter quebras de linha para melhor legibilidade
- ${isClosingSlide ? 'Ser um resumo completo e motivacional' : 'Desenvolver o conte√∫do de forma progressiva'}`;
    }

    const completion = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [
        {
          role: "system",
          content: systemPrompt
        },
        {
          role: "user",
          content: userPrompt
        }
      ],
      temperature: 0.7,
      max_tokens: 2000,
    });

    const responseText = completion.choices[0]?.message?.content;
    
    if (!responseText) {
      throw new Error('Resposta vazia da OpenAI');
    }

    // Limpar poss√≠vel formata√ß√£o markdown
    let cleanedResponse = responseText.trim();
    if (cleanedResponse.startsWith('```json')) {
      cleanedResponse = cleanedResponse.replace(/^```json\s*/, '').replace(/\s*```$/, '');
    } else if (cleanedResponse.startsWith('```')) {
      cleanedResponse = cleanedResponse.replace(/^```\s*/, '').replace(/\s*```$/, '');
    }

    // Tentar fazer parse do JSON
    let slide;
    try {
      slide = JSON.parse(cleanedResponse);
      console.log(`‚úÖ Slide ${slideNumber} gerado com sucesso`);
    } catch (parseError) {
      console.error('‚ùå JSON Parse Error:', parseError);
      
      // Fallback para slide b√°sico
      slide = {
        type: slideType,
        title: slideInfo.title,
        content: isQuestionSlide 
          ? `## Pergunta sobre ${query}\n\nAgora vamos testar nosso entendimento com uma pergunta pr√°tica sobre **${query}**. Esta pergunta foi elaborada para avaliar nossa compreens√£o dos conceitos estudados.\n\n**Contexto:** ${slideInfo.contentSummary}\n\n**Objetivo:** ${slideInfo.objective}`
          : `## ${slideInfo.title}\n\nVamos explorar os aspectos fundamentais de **${query}** neste slide ${slideNumber}. Este conte√∫do foi elaborado para proporcionar uma compreens√£o s√≥lida dos conceitos estudados.\n\n**Objetivo:** ${slideInfo.objective}\n\n**Conte√∫do:** ${slideInfo.contentSummary}`,
        ...(isQuestionSlide && {
          options: [
            'Op√ß√£o A: Conceito fundamental relacionado ao tema',
            'Op√ß√£o B: Aplica√ß√£o pr√°tica do conceito',
            'Op√ß√£o C: Exemplo espec√≠fico do contexto',
            'Op√ß√£o D: Defini√ß√£o t√©cnica avan√ßada'
          ],
          correctOption: 0,
          helpMessage: `Pense no que aprendemos sobre ${query} e considere o objetivo deste slide.`,
          correctAnswer: `A resposta correta √© a **Op√ß√£o A**, pois representa uma compreens√£o s√≥lida dos conceitos fundamentais de ${query}.`
        }),
        imagePrompt: slideInfo.imagePrompt || query
      };
    }

    return NextResponse.json({
      success: true,
      slide: slide
    });

  } catch (error: any) {
    console.error('‚ùå Erro na API progressive-slide:', error);
    
    return NextResponse.json(
      { 
        success: false, 
        error: 'Erro interno do servidor',
        details: error.message 
      },
      { status: 500 }
    );
  }
}
