import { NextRequest, NextResponse } from 'next/server';
import { callGrok } from '@/lib/providers/grok';
import { getServerSession } from 'next-auth';
import { authOptions } from '@/lib/auth';
import { aiCache, cacheUtils } from '@/lib/cache/aiCache';

export const dynamic = 'force-dynamic';

export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions);
    if (!session) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    if (!process.env.GROK_API_KEY) {
      return NextResponse.json({
        error: 'Grok API key not configured'
      }, { status: 500 });
    }

    const { reaction, step, parameters } = await request.json();

    if (!reaction) {
      return NextResponse.json({ error: 'Reaction data is required' }, { status: 400 });
    }

    // Tentar obter do cache primeiro
    const cacheKey = cacheUtils.generateVisualEffectsKey(reaction, step, parameters);
    const cachedResult = await aiCache.getVisualEffects(reaction, step, parameters);
    
    if (cachedResult) {
      console.log(`‚úÖ [VIRTUAL-LAB] Visual effects retrieved from cache`);
      return NextResponse.json({
        success: true,
        visualEffects: cachedResult,
        reaction,
        step,
        parameters,
        timestamp: new Date().toISOString(),
        aiProvider: 'grok-4-fast-reasoning',
        cached: true
      });
    }

    console.log(`üé® [VIRTUAL-LAB] Generating visual effects with Grok 4 Fast:`, {
      reactionType: reaction.type,
      step,
      parameters
    });

    const prompt = `Como especialista em simula√ß√µes de laborat√≥rio virtual, gere efeitos visuais realistas para esta rea√ß√£o qu√≠mica:

REA√á√ÉO: ${reaction.equation || 'Rea√ß√£o qu√≠mica'}
TIPO: ${reaction.type || 'Desconhecido'}
ETAPA: ${step || 'In√≠cio'}
PAR√ÇMETROS: ${JSON.stringify(parameters || {})}

Gere uma descri√ß√£o detalhada dos efeitos visuais que devem aparecer no laborat√≥rio virtual:

1. **CORES**: Mudan√ßas de cor dos reagentes e produtos
2. **PART√çCULAS**: Forma√ß√£o de precipitados, bolhas, cristais
3. **MOVIMENTO**: Agita√ß√£o, turbul√™ncia, fluxo de l√≠quidos
4. **TEMPERATURA**: Indicadores visuais de mudan√ßa de temperatura
5. **GASES**: Libera√ß√£o de vapores, bolhas de g√°s
6. **ANIMA√á√ïES**: Sequ√™ncia temporal dos efeitos
7. **INTENSIDADE**: Dura√ß√£o e intensidade de cada efeito
8. **EQUIPAMENTOS**: Estado visual dos equipamentos (b√©queres, tubos de ensaio, etc.)

Responda em formato JSON estruturado para facilitar a implementa√ß√£o visual.`;

    try {
      const result = await callGrok(
        'grok-4-fast-reasoning',
        [],
        prompt,
        'Voc√™ √© um especialista em design de laborat√≥rios virtuais e efeitos visuais cient√≠ficos. Sempre forne√ßa descri√ß√µes detalhadas e realistas dos efeitos que devem aparecer durante experimentos qu√≠micos.'
      );

      const text = result.text;

      console.log(`‚úÖ [VIRTUAL-LAB] Visual effects generated successfully with Grok 4 Fast`);

      // Tentar extrair JSON da resposta
      let visualEffects;
      try {
        const jsonMatch = text.match(/\{[\s\S]*\}/);
        if (jsonMatch) {
          visualEffects = JSON.parse(jsonMatch[0]);
        } else {
          // Fallback se n√£o conseguir fazer parse do JSON
          visualEffects = {
            colors: ['Sem mudan√ßa de cor identificada'],
            particles: ['Sem part√≠culas identificadas'],
            movement: ['Sem movimento identificado'],
            temperature: 'Sem mudan√ßa de temperatura',
            gases: ['Sem gases identificados'],
            animations: ['Anima√ß√£o b√°sica'],
            intensity: 'M√©dia',
            equipment: ['Estado normal dos equipamentos'],
            rawResponse: text
          };
        }
      } catch (parseError) {
        visualEffects = {
          colors: ['Sem mudan√ßa de cor identificada'],
          particles: ['Sem part√≠culas identificadas'],
          movement: ['Sem movimento identificado'],
          temperature: 'Sem mudan√ßa de temperatura',
          gases: ['Sem gases identificados'],
          animations: ['Anima√ß√£o b√°sica'],
          intensity: 'M√©dia',
          equipment: ['Estado normal dos equipamentos'],
          rawResponse: text
        };
      }

      // Salvar no cache
      await aiCache.setVisualEffects(reaction, step, parameters, visualEffects, 3600);

      return NextResponse.json({
        success: true,
        visualEffects,
        reaction,
        step,
        parameters,
        timestamp: new Date().toISOString(),
        aiProvider: 'grok-4-fast-reasoning',
        cached: false
      });

    } catch (error: any) {
      console.error('‚ùå [VIRTUAL-LAB] Error generating visual effects:', error);
      return NextResponse.json({
        error: 'Failed to generate visual effects',
        details: error.message
      }, { status: 500 });
    }

  } catch (error: any) {
    console.error('‚ùå [VIRTUAL-LAB] Processing error:', error);
    return NextResponse.json({
      error: 'Failed to process request',
      details: error.message
    }, { status: 500 });
  }
}
