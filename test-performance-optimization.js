#!/usr/bin/env node

// Script para testar a performance dos endpoints otimizados
const BASE_URL = process.env.BASE_URL || 'http://localhost:3000';

const testMessages = [
  'oi tudo bem?',
  'Me ajude com uma d√∫vida de matem√°tica',
  'Como funciona a fotoss√≠ntese?',
  'Preciso de ajuda com um problema t√©cnico',
  'Quero fazer um simulado do ENEM',
  'Bom dia! Preciso de informa√ß√µes sobre pagamento',
  'Estou com problemas no computador',
  'Como posso melhorar minha reda√ß√£o?',
  'Preciso de uma imagem para minha apresenta√ß√£o',
  'Estou me sentindo ansioso com os estudos'
];

async function testEndpoint(endpoint, message, iterations = 3) {
  console.log(`\nüß™ Testando ${endpoint} com: "${message}"`);
  
  const times = [];
  
  for (let i = 0; i < iterations; i++) {
    const startTime = Date.now();
    
    try {
      const response = await fetch(`${BASE_URL}${endpoint}`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          message,
          module: 'auto',
          history: [],
          useCache: false
        })
      });
      
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      
      // Ler a resposta para simular uso real
      const text = await response.text();
      const endTime = Date.now();
      const duration = endTime - startTime;
      
      times.push(duration);
      
      console.log(`  Tentativa ${i + 1}: ${duration}ms`);
      
    } catch (error) {
      console.error(`  ‚ùå Erro na tentativa ${i + 1}:`, error.message);
    }
  }
  
  if (times.length > 0) {
    const avgTime = times.reduce((a, b) => a + b, 0) / times.length;
    const minTime = Math.min(...times);
    const maxTime = Math.max(...times);
    
    console.log(`  üìä M√©dia: ${avgTime.toFixed(0)}ms | Min: ${minTime}ms | Max: ${maxTime}ms`);
    return { avgTime, minTime, maxTime, times };
  }
  
  return null;
}

async function runPerformanceTest() {
  console.log('üöÄ Iniciando teste de performance dos endpoints otimizados\n');
  console.log(`üìç URL base: ${BASE_URL}`);
  
  const results = {
    'ai-sdk-multi': [],
    'ultra-fast': []
  };
  
  for (const message of testMessages) {
    // Testar endpoint atual otimizado
    const multiResult = await testEndpoint('/api/chat/ai-sdk-multi', message);
    if (multiResult) {
      results['ai-sdk-multi'].push(multiResult);
    }
    
    // Testar novo endpoint ultra-r√°pido
    const ultraResult = await testEndpoint('/api/chat/ultra-fast', message);
    if (ultraResult) {
      results['ultra-fast'].push(ultraResult);
    }
    
    // Pequena pausa entre testes
    await new Promise(resolve => setTimeout(resolve, 500));
  }
  
  // Calcular estat√≠sticas finais
  console.log('\nüìà RESULTADOS FINAIS:');
  console.log('='.repeat(50));
  
  for (const [endpoint, endpointResults] of Object.entries(results)) {
    if (endpointResults.length === 0) {
      console.log(`\n‚ùå ${endpoint}: Nenhum resultado v√°lido`);
      continue;
    }
    
    const allTimes = endpointResults.flatMap(r => r.times);
    const avgTime = allTimes.reduce((a, b) => a + b, 0) / allTimes.length;
    const minTime = Math.min(...allTimes);
    const maxTime = Math.max(...allTimes);
    
    console.log(`\nüéØ ${endpoint}:`);
    console.log(`   M√©dia geral: ${avgTime.toFixed(0)}ms`);
    console.log(`   Tempo m√≠nimo: ${minTime}ms`);
    console.log(`   Tempo m√°ximo: ${maxTime}ms`);
    console.log(`   Testes v√°lidos: ${endpointResults.length}/${testMessages.length}`);
  }
  
  // Compara√ß√£o
  if (results['ai-sdk-multi'].length > 0 && results['ultra-fast'].length > 0) {
    const multiAvg = results['ai-sdk-multi'].flatMap(r => r.times).reduce((a, b) => a + b, 0) / results['ai-sdk-multi'].flatMap(r => r.times).length;
    const ultraAvg = results['ultra-fast'].flatMap(r => r.times).reduce((a, b) => a + b, 0) / results['ultra-fast'].flatMap(r => r.times).length;
    
    const improvement = ((multiAvg - ultraAvg) / multiAvg) * 100;
    
    console.log('\nüèÜ COMPARA√á√ÉO:');
    console.log(`   Melhoria do ultra-fast: ${improvement.toFixed(1)}%`);
    console.log(`   Redu√ß√£o de tempo: ${(multiAvg - ultraAvg).toFixed(0)}ms`);
  }
  
  console.log('\n‚úÖ Teste de performance conclu√≠do!');
}

// Executar teste
runPerformanceTest().catch(console.error);
