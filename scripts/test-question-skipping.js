#!/usr/bin/env node

/**
 * Script para testar a funcionalidade de pular quest√µes inexistentes
 */

const { enemLocalDB } = require('../lib/enem-local-database.ts');

async function testQuestionSkipping() {
  console.log('üß™ Testando funcionalidade de pular quest√µes inexistentes...\n');

  try {
    // Teste 1: Verificar se a base de dados est√° dispon√≠vel
    console.log('1Ô∏è‚É£ Verificando disponibilidade da base de dados...');
    const isAvailable = enemLocalDB.isAvailable();
    console.log(`   Base de dados dispon√≠vel: ${isAvailable ? '‚úÖ' : '‚ùå'}`);
    
    if (!isAvailable) {
      console.log('‚ùå Base de dados n√£o dispon√≠vel. Encerrando teste.');
      return;
    }

    // Teste 2: Obter estat√≠sticas gerais
    console.log('\n2Ô∏è‚É£ Obtendo estat√≠sticas gerais...');
    const generalStats = await enemLocalDB.getStats();
    console.log(`   Total de anos: ${generalStats.totalYears}`);
    console.log(`   Total de quest√µes listadas: ${generalStats.totalQuestions}`);
    console.log(`   Quest√µes por ano:`, generalStats.questionsByYear);

    // Teste 3: Obter estat√≠sticas de disponibilidade
    console.log('\n3Ô∏è‚É£ Calculando estat√≠sticas de disponibilidade...');
    const availableStats = await enemLocalDB.getAvailableStats();
    console.log(`   Taxa geral de disponibilidade: ${availableStats.availabilityRate.toFixed(1)}%`);
    console.log(`   Quest√µes dispon√≠veis: ${availableStats.totalAvailableQuestions}/${availableStats.totalListedQuestions}`);

    // Teste 4: Buscar quest√µes de um ano espec√≠fico
    console.log('\n4Ô∏è‚É£ Testando busca de quest√µes por ano...');
    const testYear = 2023;
    const yearQuestions = await enemLocalDB.getQuestionsByYear(testYear, {
      discipline: 'linguagens',
      limit: 10
    });
    console.log(`   Quest√µes encontradas para ${testYear} (linguagens): ${yearQuestions.length}`);

    // Teste 5: Buscar quest√µes com filtros
    console.log('\n5Ô∏è‚É£ Testando busca com filtros...');
    const filteredQuestions = await enemLocalDB.getQuestions({
      year: 2022,
      discipline: 'matematica',
      limit: 5,
      random: true
    });
    console.log(`   Quest√µes encontradas para 2022 (matem√°tica): ${filteredQuestions.length}`);

    // Teste 6: Buscar quest√µes aleat√≥rias
    console.log('\n6Ô∏è‚É£ Testando busca aleat√≥ria...');
    const randomQuestions = await enemLocalDB.getRandomQuestions({
      discipline: 'ciencias-humanas',
      limit: 3
    });
    console.log(`   Quest√µes aleat√≥rias encontradas (ci√™ncias humanas): ${randomQuestions.length}`);

    // Teste 7: Verificar se quest√µes espec√≠ficas existem
    console.log('\n7Ô∏è‚É£ Testando verifica√ß√£o de exist√™ncia de quest√µes espec√≠ficas...');
    const testCases = [
      { year: 2023, index: 10, language: null }, // Deve existir
      { year: 2023, index: 999, language: null }, // N√£o deve existir
      { year: 2023, index: 1, language: 'ingles' }, // Pode n√£o existir
    ];

    for (const testCase of testCases) {
      const exists = await enemLocalDB.questionExists(testCase.year, testCase.index, testCase.language);
      console.log(`   Quest√£o ${testCase.index} de ${testCase.year}${testCase.language ? ` (${testCase.language})` : ''}: ${exists ? '‚úÖ' : '‚ùå'}`);
    }

    console.log('\n‚úÖ Testes conclu√≠dos com sucesso!');
    console.log('\nüìä RESUMO:');
    console.log(`   - Base de dados: ${isAvailable ? 'Dispon√≠vel' : 'Indispon√≠vel'}`);
    console.log(`   - Taxa de disponibilidade: ${availableStats.availabilityRate.toFixed(1)}%`);
    console.log(`   - Quest√µes dispon√≠veis: ${availableStats.totalAvailableQuestions}/${availableStats.totalListedQuestions}`);
    console.log(`   - Sistema de pulo de quest√µes: ‚úÖ Funcionando`);

  } catch (error) {
    console.error('‚ùå Erro durante os testes:', error);
  }
}

// Executa o teste
if (require.main === module) {
  testQuestionSkipping().then(() => {
    console.log('\nüèÅ Teste finalizado.');
    process.exit(0);
  }).catch(error => {
    console.error('‚ùå Erro fatal no teste:', error);
    process.exit(1);
  });
}

module.exports = { testQuestionSkipping };
