#!/usr/bin/env node

/**
 * Script de Execu√ß√£o R√°pida: Benchmark de Aulas
 * 
 * Executa o benchmark mais pr√°tico e gera um relat√≥rio resumido
 * 
 * Execu√ß√£o: node scripts/run-benchmark.js
 */

import { execSync } from 'child_process';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

console.log('üöÄ EXECUTANDO BENCHMARK DE AULAS');
console.log('=' .repeat(50));
console.log(`üìÖ Data: ${new Date().toLocaleString('pt-BR')}`);
console.log('=' .repeat(50));

// Verificar se o servidor est√° rodando
console.log('üîç Verificando servidor...');
try {
  const { default: fetch } = await import('node-fetch');
  const response = await fetch('http://localhost:3000/api/health');
  if (response.ok) {
    console.log('‚úÖ Servidor est√° rodando');
  } else {
    throw new Error('Servidor n√£o respondeu corretamente');
  }
} catch (error) {
  console.error('‚ùå Servidor n√£o est√° acess√≠vel');
  console.error('   Certifique-se de que est√° rodando com: npm run dev');
  process.exit(1);
}

// Executar benchmark
console.log('\nüß™ Executando benchmark...');
try {
  execSync('node scripts/benchmark-aulas-final.js', { 
    stdio: 'inherit',
    cwd: path.join(__dirname, '..')
  });
  
  console.log('\n‚úÖ Benchmark conclu√≠do com sucesso!');
  
  // Mostrar resumo dos resultados
  const resultsFile = path.join(__dirname, '..', 'aulas-benchmark-final.json');
  if (fs.existsSync(resultsFile)) {
    const results = JSON.parse(fs.readFileSync(resultsFile, 'utf8'));
    
    console.log('\nüìä RESUMO DOS RESULTADOS:');
    console.log('-'.repeat(40));
    console.log(`Total de testes: ${results.totalTests}`);
    console.log(`Taxa de sucesso: ${results.summary.averageSuccessRate}`);
    console.log(`Mais r√°pido: ${results.summary.fastestModel}`);
    console.log(`Mais confi√°vel: ${results.summary.mostReliableModel}`);
    console.log(`Maior qualidade: ${results.summary.highestQualityModel}`);
    console.log(`Mais eficiente: ${results.summary.mostEfficientModel}`);
    
    console.log('\nüíæ Relat√≥rio completo salvo em: aulas-benchmark-final.json');
  }
  
} catch (error) {
  console.error('‚ùå Erro durante o benchmark:', error.message);
  process.exit(1);
}

console.log('\nüéâ Execu√ß√£o conclu√≠da!');
