#!/usr/bin/env node

/**
 * Script para corrigir problemas de deploy no Render
 * - Verifica configura√ß√£o do banco de dados
 * - Testa conex√£o com Neon PostgreSQL
 * - Valida vari√°veis de ambiente
 */

import { PrismaClient } from '@prisma/client';

async function checkDatabaseConnection() {
  console.log('üîç Verificando conex√£o com banco de dados...');
  
  const prisma = new PrismaClient({
    log: ['query', 'info', 'warn', 'error'],
  });

  try {
    // Teste b√°sico de conex√£o
    await prisma.$connect();
    console.log('‚úÖ Conex√£o com banco estabelecida');

    // Verificar se as tabelas existem
    const userCount = await prisma.user.count();
    console.log(`‚úÖ Tabela User encontrada (${userCount} usu√°rios)`);

    // Teste de query simples
    const testUser = await prisma.user.findFirst({
      select: { id: true, email: true, role: true }
    });
    
    if (testUser) {
      console.log(`‚úÖ Query de teste bem-sucedida: ${testUser.email}`);
    } else {
      console.log('‚ö†Ô∏è Nenhum usu√°rio encontrado na base');
    }

    return true;
  } catch (error) {
    console.error('‚ùå Erro de conex√£o com banco:', error.message);
    
    if (error.message.includes('Can\'t reach database server')) {
      console.log('\nüîß Poss√≠veis solu√ß√µes:');
      console.log('1. Verifique se DATABASE_URL est√° correto no Render');
      console.log('2. Verifique se o banco Neon est√° ativo');
      console.log('3. Verifique se a URL inclui ?sslmode=require');
      console.log('4. Execute: npx prisma db push');
    }
    
    return false;
  } finally {
    await prisma.$disconnect();
  }
}

async function checkEnvironmentVariables() {
  console.log('\nüîç Verificando vari√°veis de ambiente...');
  
  const requiredVars = [
    'DATABASE_URL',
    'NEXTAUTH_SECRET',
    'NEXTAUTH_URL',
    'OPENAI_API_KEY'
  ];

  const missing = [];
  const present = [];

  requiredVars.forEach(varName => {
    if (process.env[varName]) {
      present.push(varName);
      console.log(`‚úÖ ${varName}: configurado`);
    } else {
      missing.push(varName);
      console.log(`‚ùå ${varName}: n√£o encontrado`);
    }
  });

  if (missing.length > 0) {
    console.log('\n‚ö†Ô∏è Vari√°veis obrigat√≥rias ausentes:', missing.join(', '));
    console.log('\nüîß Configure no Render Dashboard:');
    missing.forEach(varName => {
      console.log(`- ${varName}=valor`);
    });
    return false;
  }

  return true;
}

async function checkNextAuthConfig() {
  console.log('\nüîç Verificando configura√ß√£o NextAuth...');
  
  const nextAuthUrl = process.env.NEXTAUTH_URL;
  const nextAuthSecret = process.env.NEXTAUTH_SECRET;

  if (!nextAuthUrl) {
    console.log('‚ùå NEXTAUTH_URL n√£o configurado');
    return false;
  }

  if (!nextAuthSecret) {
    console.log('‚ùå NEXTAUTH_SECRET n√£o configurado');
    return false;
  }

  if (nextAuthSecret.length < 32) {
    console.log('‚ö†Ô∏è NEXTAUTH_SECRET muito curto (m√≠nimo 32 caracteres)');
    return false;
  }

  console.log(`‚úÖ NEXTAUTH_URL: ${nextAuthUrl}`);
  console.log(`‚úÖ NEXTAUTH_SECRET: ${nextAuthSecret.substring(0, 8)}...`);
  
  return true;
}

async function generateNextAuthSecret() {
  console.log('\nüîë Gerando nova chave NEXTAUTH_SECRET...');
  
  const crypto = await import('crypto');
  const secret = crypto.randomBytes(32).toString('base64');
  
  console.log('Nova chave gerada:');
  console.log(`NEXTAUTH_SECRET="${secret}"`);
  console.log('\nüîß Adicione esta chave no Render Dashboard');
  
  return secret;
}

async function main() {
  console.log('üöÄ Verifica√ß√£o de Deploy Render - HubEdu.ia\n');
  
  const envOk = await checkEnvironmentVariables();
  const authOk = await checkNextAuthConfig();
  const dbOk = await checkDatabaseConnection();

  console.log('\nüìä Resumo da Verifica√ß√£o:');
  console.log(`Vari√°veis de ambiente: ${envOk ? '‚úÖ' : '‚ùå'}`);
  console.log(`Configura√ß√£o NextAuth: ${authOk ? '‚úÖ' : '‚ùå'}`);
  console.log(`Conex√£o com banco: ${dbOk ? '‚úÖ' : '‚ùå'}`);

  if (!envOk || !authOk || !dbOk) {
    console.log('\n‚ùå Problemas encontrados. Corrija antes do deploy.');
    
    if (!authOk) {
      await generateNextAuthSecret();
    }
    
    process.exit(1);
  } else {
    console.log('\n‚úÖ Tudo configurado corretamente! Pronto para deploy.');
  }
}

// Executar apenas se chamado diretamente
if (import.meta.url === `file://${process.argv[1]}`) {
  main().catch(console.error);
}

export {
  checkDatabaseConnection,
  checkEnvironmentVariables,
  checkNextAuthConfig,
  generateNextAuthSecret
};
